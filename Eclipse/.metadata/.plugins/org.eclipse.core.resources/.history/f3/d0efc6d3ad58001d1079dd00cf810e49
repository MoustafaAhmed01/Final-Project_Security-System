/******************************************************************************
 *
 * Module: Common - Platform Types Abstraction
 *
 * File Name: uart.c
 *
 * Description: types for AVR
 *
 * Date Created: 13/10/2022
 *
 * Author: Moustafa Ahmed
 *
 *******************************************************************************/

/**-------------------------INCLUDES Section------------------------**/
#include "Libraries.h"
#include "GPIO.h"
#include "uart.h"

/**-------------------------Function Definition Section-------------**/


/*
 * Description:
 *
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
	/**-------------------------Local Variables---------------------*
	 UBRR_VALUE will be used to set the baud rate later
	uint16 a_ubrr_value = 0;
	*-------------------------END Local Variables-----------------*

	 Setting the transmission speed
	UCSRA = (UCSRA & 0xFD) | ((Config_Ptr->transmitSpeed)<<U2X);
	-------------------------------------------------------------------

	 Setting the INTERRUPT for RX
	UCSRB = (UCSRB & 0x7F) | ((Config_Ptr->receiverINT)<<RXCIE);
	-------------------------------------------------------------------

	 Setting the INTERRUPT for TX
	UCSRB = (UCSRB & 0x7F) | ((Config_Ptr->transmitterINT)<<TXCIE);
	-------------------------------------------------------------------

	 Setting the data register empty INTERRUPT
	UCSRB = (UCSRB & 0xDF) | ((Config_Ptr->emptyINT)<<UDRIE);
	-------------------------------------------------------------------

	 Setting the character size on two separate register
	 Adding only the third-bit to UCSRB and the 2 least bits to UCSRC
	UCSRB = (UCSRB & 0xFB) | (((Config_Ptr->charSize)>>2)<<UCSZ2);
	UCSRC = (UCSRC & 0xF9) | (((Config_Ptr->charSize)<<6)>>5);
	-------------------------------------------------------------------

	 USART Reg Select between UCSRC & UBRRH
	UCSRC = (UCSRC & 0x7F) | ((Config_Ptr->regSelect)<<URSEL);
	-------------------------------------------------------------------

	 USART Mode Select: 1- A-Synch , 2- Synch
	UCSRC = (UCSRC & 0xBF) | ((Config_Ptr->modeSelect)<<UMSEL);
	-------------------------------------------------------------------

	 Selecting the parity mode : Disabled/Even/ODD
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->paritySelect)<<4);
	-------------------------------------------------------------------

	 Selecting the stop bit mode: 1-bit and 2-bit
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stopBitSelect)<<USBS);
	-------------------------------------------------------------------

	 Selecting the clock Polarity: Rising and Falling
	UCSRC = (UCSRC & 0xFE) | (Config_Ptr->clockPolatiry);
	-------------------------------------------------------------------

	 Receiver Enable
	UCSRB = (UCSRB & 0xEF) | ((Config_Ptr->receiverEN)<<RXEN);
	-------------------------------------------------------------------

	 Transmitter Enable
	UCSRB = (UCSRB & 0xF7) | ((Config_Ptr->transmitterEN)<<TXEN);
	-------------------------------------------------------------------

	 Setting the baud rate
	 At first you should calculate the UBRR value
	a_ubrr_value = (uint16)((F_CPU*(Config_Ptr->transmitSpeed+1)/((Config_Ptr->baud_rate)*(16)))-1);

	 First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	UBRRH = a_ubrr_value>>8;
	UBRRL = a_ubrr_value;*/

	uint16 ubrr_value = 0;

	/************************** UCSRB Description **************************
	 * RXCIE = 0 Disable USART RX Complete Interrupt Enable
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 5,6,7,8-bit data mode
	 * RXB8 & TXB8 not used for 5,6,7,8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);


	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UPM1:0  = parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = For 5,6,7,8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | ( ((Config_Ptr->bit_data)<<1) & 0x06 )  ;
	/* Set Parity and Number of Stop Bits*/
	UCSRC |= (((Config_Ptr->parity)<<4) & 0x30 ) | (((Config_Ptr->stop_bit)<<3) & 0x08 );


	/* Asynchronous Double Speed Mode */
	if(Config_Ptr->Mode == Asynchronous_Double_Speed_Mode)
	{
		/* U2X = 1 for double transmission speed */
		UCSRA = (1<<U2X);


		UCSRC &= ~(1<<UMSEL);		/* Asynchronous Operation, UMSEL =	0 */


		/* Calculate the UBRR register value */
		ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
	}

	/* Synchronous Mode */
	else if((Config_Ptr->Mode == Synchronous_Mode))
	{
		UCSRC |= (1<<UMSEL);		/* Synchronous Operation	*/

		/* UCPOL : Bit 0
		 * UCPOL = 0 -> TX Rising XCK edge ,RX Falling XCK edge
		 * UCPOL = 1 -> TX Falling XCK edge ,RX Rising XCK edge
		 * */
		UCSRC |= SYNC_TX_XCK_EGGE;

		/* Calculate the UBRR register value */
		ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 2UL))) - 1);

	}

	/*	Asynchronous Normal Mode */
	else
	{
		UCSRC &= ~(1<<UMSEL);		/* Asynchronous Operation, UMSEL =	0 */

		/* Calculate the UBRR register value */
		ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 16UL))) - 1);
	}



	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
	UBRRL = ubrr_value;

	/*----------------------------END--------------------------------*/
}
/*-------------------------------------------------------------------*/

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;

	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
}

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
		i++;
	}
	/************************* Another Method *************************
	while(*Str != '\0')
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '=')
	{
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
}


/**---------------------------------END-----------------------------**/
