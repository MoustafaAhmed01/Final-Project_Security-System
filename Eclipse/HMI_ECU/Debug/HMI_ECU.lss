
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00800060  000032ee  00003382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080013e  0080013e  00003460  2**0
                  ALLOC
  3 .stab         00003168  00000000  00000000  00003460  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002576  00000000  00000000  000065c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000aa37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b922  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c6d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c830  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cabd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d28b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <__vector_4>
      14:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 fc 11 	jmp	0x23f8	; 0x23f8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__vector_9>
      28:	0c 94 96 11 	jmp	0x232c	; 0x232c <__vector_10>
      2c:	0c 94 63 11 	jmp	0x22c6	; 0x22c6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 33       	cpi	r26, 0x3E	; 62
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e3       	ldi	r26, 0x3E	; 62
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 34       	cpi	r26, 0x46	; 70
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 25 09 	call	0x124a	; 0x124a <main>
      8a:	0c 94 75 19 	jmp	0x32ea	; 0x32ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e1       	ldi	r26, 0x15	; 21
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 15 19 	jmp	0x322a	; 0x322a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 05 19 	jmp	0x320a	; 0x320a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 05 19 	jmp	0x320a	; 0x320a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e1       	ldi	r24, 0x15	; 21
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 15 19 	jmp	0x322a	; 0x322a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 05 19 	jmp	0x320a	; 0x320a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 05 19 	jmp	0x320a	; 0x320a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 05 19 	jmp	0x320a	; 0x320a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 25 19 	jmp	0x324a	; 0x324a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(direction == PIN_INPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	88 23       	and	r24, r24
     bb2:	a9 f4       	brne	.+42     	; 0xbde <GPIO_setupPinDirection+0x98>
			{
				CLEAR_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	80 95       	com	r24
     bd8:	84 23       	and	r24, r20
     bda:	8c 93       	st	X, r24
     bdc:	97 c0       	rjmp	.+302    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRA,pin_num);
     bde:	aa e3       	ldi	r26, 0x3A	; 58
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	ea e3       	ldi	r30, 0x3A	; 58
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	48 2f       	mov	r20, r24
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 2e       	mov	r0, r18
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <GPIO_setupPinDirection+0xb6>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <GPIO_setupPinDirection+0xb2>
     c00:	84 2b       	or	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(direction == PIN_INPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	88 23       	and	r24, r24
     c0a:	a9 f4       	brne	.+42     	; 0xc36 <GPIO_setupPinDirection+0xf0>
			{
				CLEAR_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	80 95       	com	r24
     c30:	84 23       	and	r24, r20
     c32:	8c 93       	st	X, r24
     c34:	6b c0       	rjmp	.+214    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRB,pin_num);
     c36:	a7 e3       	ldi	r26, 0x37	; 55
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e7 e3       	ldi	r30, 0x37	; 55
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	48 2f       	mov	r20, r24
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	02 2e       	mov	r0, r18
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <GPIO_setupPinDirection+0x10e>
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	0a 94       	dec	r0
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <GPIO_setupPinDirection+0x10a>
     c58:	84 2b       	or	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(direction == PIN_INPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	88 23       	and	r24, r24
     c62:	a9 f4       	brne	.+42     	; 0xc8e <GPIO_setupPinDirection+0x148>
			{
				CLEAR_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	80 95       	com	r24
     c88:	84 23       	and	r24, r20
     c8a:	8c 93       	st	X, r24
     c8c:	3f c0       	rjmp	.+126    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRC,pin_num);
     c8e:	a4 e3       	ldi	r26, 0x34	; 52
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e4 e3       	ldi	r30, 0x34	; 52
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <GPIO_setupPinDirection+0x166>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <GPIO_setupPinDirection+0x162>
     cb0:	84 2b       	or	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(direction == PIN_INPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	88 23       	and	r24, r24
     cba:	a9 f4       	brne	.+42     	; 0xce6 <GPIO_setupPinDirection+0x1a0>
			{
				CLEAR_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	80 95       	com	r24
     ce0:	84 23       	and	r24, r20
     ce2:	8c 93       	st	X, r24
     ce4:	13 c0       	rjmp	.+38     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRD,pin_num);
     ce6:	a1 e3       	ldi	r26, 0x31	; 49
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e1 e3       	ldi	r30, 0x31	; 49
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <GPIO_setupPinDirection+0x1be>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <GPIO_setupPinDirection+0x1ba>
     d08:	84 2b       	or	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	84 30       	cpi	r24, 0x04	; 4
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	88 30       	cpi	r24, 0x08	; 8
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(value == LOGIC_LOW)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	88 23       	and	r24, r24
     d88:	a9 f4       	brne	.+42     	; 0xdb4 <GPIO_writePin+0x98>
			{
				CLEAR_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	80 95       	com	r24
     dae:	84 23       	and	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	97 c0       	rjmp	.+302    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTA,pin_num);
     db4:	ab e3       	ldi	r26, 0x3B	; 59
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	eb e3       	ldi	r30, 0x3B	; 59
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 2e       	mov	r0, r18
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <GPIO_writePin+0xb6>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <GPIO_writePin+0xb2>
     dd6:	84 2b       	or	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(value == LOGIC_LOW)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	88 23       	and	r24, r24
     de0:	a9 f4       	brne	.+42     	; 0xe0c <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	80 95       	com	r24
     e06:	84 23       	and	r24, r20
     e08:	8c 93       	st	X, r24
     e0a:	6b c0       	rjmp	.+214    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB,pin_num);
     e0c:	a8 e3       	ldi	r26, 0x38	; 56
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e8 e3       	ldi	r30, 0x38	; 56
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <GPIO_writePin+0x10e>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <GPIO_writePin+0x10a>
     e2e:	84 2b       	or	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(value == LOGIC_LOW)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	88 23       	and	r24, r24
     e38:	a9 f4       	brne	.+42     	; 0xe64 <GPIO_writePin+0x148>
			{
				CLEAR_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	3f c0       	rjmp	.+126    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTC,pin_num);
     e64:	a5 e3       	ldi	r26, 0x35	; 53
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e5 e3       	ldi	r30, 0x35	; 53
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <GPIO_writePin+0x166>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <GPIO_writePin+0x162>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(value == LOGIC_LOW)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	88 23       	and	r24, r24
     e90:	a9 f4       	brne	.+42     	; 0xebc <GPIO_writePin+0x1a0>
			{
				CLEAR_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	80 95       	com	r24
     eb6:	84 23       	and	r24, r20
     eb8:	8c 93       	st	X, r24
     eba:	13 c0       	rjmp	.+38     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTD,pin_num);
     ebc:	a2 e3       	ldi	r26, 0x32	; 50
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e2 e3       	ldi	r30, 0x32	; 50
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <GPIO_writePin+0x1be>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <GPIO_writePin+0x1ba>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_pinValue = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	84 30       	cpi	r24, 0x04	; 4
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	88 30       	cpi	r24, 0x08	; 8
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				a_pinValue = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				a_pinValue = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				a_pinValue = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				a_pinValue = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			break;
/*----------------------------------------------------------------------------*/
		}
	}

	return a_pinValue;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS) /* Corner Case : If input was wrong */
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS) /* Corner Case : If input was wrong */
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	85 30       	cpi	r24, 0x05	; 5
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_portValue = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			a_portValue = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			a_portValue = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			a_portValue = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			a_portValue = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return a_portValue;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <Drivers_Init>:
/*
 * Description:
 * Initializing All drivers
 */
void Drivers_Init()
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	65 97       	sbiw	r28, 0x15	; 21
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
	 * UART_STOP_BIT_SELECT : 1-bit
	 * UART_CLOCK_POLARITY : A-sync Rising
	 * baud_rate : 9600
	 *
	 */
	UART_ConfigType UART_Config = {DOUBLE_TR_SPEED,RECEIVE_INT_EN_OFF,TRANSMIT_INT_EN_OFF,EMPTY_INT_EN_OFF,RECEIVER_EN_ON,TRANSMITTER_EN_ON,EIGHT_BIT,UBRRH_REG,ASYNCHRONOUS,PARITY_DISABLE,ONE_BIT,A_Sync_RISING_EDGE,9600};
    11d6:	ce 01       	movw	r24, r28
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	9a 8b       	std	Y+18, r25	; 0x12
    11dc:	89 8b       	std	Y+17, r24	; 0x11
    11de:	ee e2       	ldi	r30, 0x2E	; 46
    11e0:	f1 e0       	ldi	r31, 0x01	; 1
    11e2:	fc 8b       	std	Y+20, r31	; 0x14
    11e4:	eb 8b       	std	Y+19, r30	; 0x13
    11e6:	f0 e1       	ldi	r31, 0x10	; 16
    11e8:	fd 8b       	std	Y+21, r31	; 0x15
    11ea:	eb 89       	ldd	r30, Y+19	; 0x13
    11ec:	fc 89       	ldd	r31, Y+20	; 0x14
    11ee:	00 80       	ld	r0, Z
    11f0:	8b 89       	ldd	r24, Y+19	; 0x13
    11f2:	9c 89       	ldd	r25, Y+20	; 0x14
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	9c 8b       	std	Y+20, r25	; 0x14
    11f8:	8b 8b       	std	Y+19, r24	; 0x13
    11fa:	e9 89       	ldd	r30, Y+17	; 0x11
    11fc:	fa 89       	ldd	r31, Y+18	; 0x12
    11fe:	00 82       	st	Z, r0
    1200:	89 89       	ldd	r24, Y+17	; 0x11
    1202:	9a 89       	ldd	r25, Y+18	; 0x12
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	9a 8b       	std	Y+18, r25	; 0x12
    1208:	89 8b       	std	Y+17, r24	; 0x11
    120a:	9d 89       	ldd	r25, Y+21	; 0x15
    120c:	91 50       	subi	r25, 0x01	; 1
    120e:	9d 8b       	std	Y+21, r25	; 0x15
    1210:	ed 89       	ldd	r30, Y+21	; 0x15
    1212:	ee 23       	and	r30, r30
    1214:	51 f7       	brne	.-44     	; 0x11ea <Drivers_Init+0x28>
	UART_init(&UART_Config);
    1216:	ce 01       	movw	r24, r28
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <UART_init>
	 *  OCR1A_Value : 23437
	 *  OCR1B_Value : ---
	 */

	/* Setting the callback function*/
	Timer1_setCallBackONE(App_timer1);
    121e:	8c ee       	ldi	r24, 0xEC	; 236
    1220:	9a e0       	ldi	r25, 0x0A	; 10
    1222:	0e 94 9d 14 	call	0x293a	; 0x293a <Timer1_setCallBackONE>

	/* Initializing LCD */
	LCD_init();
    1226:	0e 94 22 0c 	call	0x1844	; 0x1844 <LCD_init>

	/* Activating Interrupt system */
	SREG |= (1<<7);
    122a:	af e5       	ldi	r26, 0x5F	; 95
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	ef e5       	ldi	r30, 0x5F	; 95
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	80 68       	ori	r24, 0x80	; 128
    1236:	8c 93       	st	X, r24
}
    1238:	65 96       	adiw	r28, 0x15	; 21
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <main>:
/*-------------------------------------------------------------------*/

int main(void)
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	6f 97       	sbiw	r28, 0x1f	; 31
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
	/**-----------------------Local Variables----------------------**/
	System_Stage l_SystemStage = NEW_PASS;
    125e:	19 8a       	std	Y+17, r1	; 0x11
	uint8 a_PassCheckResult;

	/**-----------------------Main Section-------------------------**/

	/* Initializing Everything */
	Drivers_Init();
    1260:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <Drivers_Init>

	while(1)
	{

		if(l_SystemStage == NEW_PASS)/* First Use */
    1264:	89 89       	ldd	r24, Y+17	; 0x11
    1266:	88 23       	and	r24, r24
    1268:	79 f5       	brne	.+94     	; 0x12c8 <main+0x7e>
		{

			/* Setting up a new password */
			NewPassword(&SystemInfo);
    126a:	ce 01       	movw	r24, r28
    126c:	42 96       	adiw	r24, 0x12	; 18
    126e:	0e 94 31 0b 	call	0x1662	; 0x1662 <NewPassword>

			/**----------------------------------------------------**/
			/* Sending the values to Control_ECU to make sure that they are correct */

			while(UART_receiveByte() != CONTROL_READY){}
    1272:	0e 94 3d 18 	call	0x307a	; 0x307a <UART_receiveByte>
    1276:	80 31       	cpi	r24, 0x10	; 16
    1278:	e1 f7       	brne	.-8      	; 0x1272 <main+0x28>
			UART_sendByte('N'); /* Identifying the stage at first */
    127a:	8e e4       	ldi	r24, 0x4E	; 78
    127c:	0e 94 26 18 	call	0x304c	; 0x304c <UART_sendByte>

			/* Sending the first password */
			while(UART_receiveByte() != CONTROL_READY){}
    1280:	0e 94 3d 18 	call	0x307a	; 0x307a <UART_receiveByte>
    1284:	80 31       	cpi	r24, 0x10	; 16
    1286:	e1 f7       	brne	.-8      	; 0x1280 <main+0x36>
			UART_sendString(SystemInfo.MainPassword);
    1288:	ce 01       	movw	r24, r28
    128a:	42 96       	adiw	r24, 0x12	; 18
    128c:	0e 94 4c 18 	call	0x3098	; 0x3098 <UART_sendString>

			/* Sending the second password */
			while(UART_receiveByte() != CONTROL_READY){}
    1290:	0e 94 3d 18 	call	0x307a	; 0x307a <UART_receiveByte>
    1294:	80 31       	cpi	r24, 0x10	; 16
    1296:	e1 f7       	brne	.-8      	; 0x1290 <main+0x46>
			UART_sendString(SystemInfo.ConfirmingPassword);
    1298:	ce 01       	movw	r24, r28
    129a:	42 96       	adiw	r24, 0x12	; 18
    129c:	07 96       	adiw	r24, 0x07	; 7
    129e:	0e 94 4c 18 	call	0x3098	; 0x3098 <UART_sendString>
			/**----------------------------------------------------**/

			/* Getting the INFO if two passwords was correct or not */
			UART_sendByte(CONTROL_READY);
    12a2:	80 e1       	ldi	r24, 0x10	; 16
    12a4:	0e 94 26 18 	call	0x304c	; 0x304c <UART_sendByte>
			a_PassCheckResult = UART_receiveByte();
    12a8:	0e 94 3d 18 	call	0x307a	; 0x307a <UART_receiveByte>
    12ac:	8f 87       	std	Y+15, r24	; 0x0f

			if(a_PassCheckResult == 'F')
    12ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    12b0:	86 34       	cpi	r24, 0x46	; 70
    12b2:	11 f4       	brne	.+4      	; 0x12b8 <main+0x6e>
			{
				/* Then you will just repeat it again */
				l_SystemStage = NEW_PASS;
    12b4:	19 8a       	std	Y+17, r1	; 0x11
    12b6:	d6 cf       	rjmp	.-84     	; 0x1264 <main+0x1a>
			}
			else if(a_PassCheckResult == 'T')
    12b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ba:	84 35       	cpi	r24, 0x54	; 84
    12bc:	19 f4       	brne	.+6      	; 0x12c4 <main+0x7a>
			{
				l_SystemStage = OPTION_STAGE;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	89 8b       	std	Y+17, r24	; 0x11
    12c2:	d0 cf       	rjmp	.-96     	; 0x1264 <main+0x1a>
			}
			else
			{
				l_SystemStage = NEW_PASS;
    12c4:	19 8a       	std	Y+17, r1	; 0x11
    12c6:	ce cf       	rjmp	.-100    	; 0x1264 <main+0x1a>
			}

		}
		else if(l_SystemStage == OPTION_STAGE)
    12c8:	89 89       	ldd	r24, Y+17	; 0x11
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <main+0x86>
    12ce:	96 c0       	rjmp	.+300    	; 0x13fc <main+0x1b2>
		{
			LCD_clearScreen();
    12d0:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_clearScreen>
			LCD_moveCursor(0, 0);
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_moveCursor>
			LCD_displayString("+ : Open Door ");
    12dc:	80 e6       	ldi	r24, 0x60	; 96
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
			LCD_moveCursor(1, 0);
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_moveCursor>
			LCD_displayString("- : Change Pass ");
    12ec:	8f e6       	ldi	r24, 0x6F	; 111
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>

			/* Let's see what the user will choose */
			Keypad_Key = Keypad_getPressedKey();
    12f4:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <Keypad_getPressedKey>
    12f8:	88 8b       	std	Y+16, r24	; 0x10

			if(Keypad_Key == '+')
    12fa:	88 89       	ldd	r24, Y+16	; 0x10
    12fc:	8b 32       	cpi	r24, 0x2B	; 43
    12fe:	19 f4       	brne	.+6      	; 0x1306 <main+0xbc>
			{
				l_SystemStage = IN_DOOR;
    1300:	85 e0       	ldi	r24, 0x05	; 5
    1302:	89 8b       	std	Y+17, r24	; 0x11
    1304:	08 c0       	rjmp	.+16     	; 0x1316 <main+0xcc>
			}
			else if(Keypad_Key == '-')
    1306:	88 89       	ldd	r24, Y+16	; 0x10
    1308:	8d 32       	cpi	r24, 0x2D	; 45
    130a:	19 f4       	brne	.+6      	; 0x1312 <main+0xc8>
			{
				l_SystemStage = CHANGE_PASS_STEP;
    130c:	83 e0       	ldi	r24, 0x03	; 3
    130e:	89 8b       	std	Y+17, r24	; 0x11
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <main+0xcc>
			}
			else /* Wrong input */
			{
				l_SystemStage = OPTION_STAGE;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	89 8b       	std	Y+17, r24	; 0x11
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	a6 e9       	ldi	r26, 0x96	; 150
    131c:	b3 e4       	ldi	r27, 0x43	; 67
    131e:	8b 87       	std	Y+11, r24	; 0x0b
    1320:	9c 87       	std	Y+12, r25	; 0x0c
    1322:	ad 87       	std	Y+13, r26	; 0x0d
    1324:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1326:	6b 85       	ldd	r22, Y+11	; 0x0b
    1328:	7c 85       	ldd	r23, Y+12	; 0x0c
    132a:	8d 85       	ldd	r24, Y+13	; 0x0d
    132c:	9e 85       	ldd	r25, Y+14	; 0x0e
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	4a ef       	ldi	r20, 0xFA	; 250
    1334:	54 e4       	ldi	r21, 0x44	; 68
    1336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	8f 83       	std	Y+7, r24	; 0x07
    1340:	98 87       	std	Y+8, r25	; 0x08
    1342:	a9 87       	std	Y+9, r26	; 0x09
    1344:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1346:	6f 81       	ldd	r22, Y+7	; 0x07
    1348:	78 85       	ldd	r23, Y+8	; 0x08
    134a:	89 85       	ldd	r24, Y+9	; 0x09
    134c:	9a 85       	ldd	r25, Y+10	; 0x0a
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	40 e8       	ldi	r20, 0x80	; 128
    1354:	5f e3       	ldi	r21, 0x3F	; 63
    1356:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    135a:	88 23       	and	r24, r24
    135c:	2c f4       	brge	.+10     	; 0x1368 <main+0x11e>
		__ticks = 1;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	9e 83       	std	Y+6, r25	; 0x06
    1364:	8d 83       	std	Y+5, r24	; 0x05
    1366:	3f c0       	rjmp	.+126    	; 0x13e6 <main+0x19c>
	else if (__tmp > 65535)
    1368:	6f 81       	ldd	r22, Y+7	; 0x07
    136a:	78 85       	ldd	r23, Y+8	; 0x08
    136c:	89 85       	ldd	r24, Y+9	; 0x09
    136e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	3f ef       	ldi	r19, 0xFF	; 255
    1374:	4f e7       	ldi	r20, 0x7F	; 127
    1376:	57 e4       	ldi	r21, 0x47	; 71
    1378:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    137c:	18 16       	cp	r1, r24
    137e:	4c f5       	brge	.+82     	; 0x13d2 <main+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1380:	6b 85       	ldd	r22, Y+11	; 0x0b
    1382:	7c 85       	ldd	r23, Y+12	; 0x0c
    1384:	8d 85       	ldd	r24, Y+13	; 0x0d
    1386:	9e 85       	ldd	r25, Y+14	; 0x0e
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e2       	ldi	r20, 0x20	; 32
    138e:	51 e4       	ldi	r21, 0x41	; 65
    1390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	bc 01       	movw	r22, r24
    139a:	cd 01       	movw	r24, r26
    139c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	9e 83       	std	Y+6, r25	; 0x06
    13a6:	8d 83       	std	Y+5, r24	; 0x05
    13a8:	0f c0       	rjmp	.+30     	; 0x13c8 <main+0x17e>
    13aa:	88 ec       	ldi	r24, 0xC8	; 200
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	9c 83       	std	Y+4, r25	; 0x04
    13b0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	f1 f7       	brne	.-4      	; 0x13b6 <main+0x16c>
    13ba:	9c 83       	std	Y+4, r25	; 0x04
    13bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13be:	8d 81       	ldd	r24, Y+5	; 0x05
    13c0:	9e 81       	ldd	r25, Y+6	; 0x06
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	9e 83       	std	Y+6, r25	; 0x06
    13c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	69 f7       	brne	.-38     	; 0x13aa <main+0x160>
    13d0:	49 cf       	rjmp	.-366    	; 0x1264 <main+0x1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d2:	6f 81       	ldd	r22, Y+7	; 0x07
    13d4:	78 85       	ldd	r23, Y+8	; 0x08
    13d6:	89 85       	ldd	r24, Y+9	; 0x09
    13d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13de:	dc 01       	movw	r26, r24
    13e0:	cb 01       	movw	r24, r22
    13e2:	9e 83       	std	Y+6, r25	; 0x06
    13e4:	8d 83       	std	Y+5, r24	; 0x05
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	9a 83       	std	Y+2, r25	; 0x02
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	f1 f7       	brne	.-4      	; 0x13f2 <main+0x1a8>
    13f6:	9a 83       	std	Y+2, r25	; 0x02
    13f8:	89 83       	std	Y+1, r24	; 0x01
    13fa:	34 cf       	rjmp	.-408    	; 0x1264 <main+0x1a>
			}
			_delay_ms(300); /* Delay after using the keypad */

		}
		else if(l_SystemStage == IN_DOOR)
    13fc:	89 89       	ldd	r24, Y+17	; 0x11
    13fe:	85 30       	cpi	r24, 0x05	; 5
    1400:	09 f0       	breq	.+2      	; 0x1404 <main+0x1ba>
    1402:	8f c0       	rjmp	.+286    	; 0x1522 <main+0x2d8>
		{
			a_PassCheckResult = 0;
    1404:	1f 86       	std	Y+15, r1	; 0x0f

			/* Requesting from the user to enter the password */
			LCD_clearScreen();
    1406:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_clearScreen>
			LCD_moveCursor(0, 0);
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_moveCursor>
			LCD_displayString("Enter the Pass :");
    1412:	80 e8       	ldi	r24, 0x80	; 128
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
			LCD_moveCursor(1, 0);
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	60 e0       	ldi	r22, 0x00	; 0
    141e:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_moveCursor>

			/* Ask for the password */
			GetPassword(SystemInfo.MainPassword);/* Saving the password */
    1422:	ce 01       	movw	r24, r28
    1424:	42 96       	adiw	r24, 0x12	; 18
    1426:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <GetPassword>

			/* Confirming it by sending it to CONTROL_ECU */
			/* Sync the stage first */
			while(UART_receiveByte() != CONTROL_READY);
    142a:	0e 94 3d 18 	call	0x307a	; 0x307a <UART_receiveByte>
    142e:	80 31       	cpi	r24, 0x10	; 16
    1430:	e1 f7       	brne	.-8      	; 0x142a <main+0x1e0>
			UART_sendByte('C');
    1432:	83 e4       	ldi	r24, 0x43	; 67
    1434:	0e 94 26 18 	call	0x304c	; 0x304c <UART_sendByte>

			/* Send the password */
			while(UART_receiveByte() != CONTROL_READY);
    1438:	0e 94 3d 18 	call	0x307a	; 0x307a <UART_receiveByte>
    143c:	80 31       	cpi	r24, 0x10	; 16
    143e:	e1 f7       	brne	.-8      	; 0x1438 <main+0x1ee>
			UART_sendString(SystemInfo.MainPassword);
    1440:	ce 01       	movw	r24, r28
    1442:	42 96       	adiw	r24, 0x12	; 18
    1444:	0e 94 4c 18 	call	0x3098	; 0x3098 <UART_sendString>

			/* Receiving feedback if password was correct or not */
			UART_sendByte(CONTROL_READY);
    1448:	80 e1       	ldi	r24, 0x10	; 16
    144a:	0e 94 26 18 	call	0x304c	; 0x304c <UART_sendByte>
			a_PassCheckResult = UART_receiveByte();
    144e:	0e 94 3d 18 	call	0x307a	; 0x307a <UART_receiveByte>
    1452:	8f 87       	std	Y+15, r24	; 0x0f



			if(a_PassCheckResult == 'F')
    1454:	8f 85       	ldd	r24, Y+15	; 0x0f
    1456:	86 34       	cpi	r24, 0x46	; 70
    1458:	49 f5       	brne	.+82     	; 0x14ac <main+0x262>
			{
				g_wrongPasswordCounter++;
    145a:	80 91 3e 01 	lds	r24, 0x013E
    145e:	8f 5f       	subi	r24, 0xFF	; 255
    1460:	80 93 3e 01 	sts	0x013E, r24
				if(g_wrongPasswordCounter < 3)
    1464:	80 91 3e 01 	lds	r24, 0x013E
    1468:	83 30       	cpi	r24, 0x03	; 3
    146a:	18 f4       	brcc	.+6      	; 0x1472 <main+0x228>
				{
					l_SystemStage = IN_DOOR;
    146c:	85 e0       	ldi	r24, 0x05	; 5
    146e:	89 8b       	std	Y+17, r24	; 0x11
    1470:	f9 ce       	rjmp	.-526    	; 0x1264 <main+0x1a>
				}
				else
				{
					/* Switching to shutdown mode */
					while(UART_receiveByte() != CONTROL_READY);
    1472:	0e 94 3d 18 	call	0x307a	; 0x307a <UART_receiveByte>
    1476:	80 31       	cpi	r24, 0x10	; 16
    1478:	e1 f7       	brne	.-8      	; 0x1472 <main+0x228>
					UART_sendByte('S');
    147a:	83 e5       	ldi	r24, 0x53	; 83
    147c:	0e 94 26 18 	call	0x304c	; 0x304c <UART_sendByte>

					LCD_clearScreen();
    1480:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_clearScreen>
					LCD_displayString(" Wrong Pass! ");
    1484:	81 e9       	ldi	r24, 0x91	; 145
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
					LCD_moveCursor(1, 0);
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_moveCursor>
					LCD_displayString("Alarm Activated!");
    1494:	8f e9       	ldi	r24, 0x9F	; 159
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
					/* Stop the system for 1 Minute*/
					App_timerDelay(60);
    149c:	8c e3       	ldi	r24, 0x3C	; 60
    149e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <App_timerDelay>

					/* Go back to option stage*/
					l_SystemStage = OPTION_STAGE;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	89 8b       	std	Y+17, r24	; 0x11

					/* Re-initiaizing again */
					g_wrongPasswordCounter = 0;
    14a6:	10 92 3e 01 	sts	0x013E, r1
    14aa:	dc ce       	rjmp	.-584    	; 0x1264 <main+0x1a>

				}
			}
			else if(a_PassCheckResult == 'T')
    14ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ae:	84 35       	cpi	r24, 0x54	; 84
    14b0:	a9 f5       	brne	.+106    	; 0x151c <main+0x2d2>
			{
				/* Open the door */

				/* Sending request to CONTROL_ECU to turn motor ON */
				while(UART_receiveByte() != CONTROL_READY);
    14b2:	0e 94 3d 18 	call	0x307a	; 0x307a <UART_receiveByte>
    14b6:	80 31       	cpi	r24, 0x10	; 16
    14b8:	e1 f7       	brne	.-8      	; 0x14b2 <main+0x268>
				UART_sendByte('I');
    14ba:	89 e4       	ldi	r24, 0x49	; 73
    14bc:	0e 94 26 18 	call	0x304c	; 0x304c <UART_sendByte>

				/* Displaying Unlocking the door while the motor opens the door for 15 sec */
				LCD_clearScreen();
    14c0:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_clearScreen>
				LCD_displayString("Unlocking the ");
    14c4:	80 eb       	ldi	r24, 0xB0	; 176
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
				LCD_moveCursor(1, 0);
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_moveCursor>
				LCD_displayString("  Door....");
    14d4:	8f eb       	ldi	r24, 0xBF	; 191
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>

				/* Delay 15 seconds using Timer1 */
				App_timerDelay(15);
    14dc:	8f e0       	ldi	r24, 0x0F	; 15
    14de:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <App_timerDelay>

				/* Hold for 3 seconds till the user pass from the door */
				LCD_clearScreen();
    14e2:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_clearScreen>
				LCD_displayString("Door Unlocked!");
    14e6:	8a ec       	ldi	r24, 0xCA	; 202
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>

				/* Delay for 3 seconds */
				App_timerDelay(3);
    14ee:	83 e0       	ldi	r24, 0x03	; 3
    14f0:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <App_timerDelay>

				/* Display Locking the door for 15 seconds */
				LCD_clearScreen();
    14f4:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_clearScreen>
				LCD_displayString("locking the ");
    14f8:	89 ed       	ldi	r24, 0xD9	; 217
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
				LCD_moveCursor(1, 0);
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_moveCursor>
				LCD_displayString("  Door....");
    1508:	8f eb       	ldi	r24, 0xBF	; 191
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>

				/* Delay 15 seconds using Timer1 */
				App_timerDelay(15);
    1510:	8f e0       	ldi	r24, 0x0F	; 15
    1512:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <App_timerDelay>

				/* Moving back to Menu stage */
				l_SystemStage = OPTION_STAGE;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	89 8b       	std	Y+17, r24	; 0x11
    151a:	a4 ce       	rjmp	.-696    	; 0x1264 <main+0x1a>

			}
			else
			{
				/* Stay in the same stage */
				l_SystemStage = IN_DOOR;
    151c:	85 e0       	ldi	r24, 0x05	; 5
    151e:	89 8b       	std	Y+17, r24	; 0x11
    1520:	a1 ce       	rjmp	.-702    	; 0x1264 <main+0x1a>
			}


		}
		else if(l_SystemStage == CHANGE_PASS_STEP)
    1522:	89 89       	ldd	r24, Y+17	; 0x11
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	09 f0       	breq	.+2      	; 0x152a <main+0x2e0>
    1528:	9d ce       	rjmp	.-710    	; 0x1264 <main+0x1a>
		{

			/* To change the password it's required to enter the old one */
			LCD_clearScreen();
    152a:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_clearScreen>
			LCD_displayString("Enter OLD PASS:");
    152e:	86 ee       	ldi	r24, 0xE6	; 230
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
			LCD_moveCursor(1, 0);
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_moveCursor>

			/* Get the old password from user */
			GetPassword(SystemInfo.MainPassword);
    153e:	ce 01       	movw	r24, r28
    1540:	42 96       	adiw	r24, 0x12	; 18
    1542:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <GetPassword>

			/* Request from CONTROL_ECU to check the password */

			/* Switching to confirmation stage */
			while(UART_receiveByte() != CONTROL_READY);
    1546:	0e 94 3d 18 	call	0x307a	; 0x307a <UART_receiveByte>
    154a:	80 31       	cpi	r24, 0x10	; 16
    154c:	e1 f7       	brne	.-8      	; 0x1546 <main+0x2fc>
			UART_sendByte('C');
    154e:	83 e4       	ldi	r24, 0x43	; 67
    1550:	0e 94 26 18 	call	0x304c	; 0x304c <UART_sendByte>

			/* Sending data */
			while(UART_receiveByte() != CONTROL_READY);
    1554:	0e 94 3d 18 	call	0x307a	; 0x307a <UART_receiveByte>
    1558:	80 31       	cpi	r24, 0x10	; 16
    155a:	e1 f7       	brne	.-8      	; 0x1554 <main+0x30a>
			UART_sendString(SystemInfo.MainPassword);
    155c:	ce 01       	movw	r24, r28
    155e:	42 96       	adiw	r24, 0x12	; 18
    1560:	0e 94 4c 18 	call	0x3098	; 0x3098 <UART_sendString>

			/* Receiving feedback if password was correct or not */
			UART_sendByte(CONTROL_READY);
    1564:	80 e1       	ldi	r24, 0x10	; 16
    1566:	0e 94 26 18 	call	0x304c	; 0x304c <UART_sendByte>
			a_PassCheckResult = UART_receiveByte();
    156a:	0e 94 3d 18 	call	0x307a	; 0x307a <UART_receiveByte>
    156e:	8f 87       	std	Y+15, r24	; 0x0f

			if(a_PassCheckResult == 'F')
    1570:	8f 85       	ldd	r24, Y+15	; 0x0f
    1572:	86 34       	cpi	r24, 0x46	; 70
    1574:	49 f5       	brne	.+82     	; 0x15c8 <main+0x37e>
			{
				g_wrongPasswordCounter++;
    1576:	80 91 3e 01 	lds	r24, 0x013E
    157a:	8f 5f       	subi	r24, 0xFF	; 255
    157c:	80 93 3e 01 	sts	0x013E, r24
				if(g_wrongPasswordCounter < 3)
    1580:	80 91 3e 01 	lds	r24, 0x013E
    1584:	83 30       	cpi	r24, 0x03	; 3
    1586:	18 f4       	brcc	.+6      	; 0x158e <main+0x344>
				{
					l_SystemStage = CHANGE_PASS_STEP;
    1588:	83 e0       	ldi	r24, 0x03	; 3
    158a:	89 8b       	std	Y+17, r24	; 0x11
    158c:	6b ce       	rjmp	.-810    	; 0x1264 <main+0x1a>
				}
				else
				{
					/* Switching to shutdown mode */
					while(UART_receiveByte() != CONTROL_READY);
    158e:	0e 94 3d 18 	call	0x307a	; 0x307a <UART_receiveByte>
    1592:	80 31       	cpi	r24, 0x10	; 16
    1594:	e1 f7       	brne	.-8      	; 0x158e <main+0x344>
					UART_sendByte('S');
    1596:	83 e5       	ldi	r24, 0x53	; 83
    1598:	0e 94 26 18 	call	0x304c	; 0x304c <UART_sendByte>

					LCD_clearScreen();
    159c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_clearScreen>
					LCD_displayString(" Wrong Pass! ");
    15a0:	81 e9       	ldi	r24, 0x91	; 145
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
					LCD_moveCursor(1, 0);
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_moveCursor>
					LCD_displayString("Alarm Activated!");
    15b0:	8f e9       	ldi	r24, 0x9F	; 159
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
					/* Stop the system for 1 Minute*/
					App_timerDelay(60);
    15b8:	8c e3       	ldi	r24, 0x3C	; 60
    15ba:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <App_timerDelay>

					/* Go back to option stage*/
					l_SystemStage = OPTION_STAGE;
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	89 8b       	std	Y+17, r24	; 0x11

					/* Re-initiaizing again */
					g_wrongPasswordCounter = 0;
    15c2:	10 92 3e 01 	sts	0x013E, r1
    15c6:	4e ce       	rjmp	.-868    	; 0x1264 <main+0x1a>

				}
			}
			else if(a_PassCheckResult == 'T')
    15c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ca:	84 35       	cpi	r24, 0x54	; 84
    15cc:	11 f4       	brne	.+4      	; 0x15d2 <main+0x388>
			{
				/* If true then move to the first stage and change the password */
				l_SystemStage = NEW_PASS;
    15ce:	19 8a       	std	Y+17, r1	; 0x11
    15d0:	49 ce       	rjmp	.-878    	; 0x1264 <main+0x1a>
			}
			else
			{
				l_SystemStage = CHANGE_PASS_STEP;
    15d2:	83 e0       	ldi	r24, 0x03	; 3
    15d4:	89 8b       	std	Y+17, r24	; 0x11
    15d6:	46 ce       	rjmp	.-884    	; 0x1264 <main+0x1a>

000015d8 <App_timer1>:
 * Description:
 * This will be the function which will be called back by the Timer
 */

void App_timer1()
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
	g_TimerCounter++;   /* increment the global counter flag with every interrupt */
    15e0:	80 91 3f 01 	lds	r24, 0x013F
    15e4:	8f 5f       	subi	r24, 0xFF	; 255
    15e6:	80 93 3f 01 	sts	0x013F, r24
}   /* End App_timer1()function */
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <App_timerDelay>:
/*
 * Description:
 * Used to Control the time delay which depends on Timer1 ISR
 */
void App_timerDelay(uint8 delay)
{
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	0f 92       	push	r0
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	89 83       	std	Y+1, r24	; 0x01
	if(3 == delay)
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	83 30       	cpi	r24, 0x03	; 3
    1600:	69 f4       	brne	.+26     	; 0x161c <App_timerDelay+0x2c>
	{

		Timer1_Init(&TIMER1_Config);   /* initialize the timer module with the desired configuration */
    1602:	8d e1       	ldi	r24, 0x1D	; 29
    1604:	91 e0       	ldi	r25, 0x01	; 1
    1606:	0e 94 80 13 	call	0x2700	; 0x2700 <Timer1_Init>
		while(g_TimerCounter != 1);         /* wait until the global counter became 2 to make 2 seconds delay */
    160a:	80 91 3f 01 	lds	r24, 0x013F
    160e:	81 30       	cpi	r24, 0x01	; 1
    1610:	e1 f7       	brne	.-8      	; 0x160a <App_timerDelay+0x1a>
		g_TimerCounter = 0;                 /* Reset the global counter */
    1612:	10 92 3f 01 	sts	0x013F, r1
		Timer1_deInit();	/* Stop the timer */
    1616:	0e 94 af 14 	call	0x295e	; 0x295e <Timer1_deInit>
    161a:	1f c0       	rjmp	.+62     	; 0x165a <App_timerDelay+0x6a>
	}   /* End if(2==delay) */
	else if(15 == delay)
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	8f 30       	cpi	r24, 0x0F	; 15
    1620:	69 f4       	brne	.+26     	; 0x163c <App_timerDelay+0x4c>
	{

		Timer1_Init(&TIMER1_Config);
    1622:	8d e1       	ldi	r24, 0x1D	; 29
    1624:	91 e0       	ldi	r25, 0x01	; 1
    1626:	0e 94 80 13 	call	0x2700	; 0x2700 <Timer1_Init>
		while(g_TimerCounter != 5);   /* wait until the global counter became 15 to make 15 seconds delay */
    162a:	80 91 3f 01 	lds	r24, 0x013F
    162e:	85 30       	cpi	r24, 0x05	; 5
    1630:	e1 f7       	brne	.-8      	; 0x162a <App_timerDelay+0x3a>
		g_TimerCounter = 0;
    1632:	10 92 3f 01 	sts	0x013F, r1
		Timer1_deInit();
    1636:	0e 94 af 14 	call	0x295e	; 0x295e <Timer1_deInit>
    163a:	0f c0       	rjmp	.+30     	; 0x165a <App_timerDelay+0x6a>
	}   /* End else if(15==delay) */
	else if(60 == delay)
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	8c 33       	cpi	r24, 0x3C	; 60
    1640:	61 f4       	brne	.+24     	; 0x165a <App_timerDelay+0x6a>
	{
		Timer1_Init(&TIMER1_Config);
    1642:	8d e1       	ldi	r24, 0x1D	; 29
    1644:	91 e0       	ldi	r25, 0x01	; 1
    1646:	0e 94 80 13 	call	0x2700	; 0x2700 <Timer1_Init>
		while(g_TimerCounter != 20);   /* wait until the global counter became 60 to make 1 minute delay */
    164a:	80 91 3f 01 	lds	r24, 0x013F
    164e:	84 31       	cpi	r24, 0x14	; 20
    1650:	e1 f7       	brne	.-8      	; 0x164a <App_timerDelay+0x5a>
		g_TimerCounter = 0;
    1652:	10 92 3f 01 	sts	0x013F, r1
		Timer1_deInit();
    1656:	0e 94 af 14 	call	0x295e	; 0x295e <Timer1_deInit>
	}   /* End else if(60==delay) */
}
    165a:	0f 90       	pop	r0
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <NewPassword>:
 * Description:
 * Setting up a new password
 * Receives System_Info structure address to save the passwords inside it
 */
void NewPassword(System_Info *a_PasswordConfirmation) /* Getting a new password which has two-verification method */
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	00 d0       	rcall	.+0      	; 0x1668 <NewPassword+0x6>
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	9a 83       	std	Y+2, r25	; 0x02
    166e:	89 83       	std	Y+1, r24	; 0x01

	/* Displaying the first messages on the screen */
	LCD_clearScreen();
    1670:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	60 e0       	ldi	r22, 0x00	; 0
    1678:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_moveCursor>
	LCD_displayString("Enter New Pass:");
    167c:	86 ef       	ldi	r24, 0xF6	; 246
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_moveCursor>

	/* Getting the first password */
	GetPassword(a_PasswordConfirmation->MainPassword);
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	9a 81       	ldd	r25, Y+2	; 0x02
    1690:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <GetPassword>

	/* Clearing the screen and then requesting to enter the password again */
	LCD_clearScreen();
    1694:	0e 94 59 11 	call	0x22b2	; 0x22b2 <LCD_clearScreen>
	LCD_moveCursor(0, 0);
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_moveCursor>
	LCD_displayString("Re-Enter pass:");
    16a0:	86 e0       	ldi	r24, 0x06	; 6
    16a2:	91 e0       	ldi	r25, 0x01	; 1
    16a4:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
	LCD_moveCursor(1, 0);
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_moveCursor>


	/* Getting the password again */
	GetPassword(a_PasswordConfirmation->ConfirmingPassword);
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	9a 81       	ldd	r25, Y+2	; 0x02
    16b4:	07 96       	adiw	r24, 0x07	; 7
    16b6:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <GetPassword>

}
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <GetPassword>:
/*
 * Description:
 * Used to get the password from the user through Keypad
 */
void GetPassword(uint8 *a_Password) /* Get the password from the user */
{
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	61 97       	sbiw	r28, 0x11	; 17
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	99 8b       	std	Y+17, r25	; 0x11
    16de:	88 8b       	std	Y+16, r24	; 0x10
	/**-----------------------Local Variables----------------------**/
	uint8 CharCounter = 0;
    16e0:	1f 86       	std	Y+15, r1	; 0x0f
	while(1)
	{
		/* Getting the value from keypad */
		a_Password[CharCounter] = Keypad_getPressedKey();
    16e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	88 89       	ldd	r24, Y+16	; 0x10
    16ea:	99 89       	ldd	r25, Y+17	; 0x11
    16ec:	8c 01       	movw	r16, r24
    16ee:	02 0f       	add	r16, r18
    16f0:	13 1f       	adc	r17, r19
    16f2:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <Keypad_getPressedKey>
    16f6:	f8 01       	movw	r30, r16
    16f8:	80 83       	st	Z, r24

		if(CharCounter > 4)
    16fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    16fc:	85 30       	cpi	r24, 0x05	; 5
    16fe:	d8 f0       	brcs	.+54     	; 0x1736 <GetPassword+0x72>
		{
			/* If entered means the user has entered 5 numbers */
			if(a_Password[CharCounter] == '=')
    1700:	8f 85       	ldd	r24, Y+15	; 0x0f
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	88 89       	ldd	r24, Y+16	; 0x10
    1708:	99 89       	ldd	r25, Y+17	; 0x11
    170a:	fc 01       	movw	r30, r24
    170c:	e2 0f       	add	r30, r18
    170e:	f3 1f       	adc	r31, r19
    1710:	80 81       	ld	r24, Z
    1712:	8d 33       	cpi	r24, 0x3D	; 61
    1714:	81 f4       	brne	.+32     	; 0x1736 <GetPassword+0x72>
			{
				a_Password[6] = '\0';
    1716:	88 89       	ldd	r24, Y+16	; 0x10
    1718:	99 89       	ldd	r25, Y+17	; 0x11
    171a:	fc 01       	movw	r30, r24
    171c:	36 96       	adiw	r30, 0x06	; 6
    171e:	10 82       	st	Z, r1

		}

		_delay_ms(500); /* Evading from repeated inputs */
	}
}
    1720:	61 96       	adiw	r28, 0x11	; 17
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	08 95       	ret
				/* Do nothing */
			}

		}

		if(a_Password[CharCounter] >= 0 && a_Password[CharCounter] <= 9)
    1736:	8f 85       	ldd	r24, Y+15	; 0x0f
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	88 89       	ldd	r24, Y+16	; 0x10
    173e:	99 89       	ldd	r25, Y+17	; 0x11
    1740:	fc 01       	movw	r30, r24
    1742:	e2 0f       	add	r30, r18
    1744:	f3 1f       	adc	r31, r19
    1746:	80 81       	ld	r24, Z
    1748:	8a 30       	cpi	r24, 0x0A	; 10
    174a:	48 f4       	brcc	.+18     	; 0x175e <GetPassword+0x9a>
		{
			if(CharCounter > 4)
    174c:	8f 85       	ldd	r24, Y+15	; 0x0f
    174e:	85 30       	cpi	r24, 0x05	; 5
    1750:	30 f4       	brcc	.+12     	; 0x175e <GetPassword+0x9a>
			}
			else
			{
				/* LCD_intgerToString(a_Password[CharCounter]); */
				/* Displaying Password as stars * */
				LCD_displayCharacter('*');
    1752:	8a e2       	ldi	r24, 0x2A	; 42
    1754:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <LCD_displayCharacter>
				CharCounter++;
    1758:	8f 85       	ldd	r24, Y+15	; 0x0f
    175a:	8f 5f       	subi	r24, 0xFF	; 255
    175c:	8f 87       	std	Y+15, r24	; 0x0f
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	aa ef       	ldi	r26, 0xFA	; 250
    1764:	b3 e4       	ldi	r27, 0x43	; 67
    1766:	8b 87       	std	Y+11, r24	; 0x0b
    1768:	9c 87       	std	Y+12, r25	; 0x0c
    176a:	ad 87       	std	Y+13, r26	; 0x0d
    176c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1770:	7c 85       	ldd	r23, Y+12	; 0x0c
    1772:	8d 85       	ldd	r24, Y+13	; 0x0d
    1774:	9e 85       	ldd	r25, Y+14	; 0x0e
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	4a ef       	ldi	r20, 0xFA	; 250
    177c:	54 e4       	ldi	r21, 0x44	; 68
    177e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	8f 83       	std	Y+7, r24	; 0x07
    1788:	98 87       	std	Y+8, r25	; 0x08
    178a:	a9 87       	std	Y+9, r26	; 0x09
    178c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    178e:	6f 81       	ldd	r22, Y+7	; 0x07
    1790:	78 85       	ldd	r23, Y+8	; 0x08
    1792:	89 85       	ldd	r24, Y+9	; 0x09
    1794:	9a 85       	ldd	r25, Y+10	; 0x0a
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e8       	ldi	r20, 0x80	; 128
    179c:	5f e3       	ldi	r21, 0x3F	; 63
    179e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a2:	88 23       	and	r24, r24
    17a4:	2c f4       	brge	.+10     	; 0x17b0 <GetPassword+0xec>
		__ticks = 1;
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	9e 83       	std	Y+6, r25	; 0x06
    17ac:	8d 83       	std	Y+5, r24	; 0x05
    17ae:	3f c0       	rjmp	.+126    	; 0x182e <GetPassword+0x16a>
	else if (__tmp > 65535)
    17b0:	6f 81       	ldd	r22, Y+7	; 0x07
    17b2:	78 85       	ldd	r23, Y+8	; 0x08
    17b4:	89 85       	ldd	r24, Y+9	; 0x09
    17b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	3f ef       	ldi	r19, 0xFF	; 255
    17bc:	4f e7       	ldi	r20, 0x7F	; 127
    17be:	57 e4       	ldi	r21, 0x47	; 71
    17c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c4:	18 16       	cp	r1, r24
    17c6:	4c f5       	brge	.+82     	; 0x181a <GetPassword+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    17cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e2       	ldi	r20, 0x20	; 32
    17d6:	51 e4       	ldi	r21, 0x41	; 65
    17d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	bc 01       	movw	r22, r24
    17e2:	cd 01       	movw	r24, r26
    17e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	9e 83       	std	Y+6, r25	; 0x06
    17ee:	8d 83       	std	Y+5, r24	; 0x05
    17f0:	0f c0       	rjmp	.+30     	; 0x1810 <GetPassword+0x14c>
    17f2:	88 ec       	ldi	r24, 0xC8	; 200
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	9c 83       	std	Y+4, r25	; 0x04
    17f8:	8b 83       	std	Y+3, r24	; 0x03
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	9c 81       	ldd	r25, Y+4	; 0x04
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	f1 f7       	brne	.-4      	; 0x17fe <GetPassword+0x13a>
    1802:	9c 83       	std	Y+4, r25	; 0x04
    1804:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1806:	8d 81       	ldd	r24, Y+5	; 0x05
    1808:	9e 81       	ldd	r25, Y+6	; 0x06
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	9e 83       	std	Y+6, r25	; 0x06
    180e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1810:	8d 81       	ldd	r24, Y+5	; 0x05
    1812:	9e 81       	ldd	r25, Y+6	; 0x06
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	69 f7       	brne	.-38     	; 0x17f2 <GetPassword+0x12e>
    1818:	64 cf       	rjmp	.-312    	; 0x16e2 <GetPassword+0x1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181a:	6f 81       	ldd	r22, Y+7	; 0x07
    181c:	78 85       	ldd	r23, Y+8	; 0x08
    181e:	89 85       	ldd	r24, Y+9	; 0x09
    1820:	9a 85       	ldd	r25, Y+10	; 0x0a
    1822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	9e 83       	std	Y+6, r25	; 0x06
    182c:	8d 83       	std	Y+5, r24	; 0x05
    182e:	8d 81       	ldd	r24, Y+5	; 0x05
    1830:	9e 81       	ldd	r25, Y+6	; 0x06
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	f1 f7       	brne	.-4      	; 0x183a <GetPassword+0x176>
    183e:	9a 83       	std	Y+2, r25	; 0x02
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	4f cf       	rjmp	.-354    	; 0x16e2 <GetPassword+0x1e>

00001844 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	2e 97       	sbiw	r28, 0x0e	; 14
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT, LCD_RS_PIN , PIN_OUTPUT);
    1858:	82 e0       	ldi	r24, 0x02	; 2
    185a:	66 e0       	ldi	r22, 0x06	; 6
    185c:	41 e0       	ldi	r20, 0x01	; 1
    185e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_EN_PORT, LCD_EN_PIN , PIN_OUTPUT);
    1862:	82 e0       	ldi	r24, 0x02	; 2
    1864:	67 e0       	ldi	r22, 0x07	; 7
    1866:	41 e0       	ldi	r20, 0x01	; 1
    1868:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	a0 ea       	ldi	r26, 0xA0	; 160
    1872:	b1 e4       	ldi	r27, 0x41	; 65
    1874:	8b 87       	std	Y+11, r24	; 0x0b
    1876:	9c 87       	std	Y+12, r25	; 0x0c
    1878:	ad 87       	std	Y+13, r26	; 0x0d
    187a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    187c:	6b 85       	ldd	r22, Y+11	; 0x0b
    187e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1880:	8d 85       	ldd	r24, Y+13	; 0x0d
    1882:	9e 85       	ldd	r25, Y+14	; 0x0e
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	4a ef       	ldi	r20, 0xFA	; 250
    188a:	54 e4       	ldi	r21, 0x44	; 68
    188c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	8f 83       	std	Y+7, r24	; 0x07
    1896:	98 87       	std	Y+8, r25	; 0x08
    1898:	a9 87       	std	Y+9, r26	; 0x09
    189a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    189c:	6f 81       	ldd	r22, Y+7	; 0x07
    189e:	78 85       	ldd	r23, Y+8	; 0x08
    18a0:	89 85       	ldd	r24, Y+9	; 0x09
    18a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e8       	ldi	r20, 0x80	; 128
    18aa:	5f e3       	ldi	r21, 0x3F	; 63
    18ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b0:	88 23       	and	r24, r24
    18b2:	2c f4       	brge	.+10     	; 0x18be <LCD_init+0x7a>
		__ticks = 1;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	9e 83       	std	Y+6, r25	; 0x06
    18ba:	8d 83       	std	Y+5, r24	; 0x05
    18bc:	3f c0       	rjmp	.+126    	; 0x193c <LCD_init+0xf8>
	else if (__tmp > 65535)
    18be:	6f 81       	ldd	r22, Y+7	; 0x07
    18c0:	78 85       	ldd	r23, Y+8	; 0x08
    18c2:	89 85       	ldd	r24, Y+9	; 0x09
    18c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	3f ef       	ldi	r19, 0xFF	; 255
    18ca:	4f e7       	ldi	r20, 0x7F	; 127
    18cc:	57 e4       	ldi	r21, 0x47	; 71
    18ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18d2:	18 16       	cp	r1, r24
    18d4:	4c f5       	brge	.+82     	; 0x1928 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18da:	8d 85       	ldd	r24, Y+13	; 0x0d
    18dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e2       	ldi	r20, 0x20	; 32
    18e4:	51 e4       	ldi	r21, 0x41	; 65
    18e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	bc 01       	movw	r22, r24
    18f0:	cd 01       	movw	r24, r26
    18f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	9e 83       	std	Y+6, r25	; 0x06
    18fc:	8d 83       	std	Y+5, r24	; 0x05
    18fe:	0f c0       	rjmp	.+30     	; 0x191e <LCD_init+0xda>
    1900:	88 ec       	ldi	r24, 0xC8	; 200
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	9c 83       	std	Y+4, r25	; 0x04
    1906:	8b 83       	std	Y+3, r24	; 0x03
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	9c 81       	ldd	r25, Y+4	; 0x04
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	f1 f7       	brne	.-4      	; 0x190c <LCD_init+0xc8>
    1910:	9c 83       	std	Y+4, r25	; 0x04
    1912:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1914:	8d 81       	ldd	r24, Y+5	; 0x05
    1916:	9e 81       	ldd	r25, Y+6	; 0x06
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	9e 83       	std	Y+6, r25	; 0x06
    191c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191e:	8d 81       	ldd	r24, Y+5	; 0x05
    1920:	9e 81       	ldd	r25, Y+6	; 0x06
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	69 f7       	brne	.-38     	; 0x1900 <LCD_init+0xbc>
    1926:	14 c0       	rjmp	.+40     	; 0x1950 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1928:	6f 81       	ldd	r22, Y+7	; 0x07
    192a:	78 85       	ldd	r23, Y+8	; 0x08
    192c:	89 85       	ldd	r24, Y+9	; 0x09
    192e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	9e 83       	std	Y+6, r25	; 0x06
    193a:	8d 83       	std	Y+5, r24	; 0x05
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	9e 81       	ldd	r25, Y+6	; 0x06
    1940:	9a 83       	std	Y+2, r25	; 0x02
    1942:	89 83       	std	Y+1, r24	; 0x01
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	9a 81       	ldd	r25, Y+2	; 0x02
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <LCD_init+0x104>
    194c:	9a 83       	std	Y+2, r25	; 0x02
    194e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

	/* Configure the data port as output port */
#if(LCD_DATA_MODE == 8) /* Using 8 bit mode */
	{
		GPIO_setupPortDirection(LCD_OUTPUT_PORT, PORT_OUTPUT);
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	6f ef       	ldi	r22, 0xFF	; 255
    1954:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>
		LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1958:	88 e3       	ldi	r24, 0x38	; 56
    195a:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_sendCommand>
		LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
	}

#endif

	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF ); /* cursor off */
    195e:	8c e0       	ldi	r24, 0x0C	; 12
    1960:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLR_DISPLAY); 		 /* clear LCD at the beginning */
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_sendCommand>
}
    196a:	2e 96       	adiw	r28, 0x0e	; 14
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	e9 97       	sbiw	r28, 0x39	; 57
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW); 	/* Setting to Command Register selection */
    1992:	82 e0       	ldi	r24, 0x02	; 2
    1994:	66 e0       	ldi	r22, 0x06	; 6
    1996:	40 e0       	ldi	r20, 0x00	; 0
    1998:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	a0 e8       	ldi	r26, 0x80	; 128
    19a2:	bf e3       	ldi	r27, 0x3F	; 63
    19a4:	8d ab       	std	Y+53, r24	; 0x35
    19a6:	9e ab       	std	Y+54, r25	; 0x36
    19a8:	af ab       	std	Y+55, r26	; 0x37
    19aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ac:	6d a9       	ldd	r22, Y+53	; 0x35
    19ae:	7e a9       	ldd	r23, Y+54	; 0x36
    19b0:	8f a9       	ldd	r24, Y+55	; 0x37
    19b2:	98 ad       	ldd	r25, Y+56	; 0x38
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	4a ef       	ldi	r20, 0xFA	; 250
    19ba:	54 e4       	ldi	r21, 0x44	; 68
    19bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	89 ab       	std	Y+49, r24	; 0x31
    19c6:	9a ab       	std	Y+50, r25	; 0x32
    19c8:	ab ab       	std	Y+51, r26	; 0x33
    19ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19cc:	69 a9       	ldd	r22, Y+49	; 0x31
    19ce:	7a a9       	ldd	r23, Y+50	; 0x32
    19d0:	8b a9       	ldd	r24, Y+51	; 0x33
    19d2:	9c a9       	ldd	r25, Y+52	; 0x34
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e8       	ldi	r20, 0x80	; 128
    19da:	5f e3       	ldi	r21, 0x3F	; 63
    19dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e0:	88 23       	and	r24, r24
    19e2:	2c f4       	brge	.+10     	; 0x19ee <LCD_sendCommand+0x72>
		__ticks = 1;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	98 ab       	std	Y+48, r25	; 0x30
    19ea:	8f a7       	std	Y+47, r24	; 0x2f
    19ec:	3f c0       	rjmp	.+126    	; 0x1a6c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    19ee:	69 a9       	ldd	r22, Y+49	; 0x31
    19f0:	7a a9       	ldd	r23, Y+50	; 0x32
    19f2:	8b a9       	ldd	r24, Y+51	; 0x33
    19f4:	9c a9       	ldd	r25, Y+52	; 0x34
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	3f ef       	ldi	r19, 0xFF	; 255
    19fa:	4f e7       	ldi	r20, 0x7F	; 127
    19fc:	57 e4       	ldi	r21, 0x47	; 71
    19fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a02:	18 16       	cp	r1, r24
    1a04:	4c f5       	brge	.+82     	; 0x1a58 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a06:	6d a9       	ldd	r22, Y+53	; 0x35
    1a08:	7e a9       	ldd	r23, Y+54	; 0x36
    1a0a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a0c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e2       	ldi	r20, 0x20	; 32
    1a14:	51 e4       	ldi	r21, 0x41	; 65
    1a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	98 ab       	std	Y+48, r25	; 0x30
    1a2c:	8f a7       	std	Y+47, r24	; 0x2f
    1a2e:	0f c0       	rjmp	.+30     	; 0x1a4e <LCD_sendCommand+0xd2>
    1a30:	88 ec       	ldi	r24, 0xC8	; 200
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9e a7       	std	Y+46, r25	; 0x2e
    1a36:	8d a7       	std	Y+45, r24	; 0x2d
    1a38:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a3a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	f1 f7       	brne	.-4      	; 0x1a3c <LCD_sendCommand+0xc0>
    1a40:	9e a7       	std	Y+46, r25	; 0x2e
    1a42:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a44:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a46:	98 a9       	ldd	r25, Y+48	; 0x30
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	98 ab       	std	Y+48, r25	; 0x30
    1a4c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a50:	98 a9       	ldd	r25, Y+48	; 0x30
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	69 f7       	brne	.-38     	; 0x1a30 <LCD_sendCommand+0xb4>
    1a56:	14 c0       	rjmp	.+40     	; 0x1a80 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a58:	69 a9       	ldd	r22, Y+49	; 0x31
    1a5a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	98 ab       	std	Y+48, r25	; 0x30
    1a6a:	8f a7       	std	Y+47, r24	; 0x2f
    1a6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a70:	9c a7       	std	Y+44, r25	; 0x2c
    1a72:	8b a7       	std	Y+43, r24	; 0x2b
    1a74:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a76:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <LCD_sendCommand+0xfc>
    1a7c:	9c a7       	std	Y+44, r25	; 0x2c
    1a7e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH); /* Enable LCD */
    1a80:	82 e0       	ldi	r24, 0x02	; 2
    1a82:	67 e0       	ldi	r22, 0x07	; 7
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	a0 e8       	ldi	r26, 0x80	; 128
    1a90:	bf e3       	ldi	r27, 0x3F	; 63
    1a92:	8f a3       	std	Y+39, r24	; 0x27
    1a94:	98 a7       	std	Y+40, r25	; 0x28
    1a96:	a9 a7       	std	Y+41, r26	; 0x29
    1a98:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1aa0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	4a ef       	ldi	r20, 0xFA	; 250
    1aa8:	54 e4       	ldi	r21, 0x44	; 68
    1aaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	8b a3       	std	Y+35, r24	; 0x23
    1ab4:	9c a3       	std	Y+36, r25	; 0x24
    1ab6:	ad a3       	std	Y+37, r26	; 0x25
    1ab8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1aba:	6b a1       	ldd	r22, Y+35	; 0x23
    1abc:	7c a1       	ldd	r23, Y+36	; 0x24
    1abe:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e8       	ldi	r20, 0x80	; 128
    1ac8:	5f e3       	ldi	r21, 0x3F	; 63
    1aca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ace:	88 23       	and	r24, r24
    1ad0:	2c f4       	brge	.+10     	; 0x1adc <LCD_sendCommand+0x160>
		__ticks = 1;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	9a a3       	std	Y+34, r25	; 0x22
    1ad8:	89 a3       	std	Y+33, r24	; 0x21
    1ada:	3f c0       	rjmp	.+126    	; 0x1b5a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1adc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ade:	7c a1       	ldd	r23, Y+36	; 0x24
    1ae0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	3f ef       	ldi	r19, 0xFF	; 255
    1ae8:	4f e7       	ldi	r20, 0x7F	; 127
    1aea:	57 e4       	ldi	r21, 0x47	; 71
    1aec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af0:	18 16       	cp	r1, r24
    1af2:	4c f5       	brge	.+82     	; 0x1b46 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af4:	6f a1       	ldd	r22, Y+39	; 0x27
    1af6:	78 a5       	ldd	r23, Y+40	; 0x28
    1af8:	89 a5       	ldd	r24, Y+41	; 0x29
    1afa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	40 e2       	ldi	r20, 0x20	; 32
    1b02:	51 e4       	ldi	r21, 0x41	; 65
    1b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9a a3       	std	Y+34, r25	; 0x22
    1b1a:	89 a3       	std	Y+33, r24	; 0x21
    1b1c:	0f c0       	rjmp	.+30     	; 0x1b3c <LCD_sendCommand+0x1c0>
    1b1e:	88 ec       	ldi	r24, 0xC8	; 200
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	98 a3       	std	Y+32, r25	; 0x20
    1b24:	8f 8f       	std	Y+31, r24	; 0x1f
    1b26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b28:	98 a1       	ldd	r25, Y+32	; 0x20
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_sendCommand+0x1ae>
    1b2e:	98 a3       	std	Y+32, r25	; 0x20
    1b30:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b32:	89 a1       	ldd	r24, Y+33	; 0x21
    1b34:	9a a1       	ldd	r25, Y+34	; 0x22
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	9a a3       	std	Y+34, r25	; 0x22
    1b3a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	69 f7       	brne	.-38     	; 0x1b1e <LCD_sendCommand+0x1a2>
    1b44:	14 c0       	rjmp	.+40     	; 0x1b6e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b46:	6b a1       	ldd	r22, Y+35	; 0x23
    1b48:	7c a1       	ldd	r23, Y+36	; 0x24
    1b4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	9a a3       	std	Y+34, r25	; 0x22
    1b58:	89 a3       	std	Y+33, r24	; 0x21
    1b5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b5e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b60:	8d 8f       	std	Y+29, r24	; 0x1d
    1b62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <LCD_sendCommand+0x1ea>
    1b6a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b6c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(LCD_DATA_MODE == 8)
	{
		GPIO_writePort(LCD_OUTPUT_PORT, command); 			/* Sending the command through the 8 pins*/
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	69 ad       	ldd	r22, Y+57	; 0x39
    1b72:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	a0 e8       	ldi	r26, 0x80	; 128
    1b7c:	bf e3       	ldi	r27, 0x3F	; 63
    1b7e:	89 8f       	std	Y+25, r24	; 0x19
    1b80:	9a 8f       	std	Y+26, r25	; 0x1a
    1b82:	ab 8f       	std	Y+27, r26	; 0x1b
    1b84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b86:	69 8d       	ldd	r22, Y+25	; 0x19
    1b88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	4a ef       	ldi	r20, 0xFA	; 250
    1b94:	54 e4       	ldi	r21, 0x44	; 68
    1b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	8d 8b       	std	Y+21, r24	; 0x15
    1ba0:	9e 8b       	std	Y+22, r25	; 0x16
    1ba2:	af 8b       	std	Y+23, r26	; 0x17
    1ba4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ba6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba8:	7e 89       	ldd	r23, Y+22	; 0x16
    1baa:	8f 89       	ldd	r24, Y+23	; 0x17
    1bac:	98 8d       	ldd	r25, Y+24	; 0x18
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e8       	ldi	r20, 0x80	; 128
    1bb4:	5f e3       	ldi	r21, 0x3F	; 63
    1bb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bba:	88 23       	and	r24, r24
    1bbc:	2c f4       	brge	.+10     	; 0x1bc8 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	9c 8b       	std	Y+20, r25	; 0x14
    1bc4:	8b 8b       	std	Y+19, r24	; 0x13
    1bc6:	3f c0       	rjmp	.+126    	; 0x1c46 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1bc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bca:	7e 89       	ldd	r23, Y+22	; 0x16
    1bcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bce:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	3f ef       	ldi	r19, 0xFF	; 255
    1bd4:	4f e7       	ldi	r20, 0x7F	; 127
    1bd6:	57 e4       	ldi	r21, 0x47	; 71
    1bd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bdc:	18 16       	cp	r1, r24
    1bde:	4c f5       	brge	.+82     	; 0x1c32 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be0:	69 8d       	ldd	r22, Y+25	; 0x19
    1be2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1be4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1be6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	40 e2       	ldi	r20, 0x20	; 32
    1bee:	51 e4       	ldi	r21, 0x41	; 65
    1bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	bc 01       	movw	r22, r24
    1bfa:	cd 01       	movw	r24, r26
    1bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	9c 8b       	std	Y+20, r25	; 0x14
    1c06:	8b 8b       	std	Y+19, r24	; 0x13
    1c08:	0f c0       	rjmp	.+30     	; 0x1c28 <LCD_sendCommand+0x2ac>
    1c0a:	88 ec       	ldi	r24, 0xC8	; 200
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	9a 8b       	std	Y+18, r25	; 0x12
    1c10:	89 8b       	std	Y+17, r24	; 0x11
    1c12:	89 89       	ldd	r24, Y+17	; 0x11
    1c14:	9a 89       	ldd	r25, Y+18	; 0x12
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <LCD_sendCommand+0x29a>
    1c1a:	9a 8b       	std	Y+18, r25	; 0x12
    1c1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c20:	9c 89       	ldd	r25, Y+20	; 0x14
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	9c 8b       	std	Y+20, r25	; 0x14
    1c26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c28:	8b 89       	ldd	r24, Y+19	; 0x13
    1c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	69 f7       	brne	.-38     	; 0x1c0a <LCD_sendCommand+0x28e>
    1c30:	14 c0       	rjmp	.+40     	; 0x1c5a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c32:	6d 89       	ldd	r22, Y+21	; 0x15
    1c34:	7e 89       	ldd	r23, Y+22	; 0x16
    1c36:	8f 89       	ldd	r24, Y+23	; 0x17
    1c38:	98 8d       	ldd	r25, Y+24	; 0x18
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	9c 8b       	std	Y+20, r25	; 0x14
    1c44:	8b 8b       	std	Y+19, r24	; 0x13
    1c46:	8b 89       	ldd	r24, Y+19	; 0x13
    1c48:	9c 89       	ldd	r25, Y+20	; 0x14
    1c4a:	98 8b       	std	Y+16, r25	; 0x10
    1c4c:	8f 87       	std	Y+15, r24	; 0x0f
    1c4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c50:	98 89       	ldd	r25, Y+16	; 0x10
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <LCD_sendCommand+0x2d6>
    1c56:	98 8b       	std	Y+16, r25	; 0x10
    1c58:	8f 87       	std	Y+15, r24	; 0x0f
	}
#endif

	/* Shared Part must be added at the END */
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW); /* De-activating the LCD */
    1c5a:	82 e0       	ldi	r24, 0x02	; 2
    1c5c:	67 e0       	ldi	r22, 0x07	; 7
    1c5e:	40 e0       	ldi	r20, 0x00	; 0
    1c60:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	a0 e8       	ldi	r26, 0x80	; 128
    1c6a:	bf e3       	ldi	r27, 0x3F	; 63
    1c6c:	8b 87       	std	Y+11, r24	; 0x0b
    1c6e:	9c 87       	std	Y+12, r25	; 0x0c
    1c70:	ad 87       	std	Y+13, r26	; 0x0d
    1c72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	4a ef       	ldi	r20, 0xFA	; 250
    1c82:	54 e4       	ldi	r21, 0x44	; 68
    1c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	8f 83       	std	Y+7, r24	; 0x07
    1c8e:	98 87       	std	Y+8, r25	; 0x08
    1c90:	a9 87       	std	Y+9, r26	; 0x09
    1c92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c94:	6f 81       	ldd	r22, Y+7	; 0x07
    1c96:	78 85       	ldd	r23, Y+8	; 0x08
    1c98:	89 85       	ldd	r24, Y+9	; 0x09
    1c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e8       	ldi	r20, 0x80	; 128
    1ca2:	5f e3       	ldi	r21, 0x3F	; 63
    1ca4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ca8:	88 23       	and	r24, r24
    1caa:	2c f4       	brge	.+10     	; 0x1cb6 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9e 83       	std	Y+6, r25	; 0x06
    1cb2:	8d 83       	std	Y+5, r24	; 0x05
    1cb4:	3f c0       	rjmp	.+126    	; 0x1d34 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1cb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb8:	78 85       	ldd	r23, Y+8	; 0x08
    1cba:	89 85       	ldd	r24, Y+9	; 0x09
    1cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	3f ef       	ldi	r19, 0xFF	; 255
    1cc2:	4f e7       	ldi	r20, 0x7F	; 127
    1cc4:	57 e4       	ldi	r21, 0x47	; 71
    1cc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cca:	18 16       	cp	r1, r24
    1ccc:	4c f5       	brge	.+82     	; 0x1d20 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e2       	ldi	r20, 0x20	; 32
    1cdc:	51 e4       	ldi	r21, 0x41	; 65
    1cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9e 83       	std	Y+6, r25	; 0x06
    1cf4:	8d 83       	std	Y+5, r24	; 0x05
    1cf6:	0f c0       	rjmp	.+30     	; 0x1d16 <LCD_sendCommand+0x39a>
    1cf8:	88 ec       	ldi	r24, 0xC8	; 200
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	9c 83       	std	Y+4, r25	; 0x04
    1cfe:	8b 83       	std	Y+3, r24	; 0x03
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	9c 81       	ldd	r25, Y+4	; 0x04
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <LCD_sendCommand+0x388>
    1d08:	9c 83       	std	Y+4, r25	; 0x04
    1d0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	9e 83       	std	Y+6, r25	; 0x06
    1d14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	69 f7       	brne	.-38     	; 0x1cf8 <LCD_sendCommand+0x37c>
    1d1e:	14 c0       	rjmp	.+40     	; 0x1d48 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d20:	6f 81       	ldd	r22, Y+7	; 0x07
    1d22:	78 85       	ldd	r23, Y+8	; 0x08
    1d24:	89 85       	ldd	r24, Y+9	; 0x09
    1d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
    1d34:	8d 81       	ldd	r24, Y+5	; 0x05
    1d36:	9e 81       	ldd	r25, Y+6	; 0x06
    1d38:	9a 83       	std	Y+2, r25	; 0x02
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <LCD_sendCommand+0x3c4>
    1d44:	9a 83       	std	Y+2, r25	; 0x02
    1d46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1d48:	e9 96       	adiw	r28, 0x39	; 57
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	cf 91       	pop	r28
    1d56:	df 91       	pop	r29
    1d58:	08 95       	ret

00001d5a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1d5a:	df 93       	push	r29
    1d5c:	cf 93       	push	r28
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	e9 97       	sbiw	r28, 0x39	; 57
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	cd bf       	out	0x3d, r28	; 61
    1d6e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH); /* Activating the Data Register */
    1d70:	82 e0       	ldi	r24, 0x02	; 2
    1d72:	66 e0       	ldi	r22, 0x06	; 6
    1d74:	41 e0       	ldi	r20, 0x01	; 1
    1d76:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a0 e8       	ldi	r26, 0x80	; 128
    1d80:	bf e3       	ldi	r27, 0x3F	; 63
    1d82:	8d ab       	std	Y+53, r24	; 0x35
    1d84:	9e ab       	std	Y+54, r25	; 0x36
    1d86:	af ab       	std	Y+55, r26	; 0x37
    1d88:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d8a:	6d a9       	ldd	r22, Y+53	; 0x35
    1d8c:	7e a9       	ldd	r23, Y+54	; 0x36
    1d8e:	8f a9       	ldd	r24, Y+55	; 0x37
    1d90:	98 ad       	ldd	r25, Y+56	; 0x38
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	4a ef       	ldi	r20, 0xFA	; 250
    1d98:	54 e4       	ldi	r21, 0x44	; 68
    1d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	89 ab       	std	Y+49, r24	; 0x31
    1da4:	9a ab       	std	Y+50, r25	; 0x32
    1da6:	ab ab       	std	Y+51, r26	; 0x33
    1da8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1daa:	69 a9       	ldd	r22, Y+49	; 0x31
    1dac:	7a a9       	ldd	r23, Y+50	; 0x32
    1dae:	8b a9       	ldd	r24, Y+51	; 0x33
    1db0:	9c a9       	ldd	r25, Y+52	; 0x34
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	40 e8       	ldi	r20, 0x80	; 128
    1db8:	5f e3       	ldi	r21, 0x3F	; 63
    1dba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dbe:	88 23       	and	r24, r24
    1dc0:	2c f4       	brge	.+10     	; 0x1dcc <LCD_displayCharacter+0x72>
		__ticks = 1;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	98 ab       	std	Y+48, r25	; 0x30
    1dc8:	8f a7       	std	Y+47, r24	; 0x2f
    1dca:	3f c0       	rjmp	.+126    	; 0x1e4a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1dcc:	69 a9       	ldd	r22, Y+49	; 0x31
    1dce:	7a a9       	ldd	r23, Y+50	; 0x32
    1dd0:	8b a9       	ldd	r24, Y+51	; 0x33
    1dd2:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	3f ef       	ldi	r19, 0xFF	; 255
    1dd8:	4f e7       	ldi	r20, 0x7F	; 127
    1dda:	57 e4       	ldi	r21, 0x47	; 71
    1ddc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de0:	18 16       	cp	r1, r24
    1de2:	4c f5       	brge	.+82     	; 0x1e36 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de4:	6d a9       	ldd	r22, Y+53	; 0x35
    1de6:	7e a9       	ldd	r23, Y+54	; 0x36
    1de8:	8f a9       	ldd	r24, Y+55	; 0x37
    1dea:	98 ad       	ldd	r25, Y+56	; 0x38
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e2       	ldi	r20, 0x20	; 32
    1df2:	51 e4       	ldi	r21, 0x41	; 65
    1df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	cd 01       	movw	r24, r26
    1e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	98 ab       	std	Y+48, r25	; 0x30
    1e0a:	8f a7       	std	Y+47, r24	; 0x2f
    1e0c:	0f c0       	rjmp	.+30     	; 0x1e2c <LCD_displayCharacter+0xd2>
    1e0e:	88 ec       	ldi	r24, 0xC8	; 200
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	9e a7       	std	Y+46, r25	; 0x2e
    1e14:	8d a7       	std	Y+45, r24	; 0x2d
    1e16:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e18:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_displayCharacter+0xc0>
    1e1e:	9e a7       	std	Y+46, r25	; 0x2e
    1e20:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e24:	98 a9       	ldd	r25, Y+48	; 0x30
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	98 ab       	std	Y+48, r25	; 0x30
    1e2a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e2e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	69 f7       	brne	.-38     	; 0x1e0e <LCD_displayCharacter+0xb4>
    1e34:	14 c0       	rjmp	.+40     	; 0x1e5e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e36:	69 a9       	ldd	r22, Y+49	; 0x31
    1e38:	7a a9       	ldd	r23, Y+50	; 0x32
    1e3a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e3c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	98 ab       	std	Y+48, r25	; 0x30
    1e48:	8f a7       	std	Y+47, r24	; 0x2f
    1e4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4e:	9c a7       	std	Y+44, r25	; 0x2c
    1e50:	8b a7       	std	Y+43, r24	; 0x2b
    1e52:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e54:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	f1 f7       	brne	.-4      	; 0x1e56 <LCD_displayCharacter+0xfc>
    1e5a:	9c a7       	std	Y+44, r25	; 0x2c
    1e5c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH); /* Activating the LCD */
    1e5e:	82 e0       	ldi	r24, 0x02	; 2
    1e60:	67 e0       	ldi	r22, 0x07	; 7
    1e62:	41 e0       	ldi	r20, 0x01	; 1
    1e64:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 e8       	ldi	r26, 0x80	; 128
    1e6e:	bf e3       	ldi	r27, 0x3F	; 63
    1e70:	8f a3       	std	Y+39, r24	; 0x27
    1e72:	98 a7       	std	Y+40, r25	; 0x28
    1e74:	a9 a7       	std	Y+41, r26	; 0x29
    1e76:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e78:	6f a1       	ldd	r22, Y+39	; 0x27
    1e7a:	78 a5       	ldd	r23, Y+40	; 0x28
    1e7c:	89 a5       	ldd	r24, Y+41	; 0x29
    1e7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	4a ef       	ldi	r20, 0xFA	; 250
    1e86:	54 e4       	ldi	r21, 0x44	; 68
    1e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	8b a3       	std	Y+35, r24	; 0x23
    1e92:	9c a3       	std	Y+36, r25	; 0x24
    1e94:	ad a3       	std	Y+37, r26	; 0x25
    1e96:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e98:	6b a1       	ldd	r22, Y+35	; 0x23
    1e9a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e9c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e9e:	9e a1       	ldd	r25, Y+38	; 0x26
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	5f e3       	ldi	r21, 0x3F	; 63
    1ea8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	2c f4       	brge	.+10     	; 0x1eba <LCD_displayCharacter+0x160>
		__ticks = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	9a a3       	std	Y+34, r25	; 0x22
    1eb6:	89 a3       	std	Y+33, r24	; 0x21
    1eb8:	3f c0       	rjmp	.+126    	; 0x1f38 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1eba:	6b a1       	ldd	r22, Y+35	; 0x23
    1ebc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ebe:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	3f ef       	ldi	r19, 0xFF	; 255
    1ec6:	4f e7       	ldi	r20, 0x7F	; 127
    1ec8:	57 e4       	ldi	r21, 0x47	; 71
    1eca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	4c f5       	brge	.+82     	; 0x1f24 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ed4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ed6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ed8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e2       	ldi	r20, 0x20	; 32
    1ee0:	51 e4       	ldi	r21, 0x41	; 65
    1ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	9a a3       	std	Y+34, r25	; 0x22
    1ef8:	89 a3       	std	Y+33, r24	; 0x21
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <LCD_displayCharacter+0x1c0>
    1efc:	88 ec       	ldi	r24, 0xC8	; 200
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	98 a3       	std	Y+32, r25	; 0x20
    1f02:	8f 8f       	std	Y+31, r24	; 0x1f
    1f04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f06:	98 a1       	ldd	r25, Y+32	; 0x20
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <LCD_displayCharacter+0x1ae>
    1f0c:	98 a3       	std	Y+32, r25	; 0x20
    1f0e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	89 a1       	ldd	r24, Y+33	; 0x21
    1f12:	9a a1       	ldd	r25, Y+34	; 0x22
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	9a a3       	std	Y+34, r25	; 0x22
    1f18:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	69 f7       	brne	.-38     	; 0x1efc <LCD_displayCharacter+0x1a2>
    1f22:	14 c0       	rjmp	.+40     	; 0x1f4c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f24:	6b a1       	ldd	r22, Y+35	; 0x23
    1f26:	7c a1       	ldd	r23, Y+36	; 0x24
    1f28:	8d a1       	ldd	r24, Y+37	; 0x25
    1f2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9a a3       	std	Y+34, r25	; 0x22
    1f36:	89 a3       	std	Y+33, r24	; 0x21
    1f38:	89 a1       	ldd	r24, Y+33	; 0x21
    1f3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f3e:	8d 8f       	std	Y+29, r24	; 0x1d
    1f40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <LCD_displayCharacter+0x1ea>
    1f48:	9e 8f       	std	Y+30, r25	; 0x1e
    1f4a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);


#if(LCD_DATA_MODE == 8)
	{
		GPIO_writePort(LCD_OUTPUT_PORT, data); /* Sending the Data */
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	69 ad       	ldd	r22, Y+57	; 0x39
    1f50:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	a0 e8       	ldi	r26, 0x80	; 128
    1f5a:	bf e3       	ldi	r27, 0x3F	; 63
    1f5c:	89 8f       	std	Y+25, r24	; 0x19
    1f5e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f60:	ab 8f       	std	Y+27, r26	; 0x1b
    1f62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f64:	69 8d       	ldd	r22, Y+25	; 0x19
    1f66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	4a ef       	ldi	r20, 0xFA	; 250
    1f72:	54 e4       	ldi	r21, 0x44	; 68
    1f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	8d 8b       	std	Y+21, r24	; 0x15
    1f7e:	9e 8b       	std	Y+22, r25	; 0x16
    1f80:	af 8b       	std	Y+23, r26	; 0x17
    1f82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f84:	6d 89       	ldd	r22, Y+21	; 0x15
    1f86:	7e 89       	ldd	r23, Y+22	; 0x16
    1f88:	8f 89       	ldd	r24, Y+23	; 0x17
    1f8a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e8       	ldi	r20, 0x80	; 128
    1f92:	5f e3       	ldi	r21, 0x3F	; 63
    1f94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f98:	88 23       	and	r24, r24
    1f9a:	2c f4       	brge	.+10     	; 0x1fa6 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9c 8b       	std	Y+20, r25	; 0x14
    1fa2:	8b 8b       	std	Y+19, r24	; 0x13
    1fa4:	3f c0       	rjmp	.+126    	; 0x2024 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1fa6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa8:	7e 89       	ldd	r23, Y+22	; 0x16
    1faa:	8f 89       	ldd	r24, Y+23	; 0x17
    1fac:	98 8d       	ldd	r25, Y+24	; 0x18
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	3f ef       	ldi	r19, 0xFF	; 255
    1fb2:	4f e7       	ldi	r20, 0x7F	; 127
    1fb4:	57 e4       	ldi	r21, 0x47	; 71
    1fb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fba:	18 16       	cp	r1, r24
    1fbc:	4c f5       	brge	.+82     	; 0x2010 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbe:	69 8d       	ldd	r22, Y+25	; 0x19
    1fc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e2       	ldi	r20, 0x20	; 32
    1fcc:	51 e4       	ldi	r21, 0x41	; 65
    1fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	9c 8b       	std	Y+20, r25	; 0x14
    1fe4:	8b 8b       	std	Y+19, r24	; 0x13
    1fe6:	0f c0       	rjmp	.+30     	; 0x2006 <LCD_displayCharacter+0x2ac>
    1fe8:	88 ec       	ldi	r24, 0xC8	; 200
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9a 8b       	std	Y+18, r25	; 0x12
    1fee:	89 8b       	std	Y+17, r24	; 0x11
    1ff0:	89 89       	ldd	r24, Y+17	; 0x11
    1ff2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <LCD_displayCharacter+0x29a>
    1ff8:	9a 8b       	std	Y+18, r25	; 0x12
    1ffa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffe:	9c 89       	ldd	r25, Y+20	; 0x14
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	9c 8b       	std	Y+20, r25	; 0x14
    2004:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2006:	8b 89       	ldd	r24, Y+19	; 0x13
    2008:	9c 89       	ldd	r25, Y+20	; 0x14
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	69 f7       	brne	.-38     	; 0x1fe8 <LCD_displayCharacter+0x28e>
    200e:	14 c0       	rjmp	.+40     	; 0x2038 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2010:	6d 89       	ldd	r22, Y+21	; 0x15
    2012:	7e 89       	ldd	r23, Y+22	; 0x16
    2014:	8f 89       	ldd	r24, Y+23	; 0x17
    2016:	98 8d       	ldd	r25, Y+24	; 0x18
    2018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	9c 8b       	std	Y+20, r25	; 0x14
    2022:	8b 8b       	std	Y+19, r24	; 0x13
    2024:	8b 89       	ldd	r24, Y+19	; 0x13
    2026:	9c 89       	ldd	r25, Y+20	; 0x14
    2028:	98 8b       	std	Y+16, r25	; 0x10
    202a:	8f 87       	std	Y+15, r24	; 0x0f
    202c:	8f 85       	ldd	r24, Y+15	; 0x0f
    202e:	98 89       	ldd	r25, Y+16	; 0x10
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <LCD_displayCharacter+0x2d6>
    2034:	98 8b       	std	Y+16, r25	; 0x10
    2036:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D7_PIN , GET_BIT(data,3));
		_delay_ms(1);
	}
#endif

	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW); /* Activating the LCD */
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	67 e0       	ldi	r22, 0x07	; 7
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	a0 e8       	ldi	r26, 0x80	; 128
    2048:	bf e3       	ldi	r27, 0x3F	; 63
    204a:	8b 87       	std	Y+11, r24	; 0x0b
    204c:	9c 87       	std	Y+12, r25	; 0x0c
    204e:	ad 87       	std	Y+13, r26	; 0x0d
    2050:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2052:	6b 85       	ldd	r22, Y+11	; 0x0b
    2054:	7c 85       	ldd	r23, Y+12	; 0x0c
    2056:	8d 85       	ldd	r24, Y+13	; 0x0d
    2058:	9e 85       	ldd	r25, Y+14	; 0x0e
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	4a ef       	ldi	r20, 0xFA	; 250
    2060:	54 e4       	ldi	r21, 0x44	; 68
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	8f 83       	std	Y+7, r24	; 0x07
    206c:	98 87       	std	Y+8, r25	; 0x08
    206e:	a9 87       	std	Y+9, r26	; 0x09
    2070:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2072:	6f 81       	ldd	r22, Y+7	; 0x07
    2074:	78 85       	ldd	r23, Y+8	; 0x08
    2076:	89 85       	ldd	r24, Y+9	; 0x09
    2078:	9a 85       	ldd	r25, Y+10	; 0x0a
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e8       	ldi	r20, 0x80	; 128
    2080:	5f e3       	ldi	r21, 0x3F	; 63
    2082:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2086:	88 23       	and	r24, r24
    2088:	2c f4       	brge	.+10     	; 0x2094 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9e 83       	std	Y+6, r25	; 0x06
    2090:	8d 83       	std	Y+5, r24	; 0x05
    2092:	3f c0       	rjmp	.+126    	; 0x2112 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2094:	6f 81       	ldd	r22, Y+7	; 0x07
    2096:	78 85       	ldd	r23, Y+8	; 0x08
    2098:	89 85       	ldd	r24, Y+9	; 0x09
    209a:	9a 85       	ldd	r25, Y+10	; 0x0a
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	3f ef       	ldi	r19, 0xFF	; 255
    20a0:	4f e7       	ldi	r20, 0x7F	; 127
    20a2:	57 e4       	ldi	r21, 0x47	; 71
    20a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20a8:	18 16       	cp	r1, r24
    20aa:	4c f5       	brge	.+82     	; 0x20fe <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e2       	ldi	r20, 0x20	; 32
    20ba:	51 e4       	ldi	r21, 0x41	; 65
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	bc 01       	movw	r22, r24
    20c6:	cd 01       	movw	r24, r26
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	9e 83       	std	Y+6, r25	; 0x06
    20d2:	8d 83       	std	Y+5, r24	; 0x05
    20d4:	0f c0       	rjmp	.+30     	; 0x20f4 <LCD_displayCharacter+0x39a>
    20d6:	88 ec       	ldi	r24, 0xC8	; 200
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	9c 83       	std	Y+4, r25	; 0x04
    20dc:	8b 83       	std	Y+3, r24	; 0x03
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <LCD_displayCharacter+0x388>
    20e6:	9c 83       	std	Y+4, r25	; 0x04
    20e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ea:	8d 81       	ldd	r24, Y+5	; 0x05
    20ec:	9e 81       	ldd	r25, Y+6	; 0x06
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	9e 83       	std	Y+6, r25	; 0x06
    20f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	9e 81       	ldd	r25, Y+6	; 0x06
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	69 f7       	brne	.-38     	; 0x20d6 <LCD_displayCharacter+0x37c>
    20fc:	14 c0       	rjmp	.+40     	; 0x2126 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2100:	78 85       	ldd	r23, Y+8	; 0x08
    2102:	89 85       	ldd	r24, Y+9	; 0x09
    2104:	9a 85       	ldd	r25, Y+10	; 0x0a
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9e 83       	std	Y+6, r25	; 0x06
    2110:	8d 83       	std	Y+5, r24	; 0x05
    2112:	8d 81       	ldd	r24, Y+5	; 0x05
    2114:	9e 81       	ldd	r25, Y+6	; 0x06
    2116:	9a 83       	std	Y+2, r25	; 0x02
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	9a 81       	ldd	r25, Y+2	; 0x02
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <LCD_displayCharacter+0x3c4>
    2122:	9a 83       	std	Y+2, r25	; 0x02
    2124:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2126:	e9 96       	adiw	r28, 0x39	; 57
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	cd bf       	out	0x3d, r28	; 61
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	08 95       	ret

00002138 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	00 d0       	rcall	.+0      	; 0x213e <LCD_displayString+0x6>
    213e:	0f 92       	push	r0
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	9b 83       	std	Y+3, r25	; 0x03
    2146:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_stringCounter = 0; /* Counting the array of chars */
    2148:	19 82       	std	Y+1, r1	; 0x01
    214a:	0e c0       	rjmp	.+28     	; 0x2168 <LCD_displayString+0x30>

	while(Str[a_stringCounter] != '\0')
	{
		LCD_displayCharacter(Str[a_stringCounter]);
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	9b 81       	ldd	r25, Y+3	; 0x03
    2156:	fc 01       	movw	r30, r24
    2158:	e2 0f       	add	r30, r18
    215a:	f3 1f       	adc	r31, r19
    215c:	80 81       	ld	r24, Z
    215e:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <LCD_displayCharacter>
		a_stringCounter++;
    2162:	89 81       	ldd	r24, Y+1	; 0x01
    2164:	8f 5f       	subi	r24, 0xFF	; 255
    2166:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(const char *Str)
{
	uint8 a_stringCounter = 0; /* Counting the array of chars */

	while(Str[a_stringCounter] != '\0')
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	28 2f       	mov	r18, r24
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	9b 81       	ldd	r25, Y+3	; 0x03
    2172:	fc 01       	movw	r30, r24
    2174:	e2 0f       	add	r30, r18
    2176:	f3 1f       	adc	r31, r19
    2178:	80 81       	ld	r24, Z
    217a:	88 23       	and	r24, r24
    217c:	39 f7       	brne	.-50     	; 0x214c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[a_stringCounter]);
		a_stringCounter++;
	}
}
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	00 d0       	rcall	.+0      	; 0x2190 <LCD_moveCursor+0x6>
    2190:	00 d0       	rcall	.+0      	; 0x2192 <LCD_moveCursor+0x8>
    2192:	0f 92       	push	r0
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	8a 83       	std	Y+2, r24	; 0x02
    219a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	28 2f       	mov	r18, r24
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	3d 83       	std	Y+5, r19	; 0x05
    21a4:	2c 83       	std	Y+4, r18	; 0x04
    21a6:	8c 81       	ldd	r24, Y+4	; 0x04
    21a8:	9d 81       	ldd	r25, Y+5	; 0x05
    21aa:	81 30       	cpi	r24, 0x01	; 1
    21ac:	91 05       	cpc	r25, r1
    21ae:	c1 f0       	breq	.+48     	; 0x21e0 <LCD_moveCursor+0x56>
    21b0:	2c 81       	ldd	r18, Y+4	; 0x04
    21b2:	3d 81       	ldd	r19, Y+5	; 0x05
    21b4:	22 30       	cpi	r18, 0x02	; 2
    21b6:	31 05       	cpc	r19, r1
    21b8:	2c f4       	brge	.+10     	; 0x21c4 <LCD_moveCursor+0x3a>
    21ba:	8c 81       	ldd	r24, Y+4	; 0x04
    21bc:	9d 81       	ldd	r25, Y+5	; 0x05
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	61 f0       	breq	.+24     	; 0x21da <LCD_moveCursor+0x50>
    21c2:	19 c0       	rjmp	.+50     	; 0x21f6 <LCD_moveCursor+0x6c>
    21c4:	2c 81       	ldd	r18, Y+4	; 0x04
    21c6:	3d 81       	ldd	r19, Y+5	; 0x05
    21c8:	22 30       	cpi	r18, 0x02	; 2
    21ca:	31 05       	cpc	r19, r1
    21cc:	69 f0       	breq	.+26     	; 0x21e8 <LCD_moveCursor+0x5e>
    21ce:	8c 81       	ldd	r24, Y+4	; 0x04
    21d0:	9d 81       	ldd	r25, Y+5	; 0x05
    21d2:	83 30       	cpi	r24, 0x03	; 3
    21d4:	91 05       	cpc	r25, r1
    21d6:	61 f0       	breq	.+24     	; 0x21f0 <LCD_moveCursor+0x66>
    21d8:	0e c0       	rjmp	.+28     	; 0x21f6 <LCD_moveCursor+0x6c>
	{
	case 0:
		a_lcd_memory_address=col;
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	0b c0       	rjmp	.+22     	; 0x21f6 <LCD_moveCursor+0x6c>
		break;
	case 1:
		a_lcd_memory_address=col+0x40;
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	80 5c       	subi	r24, 0xC0	; 192
    21e4:	89 83       	std	Y+1, r24	; 0x01
    21e6:	07 c0       	rjmp	.+14     	; 0x21f6 <LCD_moveCursor+0x6c>
		break;
	case 2:
		a_lcd_memory_address=col+0x10;
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	80 5f       	subi	r24, 0xF0	; 240
    21ec:	89 83       	std	Y+1, r24	; 0x01
    21ee:	03 c0       	rjmp	.+6      	; 0x21f6 <LCD_moveCursor+0x6c>
		break;
	case 3:
		a_lcd_memory_address=col+0x50;
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	80 5b       	subi	r24, 0xB0	; 176
    21f4:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(a_lcd_memory_address | START_AT_FIRST_LINE);
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	80 68       	ori	r24, 0x80	; 128
    21fa:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_sendCommand>
}
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	00 d0       	rcall	.+0      	; 0x2214 <LCD_displayStringRowColumn+0x6>
    2214:	00 d0       	rcall	.+0      	; 0x2216 <LCD_displayStringRowColumn+0x8>
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	6a 83       	std	Y+2, r22	; 0x02
    221e:	5c 83       	std	Y+4, r21	; 0x04
    2220:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	6a 81       	ldd	r22, Y+2	; 0x02
    2226:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
}
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	08 95       	ret

00002240 <LCD_displayCharRowColumn>:
/*
 * Description :
 * Display the required Char in a specified row and column index on the screen
 */
void LCD_displayCharRowColumn(uint8 row,uint8 col,uint8 data)
{
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	00 d0       	rcall	.+0      	; 0x2246 <LCD_displayCharRowColumn+0x6>
    2246:	0f 92       	push	r0
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	89 83       	std	Y+1, r24	; 0x01
    224e:	6a 83       	std	Y+2, r22	; 0x02
    2250:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	6a 81       	ldd	r22, Y+2	; 0x02
    2256:	0e 94 c5 10 	call	0x218a	; 0x218a <LCD_moveCursor>
	LCD_displayCharacter(data); /* display the string */
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <LCD_displayCharacter>
}
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	62 97       	sbiw	r28, 0x12	; 18
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	9a 8b       	std	Y+18, r25	; 0x12
    2282:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; 				/* String to hold the ascii result */
	itoa(data,buff,10); 		/* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2284:	89 89       	ldd	r24, Y+17	; 0x11
    2286:	9a 89       	ldd	r25, Y+18	; 0x12
    2288:	9e 01       	movw	r18, r28
    228a:	2f 5f       	subi	r18, 0xFF	; 255
    228c:	3f 4f       	sbci	r19, 0xFF	; 255
    228e:	b9 01       	movw	r22, r18
    2290:	4a e0       	ldi	r20, 0x0A	; 10
    2292:	50 e0       	ldi	r21, 0x00	; 0
    2294:	0e 94 30 19 	call	0x3260	; 0x3260 <itoa>
	LCD_displayString(buff); 	/* Display the string */
    2298:	ce 01       	movw	r24, r28
    229a:	01 96       	adiw	r24, 0x01	; 1
    229c:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_displayString>
}
    22a0:	62 96       	adiw	r28, 0x12	; 18
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	cf 91       	pop	r28
    22ae:	df 91       	pop	r29
    22b0:	08 95       	ret

000022b2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLR_DISPLAY);
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	0e 94 be 0c 	call	0x197c	; 0x197c <LCD_sendCommand>
}
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <__vector_11>:

/**-------------------------Interrupts Section----------------------**/
/**                               TIMER 0                          **/
/* Interrupt for normal mode */
ISR(TIMER0_OVF_vect)
{
    22c6:	1f 92       	push	r1
    22c8:	0f 92       	push	r0
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	0f 92       	push	r0
    22ce:	11 24       	eor	r1, r1
    22d0:	2f 93       	push	r18
    22d2:	3f 93       	push	r19
    22d4:	4f 93       	push	r20
    22d6:	5f 93       	push	r21
    22d8:	6f 93       	push	r22
    22da:	7f 93       	push	r23
    22dc:	8f 93       	push	r24
    22de:	9f 93       	push	r25
    22e0:	af 93       	push	r26
    22e2:	bf 93       	push	r27
    22e4:	ef 93       	push	r30
    22e6:	ff 93       	push	r31
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrZERO != NULL_PTR)
    22f0:	80 91 40 01 	lds	r24, 0x0140
    22f4:	90 91 41 01 	lds	r25, 0x0141
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	29 f0       	breq	.+10     	; 0x2306 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrZERO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    22fc:	e0 91 40 01 	lds	r30, 0x0140
    2300:	f0 91 41 01 	lds	r31, 0x0141
    2304:	09 95       	icall
	}
}
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	ff 91       	pop	r31
    230c:	ef 91       	pop	r30
    230e:	bf 91       	pop	r27
    2310:	af 91       	pop	r26
    2312:	9f 91       	pop	r25
    2314:	8f 91       	pop	r24
    2316:	7f 91       	pop	r23
    2318:	6f 91       	pop	r22
    231a:	5f 91       	pop	r21
    231c:	4f 91       	pop	r20
    231e:	3f 91       	pop	r19
    2320:	2f 91       	pop	r18
    2322:	0f 90       	pop	r0
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	0f 90       	pop	r0
    2328:	1f 90       	pop	r1
    232a:	18 95       	reti

0000232c <__vector_10>:
/*-------------------------------------------------------------------*/
/* Interrupt for Compare Mode */
ISR(TIMER0_COMP_vect)
{
    232c:	1f 92       	push	r1
    232e:	0f 92       	push	r0
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	0f 92       	push	r0
    2334:	11 24       	eor	r1, r1
    2336:	2f 93       	push	r18
    2338:	3f 93       	push	r19
    233a:	4f 93       	push	r20
    233c:	5f 93       	push	r21
    233e:	6f 93       	push	r22
    2340:	7f 93       	push	r23
    2342:	8f 93       	push	r24
    2344:	9f 93       	push	r25
    2346:	af 93       	push	r26
    2348:	bf 93       	push	r27
    234a:	ef 93       	push	r30
    234c:	ff 93       	push	r31
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrZERO != NULL_PTR)
    2356:	80 91 40 01 	lds	r24, 0x0140
    235a:	90 91 41 01 	lds	r25, 0x0141
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	29 f0       	breq	.+10     	; 0x236c <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrZERO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2362:	e0 91 40 01 	lds	r30, 0x0140
    2366:	f0 91 41 01 	lds	r31, 0x0141
    236a:	09 95       	icall
	}
}
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	ff 91       	pop	r31
    2372:	ef 91       	pop	r30
    2374:	bf 91       	pop	r27
    2376:	af 91       	pop	r26
    2378:	9f 91       	pop	r25
    237a:	8f 91       	pop	r24
    237c:	7f 91       	pop	r23
    237e:	6f 91       	pop	r22
    2380:	5f 91       	pop	r21
    2382:	4f 91       	pop	r20
    2384:	3f 91       	pop	r19
    2386:	2f 91       	pop	r18
    2388:	0f 90       	pop	r0
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	0f 90       	pop	r0
    238e:	1f 90       	pop	r1
    2390:	18 95       	reti

00002392 <__vector_9>:
/*------------------------------------------------------------------*/
/**                               TIMER 1                          **/

/* Interrupt for normal mode */
ISR(TIMER1_OVF_vect)
{
    2392:	1f 92       	push	r1
    2394:	0f 92       	push	r0
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	0f 92       	push	r0
    239a:	11 24       	eor	r1, r1
    239c:	2f 93       	push	r18
    239e:	3f 93       	push	r19
    23a0:	4f 93       	push	r20
    23a2:	5f 93       	push	r21
    23a4:	6f 93       	push	r22
    23a6:	7f 93       	push	r23
    23a8:	8f 93       	push	r24
    23aa:	9f 93       	push	r25
    23ac:	af 93       	push	r26
    23ae:	bf 93       	push	r27
    23b0:	ef 93       	push	r30
    23b2:	ff 93       	push	r31
    23b4:	df 93       	push	r29
    23b6:	cf 93       	push	r28
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrONE != NULL_PTR)
    23bc:	80 91 42 01 	lds	r24, 0x0142
    23c0:	90 91 43 01 	lds	r25, 0x0143
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	29 f0       	breq	.+10     	; 0x23d2 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrONE)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    23c8:	e0 91 42 01 	lds	r30, 0x0142
    23cc:	f0 91 43 01 	lds	r31, 0x0143
    23d0:	09 95       	icall
	}
}
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	ff 91       	pop	r31
    23d8:	ef 91       	pop	r30
    23da:	bf 91       	pop	r27
    23dc:	af 91       	pop	r26
    23de:	9f 91       	pop	r25
    23e0:	8f 91       	pop	r24
    23e2:	7f 91       	pop	r23
    23e4:	6f 91       	pop	r22
    23e6:	5f 91       	pop	r21
    23e8:	4f 91       	pop	r20
    23ea:	3f 91       	pop	r19
    23ec:	2f 91       	pop	r18
    23ee:	0f 90       	pop	r0
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	0f 90       	pop	r0
    23f4:	1f 90       	pop	r1
    23f6:	18 95       	reti

000023f8 <__vector_7>:
/*-------------------------------------------------------------------*/
/* Interrupt for Compare Mode */
ISR(TIMER1_COMPA_vect)
{
    23f8:	1f 92       	push	r1
    23fa:	0f 92       	push	r0
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	0f 92       	push	r0
    2400:	11 24       	eor	r1, r1
    2402:	2f 93       	push	r18
    2404:	3f 93       	push	r19
    2406:	4f 93       	push	r20
    2408:	5f 93       	push	r21
    240a:	6f 93       	push	r22
    240c:	7f 93       	push	r23
    240e:	8f 93       	push	r24
    2410:	9f 93       	push	r25
    2412:	af 93       	push	r26
    2414:	bf 93       	push	r27
    2416:	ef 93       	push	r30
    2418:	ff 93       	push	r31
    241a:	df 93       	push	r29
    241c:	cf 93       	push	r28
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrONE != NULL_PTR)
    2422:	80 91 42 01 	lds	r24, 0x0142
    2426:	90 91 43 01 	lds	r25, 0x0143
    242a:	00 97       	sbiw	r24, 0x00	; 0
    242c:	29 f0       	breq	.+10     	; 0x2438 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrONE)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    242e:	e0 91 42 01 	lds	r30, 0x0142
    2432:	f0 91 43 01 	lds	r31, 0x0143
    2436:	09 95       	icall
	}
}
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	ff 91       	pop	r31
    243e:	ef 91       	pop	r30
    2440:	bf 91       	pop	r27
    2442:	af 91       	pop	r26
    2444:	9f 91       	pop	r25
    2446:	8f 91       	pop	r24
    2448:	7f 91       	pop	r23
    244a:	6f 91       	pop	r22
    244c:	5f 91       	pop	r21
    244e:	4f 91       	pop	r20
    2450:	3f 91       	pop	r19
    2452:	2f 91       	pop	r18
    2454:	0f 90       	pop	r0
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	0f 90       	pop	r0
    245a:	1f 90       	pop	r1
    245c:	18 95       	reti

0000245e <__vector_5>:
/*-------------------------------------------------------------------*/
/**                               TIMER 2                          **/

/* Interrupt for normal mode */
ISR(TIMER2_OVF_vect)
{
    245e:	1f 92       	push	r1
    2460:	0f 92       	push	r0
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	0f 92       	push	r0
    2466:	11 24       	eor	r1, r1
    2468:	2f 93       	push	r18
    246a:	3f 93       	push	r19
    246c:	4f 93       	push	r20
    246e:	5f 93       	push	r21
    2470:	6f 93       	push	r22
    2472:	7f 93       	push	r23
    2474:	8f 93       	push	r24
    2476:	9f 93       	push	r25
    2478:	af 93       	push	r26
    247a:	bf 93       	push	r27
    247c:	ef 93       	push	r30
    247e:	ff 93       	push	r31
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTWO != NULL_PTR)
    2488:	80 91 44 01 	lds	r24, 0x0144
    248c:	90 91 45 01 	lds	r25, 0x0145
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	29 f0       	breq	.+10     	; 0x249e <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrTWO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2494:	e0 91 44 01 	lds	r30, 0x0144
    2498:	f0 91 45 01 	lds	r31, 0x0145
    249c:	09 95       	icall
	}
}
    249e:	cf 91       	pop	r28
    24a0:	df 91       	pop	r29
    24a2:	ff 91       	pop	r31
    24a4:	ef 91       	pop	r30
    24a6:	bf 91       	pop	r27
    24a8:	af 91       	pop	r26
    24aa:	9f 91       	pop	r25
    24ac:	8f 91       	pop	r24
    24ae:	7f 91       	pop	r23
    24b0:	6f 91       	pop	r22
    24b2:	5f 91       	pop	r21
    24b4:	4f 91       	pop	r20
    24b6:	3f 91       	pop	r19
    24b8:	2f 91       	pop	r18
    24ba:	0f 90       	pop	r0
    24bc:	0f be       	out	0x3f, r0	; 63
    24be:	0f 90       	pop	r0
    24c0:	1f 90       	pop	r1
    24c2:	18 95       	reti

000024c4 <__vector_4>:
/*-------------------------------------------------------------------*/
/* Interrupt for Compare Mode */
ISR(TIMER2_COMP_vect)
{
    24c4:	1f 92       	push	r1
    24c6:	0f 92       	push	r0
    24c8:	0f b6       	in	r0, 0x3f	; 63
    24ca:	0f 92       	push	r0
    24cc:	11 24       	eor	r1, r1
    24ce:	2f 93       	push	r18
    24d0:	3f 93       	push	r19
    24d2:	4f 93       	push	r20
    24d4:	5f 93       	push	r21
    24d6:	6f 93       	push	r22
    24d8:	7f 93       	push	r23
    24da:	8f 93       	push	r24
    24dc:	9f 93       	push	r25
    24de:	af 93       	push	r26
    24e0:	bf 93       	push	r27
    24e2:	ef 93       	push	r30
    24e4:	ff 93       	push	r31
    24e6:	df 93       	push	r29
    24e8:	cf 93       	push	r28
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTWO != NULL_PTR)
    24ee:	80 91 44 01 	lds	r24, 0x0144
    24f2:	90 91 45 01 	lds	r25, 0x0145
    24f6:	00 97       	sbiw	r24, 0x00	; 0
    24f8:	29 f0       	breq	.+10     	; 0x2504 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrTWO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    24fa:	e0 91 44 01 	lds	r30, 0x0144
    24fe:	f0 91 45 01 	lds	r31, 0x0145
    2502:	09 95       	icall
	}
}
    2504:	cf 91       	pop	r28
    2506:	df 91       	pop	r29
    2508:	ff 91       	pop	r31
    250a:	ef 91       	pop	r30
    250c:	bf 91       	pop	r27
    250e:	af 91       	pop	r26
    2510:	9f 91       	pop	r25
    2512:	8f 91       	pop	r24
    2514:	7f 91       	pop	r23
    2516:	6f 91       	pop	r22
    2518:	5f 91       	pop	r21
    251a:	4f 91       	pop	r20
    251c:	3f 91       	pop	r19
    251e:	2f 91       	pop	r18
    2520:	0f 90       	pop	r0
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	0f 90       	pop	r0
    2526:	1f 90       	pop	r1
    2528:	18 95       	reti

0000252a <Timer0_Init>:
/**------------------------Timer ZERO-----------------------**/
/*
 * Initializing Timer0
 */
void Timer0_Init(const Timer0_ConfigType *Config_Ptr)
{
    252a:	df 93       	push	r29
    252c:	cf 93       	push	r28
    252e:	00 d0       	rcall	.+0      	; 0x2530 <Timer0_Init+0x6>
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	9a 83       	std	Y+2, r25	; 0x02
    2536:	89 83       	std	Y+1, r24	; 0x01
	/* Selecting Force Output Compare */
	TCCR0 = (TCCR0 & 0x7F) | ((Config_Ptr->Timer0_ForceCompare)<<FOC0);
    2538:	a3 e5       	ldi	r26, 0x53	; 83
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	e3 e5       	ldi	r30, 0x53	; 83
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	28 2f       	mov	r18, r24
    2544:	2f 77       	andi	r18, 0x7F	; 127
    2546:	e9 81       	ldd	r30, Y+1	; 0x01
    2548:	fa 81       	ldd	r31, Y+2	; 0x02
    254a:	81 81       	ldd	r24, Z+1	; 0x01
    254c:	88 2f       	mov	r24, r24
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	96 95       	lsr	r25
    2552:	98 2f       	mov	r25, r24
    2554:	88 27       	eor	r24, r24
    2556:	97 95       	ror	r25
    2558:	87 95       	ror	r24
    255a:	82 2b       	or	r24, r18
    255c:	8c 93       	st	X, r24

	/* Selecting the WaveForm Generation */
	TCCR0 = (TCCR0 & 0xBF) | (((Config_Ptr->Timer0_WaveForm)<<7)>>1);
    255e:	a3 e5       	ldi	r26, 0x53	; 83
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e3 e5       	ldi	r30, 0x53	; 83
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	28 2f       	mov	r18, r24
    256a:	2f 7b       	andi	r18, 0xBF	; 191
    256c:	e9 81       	ldd	r30, Y+1	; 0x01
    256e:	fa 81       	ldd	r31, Y+2	; 0x02
    2570:	82 81       	ldd	r24, Z+2	; 0x02
    2572:	88 2f       	mov	r24, r24
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	96 95       	lsr	r25
    2578:	98 2f       	mov	r25, r24
    257a:	88 27       	eor	r24, r24
    257c:	97 95       	ror	r25
    257e:	87 95       	ror	r24
    2580:	95 95       	asr	r25
    2582:	87 95       	ror	r24
    2584:	82 2b       	or	r24, r18
    2586:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xF7) | (((Config_Ptr->Timer0_WaveForm)>>1)<<WGM01);
    2588:	a3 e5       	ldi	r26, 0x53	; 83
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	e3 e5       	ldi	r30, 0x53	; 83
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	28 2f       	mov	r18, r24
    2594:	27 7f       	andi	r18, 0xF7	; 247
    2596:	e9 81       	ldd	r30, Y+1	; 0x01
    2598:	fa 81       	ldd	r31, Y+2	; 0x02
    259a:	82 81       	ldd	r24, Z+2	; 0x02
    259c:	86 95       	lsr	r24
    259e:	88 2f       	mov	r24, r24
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	88 0f       	add	r24, r24
    25a8:	99 1f       	adc	r25, r25
    25aa:	88 0f       	add	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	82 2b       	or	r24, r18
    25b0:	8c 93       	st	X, r24

	/* Select Compare Match output mode */
	TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr->Timer0_CompareMode)<<4);
    25b2:	a3 e5       	ldi	r26, 0x53	; 83
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e3 e5       	ldi	r30, 0x53	; 83
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	28 2f       	mov	r18, r24
    25be:	2f 7c       	andi	r18, 0xCF	; 207
    25c0:	e9 81       	ldd	r30, Y+1	; 0x01
    25c2:	fa 81       	ldd	r31, Y+2	; 0x02
    25c4:	83 81       	ldd	r24, Z+3	; 0x03
    25c6:	88 2f       	mov	r24, r24
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	82 95       	swap	r24
    25cc:	92 95       	swap	r25
    25ce:	90 7f       	andi	r25, 0xF0	; 240
    25d0:	98 27       	eor	r25, r24
    25d2:	80 7f       	andi	r24, 0xF0	; 240
    25d4:	98 27       	eor	r25, r24
    25d6:	82 2b       	or	r24, r18
    25d8:	8c 93       	st	X, r24

	/* Select the Prescaler Value */
	TCCR0 = (TCCR0 & 0xF8) | ((Config_Ptr->Timer0_PreScaler));
    25da:	a3 e5       	ldi	r26, 0x53	; 83
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e3 e5       	ldi	r30, 0x53	; 83
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	98 2f       	mov	r25, r24
    25e6:	98 7f       	andi	r25, 0xF8	; 248
    25e8:	e9 81       	ldd	r30, Y+1	; 0x01
    25ea:	fa 81       	ldd	r31, Y+2	; 0x02
    25ec:	80 81       	ld	r24, Z
    25ee:	89 2b       	or	r24, r25
    25f0:	8c 93       	st	X, r24

	/* Choosing the OVF value */
	TCNT0 = Config_Ptr->Timer0_TCNT0_Value;
    25f2:	a2 e5       	ldi	r26, 0x52	; 82
    25f4:	b0 e0       	ldi	r27, 0x00	; 0
    25f6:	e9 81       	ldd	r30, Y+1	; 0x01
    25f8:	fa 81       	ldd	r31, Y+2	; 0x02
    25fa:	86 81       	ldd	r24, Z+6	; 0x06
    25fc:	8c 93       	st	X, r24

	/* Choosing OCR0 value */
	OCR0 = Config_Ptr->Timer0_OCR0_Value;
    25fe:	ac e5       	ldi	r26, 0x5C	; 92
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	e9 81       	ldd	r30, Y+1	; 0x01
    2604:	fa 81       	ldd	r31, Y+2	; 0x02
    2606:	87 81       	ldd	r24, Z+7	; 0x07
    2608:	8c 93       	st	X, r24

	/* Enabling Interrupt for Compare */
	TIMSK = (TIMSK & 0xFD) | ((Config_Ptr->Timer0_COMP_INT)<<OCIE0);
    260a:	a9 e5       	ldi	r26, 0x59	; 89
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	e9 e5       	ldi	r30, 0x59	; 89
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	28 2f       	mov	r18, r24
    2616:	2d 7f       	andi	r18, 0xFD	; 253
    2618:	e9 81       	ldd	r30, Y+1	; 0x01
    261a:	fa 81       	ldd	r31, Y+2	; 0x02
    261c:	84 81       	ldd	r24, Z+4	; 0x04
    261e:	88 2f       	mov	r24, r24
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	88 0f       	add	r24, r24
    2624:	99 1f       	adc	r25, r25
    2626:	82 2b       	or	r24, r18
    2628:	8c 93       	st	X, r24

	/* Enabling Interrupts for OVF */
	TIMSK = (TIMSK & 0xFE) | ((Config_Ptr->Timer0_OVF_INT));
    262a:	a9 e5       	ldi	r26, 0x59	; 89
    262c:	b0 e0       	ldi	r27, 0x00	; 0
    262e:	e9 e5       	ldi	r30, 0x59	; 89
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	80 81       	ld	r24, Z
    2634:	98 2f       	mov	r25, r24
    2636:	9e 7f       	andi	r25, 0xFE	; 254
    2638:	e9 81       	ldd	r30, Y+1	; 0x01
    263a:	fa 81       	ldd	r31, Y+2	; 0x02
    263c:	85 81       	ldd	r24, Z+5	; 0x05
    263e:	89 2b       	or	r24, r25
    2640:	8c 93       	st	X, r24
}
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <Timer0_deInit>:
/*
 * Description:
 * De-Initializing Everything
 */
void Timer0_deInit(void)
{
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	cd b7       	in	r28, 0x3d	; 61
    2652:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    2654:	e3 e5       	ldi	r30, 0x53	; 83
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	10 82       	st	Z, r1
	TIMSK = (TIMSK & 0xFC);
    265a:	a9 e5       	ldi	r26, 0x59	; 89
    265c:	b0 e0       	ldi	r27, 0x00	; 0
    265e:	e9 e5       	ldi	r30, 0x59	; 89
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	80 81       	ld	r24, Z
    2664:	8c 7f       	andi	r24, 0xFC	; 252
    2666:	8c 93       	st	X, r24
}
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	08 95       	ret

0000266e <Timer0_setCallBackZERO>:

/*-------------------------------------------------------------------*/
/* Description: Function to set the Call Back function address. */
void Timer0_setCallBackZERO(void(*a_ptr)(void))
{
    266e:	df 93       	push	r29
    2670:	cf 93       	push	r28
    2672:	00 d0       	rcall	.+0      	; 0x2674 <Timer0_setCallBackZERO+0x6>
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	9a 83       	std	Y+2, r25	; 0x02
    267a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrZERO = a_ptr;
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	9a 81       	ldd	r25, Y+2	; 0x02
    2680:	90 93 41 01 	sts	0x0141, r25
    2684:	80 93 40 01 	sts	0x0140, r24
}
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	08 95       	ret

00002692 <Timer0_PWM_Init>:

/*
 * Initializing Timer0_PWM
 */
void Timer0_PWM_Init(const Timer0_ConfigType *Config_Ptr)
{
    2692:	df 93       	push	r29
    2694:	cf 93       	push	r28
    2696:	00 d0       	rcall	.+0      	; 0x2698 <Timer0_PWM_Init+0x6>
    2698:	cd b7       	in	r28, 0x3d	; 61
    269a:	de b7       	in	r29, 0x3e	; 62
    269c:	9a 83       	std	Y+2, r25	; 0x02
    269e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Set Timer Initial Value to 0 */
    26a0:	e2 e5       	ldi	r30, 0x52	; 82
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	10 82       	st	Z, r1

	/* Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC */
	GPIO_setupPinDirection(PWM0_PORT_ID, PWM0_PIN_ID, PIN_OUTPUT);
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	63 e0       	ldi	r22, 0x03	; 3
    26aa:	41 e0       	ldi	r20, 0x01	; 1
    26ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = Dependent on the user
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01);
    26b0:	e3 e5       	ldi	r30, 0x53	; 83
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	88 e6       	ldi	r24, 0x68	; 104
    26b6:	80 83       	st	Z, r24
	TCCR0 |= Config_Ptr->Timer0_PreScaler;
    26b8:	a3 e5       	ldi	r26, 0x53	; 83
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e3 e5       	ldi	r30, 0x53	; 83
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	90 81       	ld	r25, Z
    26c2:	e9 81       	ldd	r30, Y+1	; 0x01
    26c4:	fa 81       	ldd	r31, Y+2	; 0x02
    26c6:	80 81       	ld	r24, Z
    26c8:	89 2b       	or	r24, r25
    26ca:	8c 93       	st	X, r24
}
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	08 95       	ret

000026d6 <Timer0_PWM_Activate>:

/*
 * Setting Timer0_PWM
 */
void Timer0_PWM_Activate(uint8 *SetDuty_Ptr)
{
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	00 d0       	rcall	.+0      	; 0x26dc <Timer0_PWM_Activate+0x6>
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	9a 83       	std	Y+2, r25	; 0x02
    26e2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Set Timer Initial Value to 0 */
    26e4:	e2 e5       	ldi	r30, 0x52	; 82
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	10 82       	st	Z, r1
	OCR0  = *SetDuty_Ptr; /* Set Compare Value */
    26ea:	ac e5       	ldi	r26, 0x5C	; 92
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	e9 81       	ldd	r30, Y+1	; 0x01
    26f0:	fa 81       	ldd	r31, Y+2	; 0x02
    26f2:	80 81       	ld	r24, Z
    26f4:	8c 93       	st	X, r24
}
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <Timer1_Init>:

/*
 * Initializing TIMER0
 */
void Timer1_Init(const Timer1_ConfigType *Config_Ptr)
{
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	00 d0       	rcall	.+0      	; 0x2706 <Timer1_Init+0x6>
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	9a 83       	std	Y+2, r25	; 0x02
    270c:	89 83       	std	Y+1, r24	; 0x01
	/* Compare Output Mode for channel A */
	TCCR1A = (TCCR1A & 0x3F) | (Config_Ptr->CompareModeA<<6);
    270e:	af e4       	ldi	r26, 0x4F	; 79
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	ef e4       	ldi	r30, 0x4F	; 79
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	28 2f       	mov	r18, r24
    271a:	2f 73       	andi	r18, 0x3F	; 63
    271c:	e9 81       	ldd	r30, Y+1	; 0x01
    271e:	fa 81       	ldd	r31, Y+2	; 0x02
    2720:	80 81       	ld	r24, Z
    2722:	88 2f       	mov	r24, r24
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	00 24       	eor	r0, r0
    2728:	96 95       	lsr	r25
    272a:	87 95       	ror	r24
    272c:	07 94       	ror	r0
    272e:	96 95       	lsr	r25
    2730:	87 95       	ror	r24
    2732:	07 94       	ror	r0
    2734:	98 2f       	mov	r25, r24
    2736:	80 2d       	mov	r24, r0
    2738:	82 2b       	or	r24, r18
    273a:	8c 93       	st	X, r24

	/* Compare Output Mode for channel B */
	TCCR1A = (TCCR1A & 0xCF) | (Config_Ptr->CompareModeB<<4);
    273c:	af e4       	ldi	r26, 0x4F	; 79
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	ef e4       	ldi	r30, 0x4F	; 79
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	28 2f       	mov	r18, r24
    2748:	2f 7c       	andi	r18, 0xCF	; 207
    274a:	e9 81       	ldd	r30, Y+1	; 0x01
    274c:	fa 81       	ldd	r31, Y+2	; 0x02
    274e:	81 81       	ldd	r24, Z+1	; 0x01
    2750:	88 2f       	mov	r24, r24
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	82 95       	swap	r24
    2756:	92 95       	swap	r25
    2758:	90 7f       	andi	r25, 0xF0	; 240
    275a:	98 27       	eor	r25, r24
    275c:	80 7f       	andi	r24, 0xF0	; 240
    275e:	98 27       	eor	r25, r24
    2760:	82 2b       	or	r24, r18
    2762:	8c 93       	st	X, r24

	/* Force Output Compare for Channel A */
	TCCR1A = (TCCR1A & 0xF7) | (Config_Ptr->ForceCompareA<<3);
    2764:	af e4       	ldi	r26, 0x4F	; 79
    2766:	b0 e0       	ldi	r27, 0x00	; 0
    2768:	ef e4       	ldi	r30, 0x4F	; 79
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	28 2f       	mov	r18, r24
    2770:	27 7f       	andi	r18, 0xF7	; 247
    2772:	e9 81       	ldd	r30, Y+1	; 0x01
    2774:	fa 81       	ldd	r31, Y+2	; 0x02
    2776:	82 81       	ldd	r24, Z+2	; 0x02
    2778:	88 2f       	mov	r24, r24
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	88 0f       	add	r24, r24
    277e:	99 1f       	adc	r25, r25
    2780:	88 0f       	add	r24, r24
    2782:	99 1f       	adc	r25, r25
    2784:	88 0f       	add	r24, r24
    2786:	99 1f       	adc	r25, r25
    2788:	82 2b       	or	r24, r18
    278a:	8c 93       	st	X, r24

	/* Force Output Compare for Channel B */
	TCCR1A = (TCCR1A & 0xFB) | (Config_Ptr->ForceCompareB<<2);
    278c:	af e4       	ldi	r26, 0x4F	; 79
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	ef e4       	ldi	r30, 0x4F	; 79
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	28 2f       	mov	r18, r24
    2798:	2b 7f       	andi	r18, 0xFB	; 251
    279a:	e9 81       	ldd	r30, Y+1	; 0x01
    279c:	fa 81       	ldd	r31, Y+2	; 0x02
    279e:	83 81       	ldd	r24, Z+3	; 0x03
    27a0:	88 2f       	mov	r24, r24
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	88 0f       	add	r24, r24
    27aa:	99 1f       	adc	r25, r25
    27ac:	82 2b       	or	r24, r18
    27ae:	8c 93       	st	X, r24

	/* Setting the waveform */
	TCCR1A = (TCCR1A & 0xFC) | ((Config_Ptr->WaveForm<<6)>>6); /* Getting the first 2 bits only */
    27b0:	af e4       	ldi	r26, 0x4F	; 79
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	ef e4       	ldi	r30, 0x4F	; 79
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	28 2f       	mov	r18, r24
    27bc:	2c 7f       	andi	r18, 0xFC	; 252
    27be:	e9 81       	ldd	r30, Y+1	; 0x01
    27c0:	fa 81       	ldd	r31, Y+2	; 0x02
    27c2:	87 81       	ldd	r24, Z+7	; 0x07
    27c4:	88 2f       	mov	r24, r24
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	00 24       	eor	r0, r0
    27ca:	96 95       	lsr	r25
    27cc:	87 95       	ror	r24
    27ce:	07 94       	ror	r0
    27d0:	96 95       	lsr	r25
    27d2:	87 95       	ror	r24
    27d4:	07 94       	ror	r0
    27d6:	98 2f       	mov	r25, r24
    27d8:	80 2d       	mov	r24, r0
    27da:	08 2e       	mov	r0, r24
    27dc:	89 2f       	mov	r24, r25
    27de:	00 0c       	add	r0, r0
    27e0:	88 1f       	adc	r24, r24
    27e2:	99 0b       	sbc	r25, r25
    27e4:	00 0c       	add	r0, r0
    27e6:	88 1f       	adc	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	82 2b       	or	r24, r18
    27ec:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xE7) | ((Config_Ptr->WaveForm>>2)<<3); /* Getting bit 2 and 3 only*/
    27ee:	ae e4       	ldi	r26, 0x4E	; 78
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	ee e4       	ldi	r30, 0x4E	; 78
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	28 2f       	mov	r18, r24
    27fa:	27 7e       	andi	r18, 0xE7	; 231
    27fc:	e9 81       	ldd	r30, Y+1	; 0x01
    27fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2800:	87 81       	ldd	r24, Z+7	; 0x07
    2802:	86 95       	lsr	r24
    2804:	86 95       	lsr	r24
    2806:	88 2f       	mov	r24, r24
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	88 0f       	add	r24, r24
    280c:	99 1f       	adc	r25, r25
    280e:	88 0f       	add	r24, r24
    2810:	99 1f       	adc	r25, r25
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	82 2b       	or	r24, r18
    2818:	8c 93       	st	X, r24

	/* Noise Canceler */
	TCCR1B = (TCCR1B & 0x7F) | ((Config_Ptr->NoiseControl)<<7);
    281a:	ae e4       	ldi	r26, 0x4E	; 78
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	ee e4       	ldi	r30, 0x4E	; 78
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	28 2f       	mov	r18, r24
    2826:	2f 77       	andi	r18, 0x7F	; 127
    2828:	e9 81       	ldd	r30, Y+1	; 0x01
    282a:	fa 81       	ldd	r31, Y+2	; 0x02
    282c:	85 81       	ldd	r24, Z+5	; 0x05
    282e:	88 2f       	mov	r24, r24
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	96 95       	lsr	r25
    2834:	98 2f       	mov	r25, r24
    2836:	88 27       	eor	r24, r24
    2838:	97 95       	ror	r25
    283a:	87 95       	ror	r24
    283c:	82 2b       	or	r24, r18
    283e:	8c 93       	st	X, r24

	/* Edge Select */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->EdgeControl)<<ICES1);
    2840:	ae e4       	ldi	r26, 0x4E	; 78
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	ee e4       	ldi	r30, 0x4E	; 78
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	28 2f       	mov	r18, r24
    284c:	2f 7b       	andi	r18, 0xBF	; 191
    284e:	e9 81       	ldd	r30, Y+1	; 0x01
    2850:	fa 81       	ldd	r31, Y+2	; 0x02
    2852:	84 81       	ldd	r24, Z+4	; 0x04
    2854:	88 2f       	mov	r24, r24
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	00 24       	eor	r0, r0
    285a:	96 95       	lsr	r25
    285c:	87 95       	ror	r24
    285e:	07 94       	ror	r0
    2860:	96 95       	lsr	r25
    2862:	87 95       	ror	r24
    2864:	07 94       	ror	r0
    2866:	98 2f       	mov	r25, r24
    2868:	80 2d       	mov	r24, r0
    286a:	82 2b       	or	r24, r18
    286c:	8c 93       	st	X, r24

	/* Clock Selection */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->F_TIMER1_CLOCK);
    286e:	ae e4       	ldi	r26, 0x4E	; 78
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	ee e4       	ldi	r30, 0x4E	; 78
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	98 2f       	mov	r25, r24
    287a:	98 7f       	andi	r25, 0xF8	; 248
    287c:	e9 81       	ldd	r30, Y+1	; 0x01
    287e:	fa 81       	ldd	r31, Y+2	; 0x02
    2880:	86 81       	ldd	r24, Z+6	; 0x06
    2882:	89 2b       	or	r24, r25
    2884:	8c 93       	st	X, r24

	/* Enable compare A interrupt */
	TIMSK = (TIMSK & 0xEF) | ((Config_Ptr->interruptA)<<OCIE1A);
    2886:	a9 e5       	ldi	r26, 0x59	; 89
    2888:	b0 e0       	ldi	r27, 0x00	; 0
    288a:	e9 e5       	ldi	r30, 0x59	; 89
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	80 81       	ld	r24, Z
    2890:	28 2f       	mov	r18, r24
    2892:	2f 7e       	andi	r18, 0xEF	; 239
    2894:	e9 81       	ldd	r30, Y+1	; 0x01
    2896:	fa 81       	ldd	r31, Y+2	; 0x02
    2898:	80 85       	ldd	r24, Z+8	; 0x08
    289a:	88 2f       	mov	r24, r24
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	82 95       	swap	r24
    28a0:	92 95       	swap	r25
    28a2:	90 7f       	andi	r25, 0xF0	; 240
    28a4:	98 27       	eor	r25, r24
    28a6:	80 7f       	andi	r24, 0xF0	; 240
    28a8:	98 27       	eor	r25, r24
    28aa:	82 2b       	or	r24, r18
    28ac:	8c 93       	st	X, r24

	/* Enable compare B interrupt */
	TIMSK = (TIMSK & 0xF7) | ((Config_Ptr->interruptB)<<OCIE1B);
    28ae:	a9 e5       	ldi	r26, 0x59	; 89
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	e9 e5       	ldi	r30, 0x59	; 89
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	28 2f       	mov	r18, r24
    28ba:	27 7f       	andi	r18, 0xF7	; 247
    28bc:	e9 81       	ldd	r30, Y+1	; 0x01
    28be:	fa 81       	ldd	r31, Y+2	; 0x02
    28c0:	81 85       	ldd	r24, Z+9	; 0x09
    28c2:	88 2f       	mov	r24, r24
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	88 0f       	add	r24, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	88 0f       	add	r24, r24
    28cc:	99 1f       	adc	r25, r25
    28ce:	88 0f       	add	r24, r24
    28d0:	99 1f       	adc	r25, r25
    28d2:	82 2b       	or	r24, r18
    28d4:	8c 93       	st	X, r24

	/* Enable OverFlow interrupt */
	TIMSK = (TIMSK & 0xFB) | ((Config_Ptr->interruptOvf)<<TOIE1);
    28d6:	a9 e5       	ldi	r26, 0x59	; 89
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	e9 e5       	ldi	r30, 0x59	; 89
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	28 2f       	mov	r18, r24
    28e2:	2b 7f       	andi	r18, 0xFB	; 251
    28e4:	e9 81       	ldd	r30, Y+1	; 0x01
    28e6:	fa 81       	ldd	r31, Y+2	; 0x02
    28e8:	82 85       	ldd	r24, Z+10	; 0x0a
    28ea:	88 2f       	mov	r24, r24
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	88 0f       	add	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	88 0f       	add	r24, r24
    28f4:	99 1f       	adc	r25, r25
    28f6:	82 2b       	or	r24, r18
    28f8:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = Config_Ptr->TCNT1_Value;
    28fa:	ac e4       	ldi	r26, 0x4C	; 76
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2900:	fa 81       	ldd	r31, Y+2	; 0x02
    2902:	83 85       	ldd	r24, Z+11	; 0x0b
    2904:	94 85       	ldd	r25, Z+12	; 0x0c
    2906:	11 96       	adiw	r26, 0x01	; 1
    2908:	9c 93       	st	X, r25
    290a:	8e 93       	st	-X, r24

	/* Initializing the compare value register */
	OCR1A = Config_Ptr->OCR1A_Value;
    290c:	aa e4       	ldi	r26, 0x4A	; 74
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	e9 81       	ldd	r30, Y+1	; 0x01
    2912:	fa 81       	ldd	r31, Y+2	; 0x02
    2914:	85 85       	ldd	r24, Z+13	; 0x0d
    2916:	96 85       	ldd	r25, Z+14	; 0x0e
    2918:	11 96       	adiw	r26, 0x01	; 1
    291a:	9c 93       	st	X, r25
    291c:	8e 93       	st	-X, r24
	OCR1B = Config_Ptr->OCR1B_Value;
    291e:	a8 e4       	ldi	r26, 0x48	; 72
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	e9 81       	ldd	r30, Y+1	; 0x01
    2924:	fa 81       	ldd	r31, Y+2	; 0x02
    2926:	87 85       	ldd	r24, Z+15	; 0x0f
    2928:	90 89       	ldd	r25, Z+16	; 0x10
    292a:	11 96       	adiw	r26, 0x01	; 1
    292c:	9c 93       	st	X, r25
    292e:	8e 93       	st	-X, r24
}
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	08 95       	ret

0000293a <Timer1_setCallBackONE>:
/*-------------------------------------------------------------------*/

/* Description: Function to set the Call Back function address. */
void Timer1_setCallBackONE(void(*a_ptr)(void))
{
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	00 d0       	rcall	.+0      	; 0x2940 <Timer1_setCallBackONE+0x6>
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
    2944:	9a 83       	std	Y+2, r25	; 0x02
    2946:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrONE = a_ptr;
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	9a 81       	ldd	r25, Y+2	; 0x02
    294c:	90 93 43 01 	sts	0x0143, r25
    2950:	80 93 42 01 	sts	0x0142, r24
}
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	cf 91       	pop	r28
    295a:	df 91       	pop	r29
    295c:	08 95       	ret

0000295e <Timer1_deInit>:
/*
 * Description:
 * De-Initializing Everything
 */
void Timer1_deInit()
{
    295e:	df 93       	push	r29
    2960:	cf 93       	push	r28
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    2966:	ef e4       	ldi	r30, 0x4F	; 79
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	10 82       	st	Z, r1
	TCCR1B = 0;
    296c:	ee e4       	ldi	r30, 0x4E	; 78
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	10 82       	st	Z, r1
	TIMSK = TIMSK & 0xC3;
    2972:	a9 e5       	ldi	r26, 0x59	; 89
    2974:	b0 e0       	ldi	r27, 0x00	; 0
    2976:	e9 e5       	ldi	r30, 0x59	; 89
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	80 81       	ld	r24, Z
    297c:	83 7c       	andi	r24, 0xC3	; 195
    297e:	8c 93       	st	X, r24
}
    2980:	cf 91       	pop	r28
    2982:	df 91       	pop	r29
    2984:	08 95       	ret

00002986 <Timer2_Init>:
/**------------------------Timer TWO-----------------------**/
/*
 * Initializing Timer2
 */
void Timer2_Init(const Timer2_ConfigType *Config_Ptr)
{
    2986:	df 93       	push	r29
    2988:	cf 93       	push	r28
    298a:	00 d0       	rcall	.+0      	; 0x298c <Timer2_Init+0x6>
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
    2990:	9a 83       	std	Y+2, r25	; 0x02
    2992:	89 83       	std	Y+1, r24	; 0x01
	/* Selecting Force Output Compare */
		TCCR2 = (TCCR2 & 0x7F) | ((Config_Ptr->Timer2_ForceCompare)<<FOC2);
    2994:	a5 e4       	ldi	r26, 0x45	; 69
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	e5 e4       	ldi	r30, 0x45	; 69
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	28 2f       	mov	r18, r24
    29a0:	2f 77       	andi	r18, 0x7F	; 127
    29a2:	e9 81       	ldd	r30, Y+1	; 0x01
    29a4:	fa 81       	ldd	r31, Y+2	; 0x02
    29a6:	81 81       	ldd	r24, Z+1	; 0x01
    29a8:	88 2f       	mov	r24, r24
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	96 95       	lsr	r25
    29ae:	98 2f       	mov	r25, r24
    29b0:	88 27       	eor	r24, r24
    29b2:	97 95       	ror	r25
    29b4:	87 95       	ror	r24
    29b6:	82 2b       	or	r24, r18
    29b8:	8c 93       	st	X, r24

		/* Selecting the WaveForm Generation */
		TCCR2 = (TCCR2 & 0xBF) | (((Config_Ptr->Timer2_WaveForm)<<7)>>1);
    29ba:	a5 e4       	ldi	r26, 0x45	; 69
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e5 e4       	ldi	r30, 0x45	; 69
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	28 2f       	mov	r18, r24
    29c6:	2f 7b       	andi	r18, 0xBF	; 191
    29c8:	e9 81       	ldd	r30, Y+1	; 0x01
    29ca:	fa 81       	ldd	r31, Y+2	; 0x02
    29cc:	82 81       	ldd	r24, Z+2	; 0x02
    29ce:	88 2f       	mov	r24, r24
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	96 95       	lsr	r25
    29d4:	98 2f       	mov	r25, r24
    29d6:	88 27       	eor	r24, r24
    29d8:	97 95       	ror	r25
    29da:	87 95       	ror	r24
    29dc:	95 95       	asr	r25
    29de:	87 95       	ror	r24
    29e0:	82 2b       	or	r24, r18
    29e2:	8c 93       	st	X, r24
		TCCR2 = (TCCR2 & 0xF7) | (((Config_Ptr->Timer2_WaveForm)>>1)<<WGM21);
    29e4:	a5 e4       	ldi	r26, 0x45	; 69
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	e5 e4       	ldi	r30, 0x45	; 69
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	28 2f       	mov	r18, r24
    29f0:	27 7f       	andi	r18, 0xF7	; 247
    29f2:	e9 81       	ldd	r30, Y+1	; 0x01
    29f4:	fa 81       	ldd	r31, Y+2	; 0x02
    29f6:	82 81       	ldd	r24, Z+2	; 0x02
    29f8:	86 95       	lsr	r24
    29fa:	88 2f       	mov	r24, r24
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	88 0f       	add	r24, r24
    2a04:	99 1f       	adc	r25, r25
    2a06:	88 0f       	add	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	82 2b       	or	r24, r18
    2a0c:	8c 93       	st	X, r24

		/* Select Compare Match output mode */
		TCCR2 = (TCCR2 & 0xCF) | ((Config_Ptr->Timer2_CompareMode)<<4);
    2a0e:	a5 e4       	ldi	r26, 0x45	; 69
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	e5 e4       	ldi	r30, 0x45	; 69
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	28 2f       	mov	r18, r24
    2a1a:	2f 7c       	andi	r18, 0xCF	; 207
    2a1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a20:	83 81       	ldd	r24, Z+3	; 0x03
    2a22:	88 2f       	mov	r24, r24
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	82 95       	swap	r24
    2a28:	92 95       	swap	r25
    2a2a:	90 7f       	andi	r25, 0xF0	; 240
    2a2c:	98 27       	eor	r25, r24
    2a2e:	80 7f       	andi	r24, 0xF0	; 240
    2a30:	98 27       	eor	r25, r24
    2a32:	82 2b       	or	r24, r18
    2a34:	8c 93       	st	X, r24

		/* Select the Prescaler Value */
		TCCR2 = (TCCR2 & 0xF8) | ((Config_Ptr->Timer2_PreScaler));
    2a36:	a5 e4       	ldi	r26, 0x45	; 69
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	e5 e4       	ldi	r30, 0x45	; 69
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	98 2f       	mov	r25, r24
    2a42:	98 7f       	andi	r25, 0xF8	; 248
    2a44:	e9 81       	ldd	r30, Y+1	; 0x01
    2a46:	fa 81       	ldd	r31, Y+2	; 0x02
    2a48:	80 81       	ld	r24, Z
    2a4a:	89 2b       	or	r24, r25
    2a4c:	8c 93       	st	X, r24

		/* Choosing the OVF value */
		TCNT0 = Config_Ptr->Timer2_TCNT2_Value;
    2a4e:	a2 e5       	ldi	r26, 0x52	; 82
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	e9 81       	ldd	r30, Y+1	; 0x01
    2a54:	fa 81       	ldd	r31, Y+2	; 0x02
    2a56:	86 81       	ldd	r24, Z+6	; 0x06
    2a58:	8c 93       	st	X, r24

		/* Choosing OCR2 value */
		OCR2 = Config_Ptr->Timer2_OCR2_Value;
    2a5a:	a3 e4       	ldi	r26, 0x43	; 67
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a60:	fa 81       	ldd	r31, Y+2	; 0x02
    2a62:	87 81       	ldd	r24, Z+7	; 0x07
    2a64:	8c 93       	st	X, r24

		/* Enabling Interrupt for Compare */
		TIMSK = (TIMSK & 0x7F) | ((Config_Ptr->Timer2_COMP_INT)<<OCIE2);
    2a66:	a9 e5       	ldi	r26, 0x59	; 89
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	e9 e5       	ldi	r30, 0x59	; 89
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	28 2f       	mov	r18, r24
    2a72:	2f 77       	andi	r18, 0x7F	; 127
    2a74:	e9 81       	ldd	r30, Y+1	; 0x01
    2a76:	fa 81       	ldd	r31, Y+2	; 0x02
    2a78:	84 81       	ldd	r24, Z+4	; 0x04
    2a7a:	88 2f       	mov	r24, r24
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	96 95       	lsr	r25
    2a80:	98 2f       	mov	r25, r24
    2a82:	88 27       	eor	r24, r24
    2a84:	97 95       	ror	r25
    2a86:	87 95       	ror	r24
    2a88:	82 2b       	or	r24, r18
    2a8a:	8c 93       	st	X, r24

		/* Enabling Interrupts for OVF */
		TIMSK = (TIMSK & 0xBF) | ((Config_Ptr->Timer2_OVF_INT));
    2a8c:	a9 e5       	ldi	r26, 0x59	; 89
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	e9 e5       	ldi	r30, 0x59	; 89
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	98 2f       	mov	r25, r24
    2a98:	9f 7b       	andi	r25, 0xBF	; 191
    2a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a9e:	85 81       	ldd	r24, Z+5	; 0x05
    2aa0:	89 2b       	or	r24, r25
    2aa2:	8c 93       	st	X, r24
}
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <Timer2_deInit>:
/*
 * Description:
 * De-Initializing Everything
 */
void Timer2_deInit(void)
{
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0;
    2ab6:	e5 e4       	ldi	r30, 0x45	; 69
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	10 82       	st	Z, r1
	TIMSK = (TIMSK & 0x3F);
    2abc:	a9 e5       	ldi	r26, 0x59	; 89
    2abe:	b0 e0       	ldi	r27, 0x00	; 0
    2ac0:	e9 e5       	ldi	r30, 0x59	; 89
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	8f 73       	andi	r24, 0x3F	; 63
    2ac8:	8c 93       	st	X, r24
}
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	08 95       	ret

00002ad0 <Timer2_setCallBackTWO>:

/*-------------------------------------------------------------------*/
/* Description: Function to set the Call Back function address. */
void Timer2_setCallBackTWO(void(*a_ptr)(void))
{
    2ad0:	df 93       	push	r29
    2ad2:	cf 93       	push	r28
    2ad4:	00 d0       	rcall	.+0      	; 0x2ad6 <Timer2_setCallBackTWO+0x6>
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	9a 83       	std	Y+2, r25	; 0x02
    2adc:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrTWO = a_ptr;
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae2:	90 93 45 01 	sts	0x0145, r25
    2ae6:	80 93 44 01 	sts	0x0144, r24
}
    2aea:	0f 90       	pop	r0
    2aec:	0f 90       	pop	r0
    2aee:	cf 91       	pop	r28
    2af0:	df 91       	pop	r29
    2af2:	08 95       	ret

00002af4 <Keypad_getPressedKey>:

/**-------------------------Function Definition Section-------------**/

/* Public functions definitions: */
uint8 Keypad_getPressedKey()
{
    2af4:	df 93       	push	r29
    2af6:	cf 93       	push	r28
    2af8:	00 d0       	rcall	.+0      	; 0x2afa <Keypad_getPressedKey+0x6>
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col;

	/*------------** Setting All pins as input pins **---------------------*/
	/* Setting Col directions */
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID,   PIN_INPUT);
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	64 e0       	ldi	r22, 0x04	; 4
    2b02:	40 e0       	ldi	r20, 0x00	; 0
    2b04:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	65 e0       	ldi	r22, 0x05	; 5
    2b0c:	40 e0       	ldi	r20, 0x00	; 0
    2b0e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	66 e0       	ldi	r22, 0x06	; 6
    2b16:	40 e0       	ldi	r20, 0x00	; 0
    2b18:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

#if(KEYPAD_NUM_COLS == 4) /* If it's 4x4 keypad then add the last Col */
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	67 e0       	ldi	r22, 0x07	; 7
    2b20:	40 e0       	ldi	r20, 0x00	; 0
    2b22:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif

	/* Setting Row direction */
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID,   PIN_INPUT);
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	60 e0       	ldi	r22, 0x00	; 0
    2b2a:	40 e0       	ldi	r20, 0x00	; 0
    2b2c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	61 e0       	ldi	r22, 0x01	; 1
    2b34:	40 e0       	ldi	r20, 0x00	; 0
    2b36:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	62 e0       	ldi	r22, 0x02	; 2
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	63 e0       	ldi	r22, 0x03	; 3
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/*--------------------------------------------------------*/

	/*-----------*Using Internal pull method then let all pins be logic high*--*/
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, 	 LOGIC_HIGH);
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	60 e0       	ldi	r22, 0x00	; 0
    2b52:	41 e0       	ldi	r20, 0x01	; 1
    2b54:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, LOGIC_HIGH);
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	61 e0       	ldi	r22, 0x01	; 1
    2b5c:	41 e0       	ldi	r20, 0x01	; 1
    2b5e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, LOGIC_HIGH);
    2b62:	81 e0       	ldi	r24, 0x01	; 1
    2b64:	62 e0       	ldi	r22, 0x02	; 2
    2b66:	41 e0       	ldi	r20, 0x01	; 1
    2b68:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, LOGIC_HIGH);
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	63 e0       	ldi	r22, 0x03	; 3
    2b70:	41 e0       	ldi	r20, 0x01	; 1
    2b72:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID,   LOGIC_HIGH);
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	64 e0       	ldi	r22, 0x04	; 4
    2b7a:	41 e0       	ldi	r20, 0x01	; 1
    2b7c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, LOGIC_HIGH);
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	65 e0       	ldi	r22, 0x05	; 5
    2b84:	41 e0       	ldi	r20, 0x01	; 1
    2b86:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, LOGIC_HIGH);
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	66 e0       	ldi	r22, 0x06	; 6
    2b8e:	41 e0       	ldi	r20, 0x01	; 1
    2b90:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
#if(KEYPAD_NUM_COLS == 4) /* If it's 4x4 keypad then add the last Col */
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, LOGIC_HIGH);
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	67 e0       	ldi	r22, 0x07	; 7
    2b98:	41 e0       	ldi	r20, 0x01	; 1
    2b9a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	/*--------------------------------------------------------*/

	while(1)
	{

		for(col = 0; col < KEYPAD_NUM_COLS; col++ )
    2b9e:	19 82       	std	Y+1, r1	; 0x01
    2ba0:	43 c0       	rjmp	.+134    	; 0x2c28 <Keypad_getPressedKey+0x134>
		{
			/* one col is output and the rest are inputs */
			GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col, PIN_OUTPUT);
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
    2ba4:	98 2f       	mov	r25, r24
    2ba6:	9c 5f       	subi	r25, 0xFC	; 252
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	69 2f       	mov	r22, r25
    2bac:	41 e0       	ldi	r20, 0x01	; 1
    2bae:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			/* Make this col only LOGIC low */
			GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col, LOGIC_LOW);
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	98 2f       	mov	r25, r24
    2bb6:	9c 5f       	subi	r25, 0xFC	; 252
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	69 2f       	mov	r22, r25
    2bbc:	40 e0       	ldi	r20, 0x00	; 0
    2bbe:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(row = 0; row < KEYPAD_NUM_ROWS; row++)
    2bc2:	1a 82       	std	Y+2, r1	; 0x02
    2bc4:	1b c0       	rjmp	.+54     	; 0x2bfc <Keypad_getPressedKey+0x108>
			{

				if(!GPIO_readPin(KEYPAD_ROW_PORT_ID, row))
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	6a 81       	ldd	r22, Y+2	; 0x02
    2bca:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    2bce:	88 23       	and	r24, r24
    2bd0:	91 f4       	brne	.+36     	; 0x2bf6 <Keypad_getPressedKey+0x102>
				{

#if(KEYPAD_NUM_COLS == 3)
					return Keypad_4x3_adjustSwitchNumber((row*KEYPAD_NUM_COLS)+col+1);
#elif(KEYPAD_NUM_COLS == 4)
					return Keypad_4x4_adjustSwitchNumber((row*KEYPAD_NUM_COLS)+col+1);
    2bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd4:	88 2f       	mov	r24, r24
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	88 0f       	add	r24, r24
    2bda:	99 1f       	adc	r25, r25
    2bdc:	88 0f       	add	r24, r24
    2bde:	99 1f       	adc	r25, r25
    2be0:	98 2f       	mov	r25, r24
    2be2:	89 81       	ldd	r24, Y+1	; 0x01
    2be4:	89 0f       	add	r24, r25
    2be6:	8f 5f       	subi	r24, 0xFF	; 255
    2be8:	0e 94 19 16 	call	0x2c32	; 0x2c32 <Keypad_4x4_adjustSwitchNumber>
		}   /* End for(col=0;col<NUM_COL;col++) */


	}   /* End while() */

}   /* End Keypad_getPressedKey() function */
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret
			/* one col is output and the rest are inputs */
			GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col, PIN_OUTPUT);
			/* Make this col only LOGIC low */
			GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col, LOGIC_LOW);

			for(row = 0; row < KEYPAD_NUM_ROWS; row++)
    2bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf8:	8f 5f       	subi	r24, 0xFF	; 255
    2bfa:	8a 83       	std	Y+2, r24	; 0x02
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	84 30       	cpi	r24, 0x04	; 4
    2c00:	10 f3       	brcs	.-60     	; 0x2bc6 <Keypad_getPressedKey+0xd2>
			/*--------------------------------------------------------*/

			/* Returning the pins as it was before choosing another col */

			/* Set pin back as INPUT pin */
			GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col, PIN_INPUT);
    2c02:	89 81       	ldd	r24, Y+1	; 0x01
    2c04:	98 2f       	mov	r25, r24
    2c06:	9c 5f       	subi	r25, 0xFC	; 252
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	69 2f       	mov	r22, r25
    2c0c:	40 e0       	ldi	r20, 0x00	; 0
    2c0e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			/* Activate the pull up internal resistance */
			GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col, LOGIC_HIGH);
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	98 2f       	mov	r25, r24
    2c16:	9c 5f       	subi	r25, 0xFC	; 252
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	69 2f       	mov	r22, r25
    2c1c:	41 e0       	ldi	r20, 0x01	; 1
    2c1e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	/*--------------------------------------------------------*/

	while(1)
	{

		for(col = 0; col < KEYPAD_NUM_COLS; col++ )
    2c22:	89 81       	ldd	r24, Y+1	; 0x01
    2c24:	8f 5f       	subi	r24, 0xFF	; 255
    2c26:	89 83       	std	Y+1, r24	; 0x01
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	84 30       	cpi	r24, 0x04	; 4
    2c2c:	08 f4       	brcc	.+2      	; 0x2c30 <Keypad_getPressedKey+0x13c>
    2c2e:	b9 cf       	rjmp	.-142    	; 0x2ba2 <Keypad_getPressedKey+0xae>
    2c30:	b6 cf       	rjmp	.-148    	; 0x2b9e <Keypad_getPressedKey+0xaa>

00002c32 <Keypad_4x4_adjustSwitchNumber>:
/*
 * A function to make the keypad fit it's 4x4
 * design in proteus
 */
static uint8 Keypad_4x4_adjustSwitchNumber(uint8 buttonNumber)
{
    2c32:	df 93       	push	r29
    2c34:	cf 93       	push	r28
    2c36:	00 d0       	rcall	.+0      	; 0x2c38 <Keypad_4x4_adjustSwitchNumber+0x6>
    2c38:	00 d0       	rcall	.+0      	; 0x2c3a <Keypad_4x4_adjustSwitchNumber+0x8>
    2c3a:	0f 92       	push	r0
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
    2c40:	89 83       	std	Y+1, r24	; 0x01

	switch(buttonNumber)
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	28 2f       	mov	r18, r24
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	3c 83       	std	Y+4, r19	; 0x04
    2c4a:	2b 83       	std	Y+3, r18	; 0x03
    2c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c50:	88 30       	cpi	r24, 0x08	; 8
    2c52:	91 05       	cpc	r25, r1
    2c54:	09 f4       	brne	.+2      	; 0x2c58 <Keypad_4x4_adjustSwitchNumber+0x26>
    2c56:	70 c0       	rjmp	.+224    	; 0x2d38 <Keypad_4x4_adjustSwitchNumber+0x106>
    2c58:	2b 81       	ldd	r18, Y+3	; 0x03
    2c5a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c5c:	29 30       	cpi	r18, 0x09	; 9
    2c5e:	31 05       	cpc	r19, r1
    2c60:	5c f5       	brge	.+86     	; 0x2cb8 <Keypad_4x4_adjustSwitchNumber+0x86>
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	9c 81       	ldd	r25, Y+4	; 0x04
    2c66:	84 30       	cpi	r24, 0x04	; 4
    2c68:	91 05       	cpc	r25, r1
    2c6a:	09 f4       	brne	.+2      	; 0x2c6e <Keypad_4x4_adjustSwitchNumber+0x3c>
    2c6c:	59 c0       	rjmp	.+178    	; 0x2d20 <Keypad_4x4_adjustSwitchNumber+0xee>
    2c6e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c70:	3c 81       	ldd	r19, Y+4	; 0x04
    2c72:	25 30       	cpi	r18, 0x05	; 5
    2c74:	31 05       	cpc	r19, r1
    2c76:	9c f4       	brge	.+38     	; 0x2c9e <Keypad_4x4_adjustSwitchNumber+0x6c>
    2c78:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7c:	82 30       	cpi	r24, 0x02	; 2
    2c7e:	91 05       	cpc	r25, r1
    2c80:	09 f4       	brne	.+2      	; 0x2c84 <Keypad_4x4_adjustSwitchNumber+0x52>
    2c82:	48 c0       	rjmp	.+144    	; 0x2d14 <Keypad_4x4_adjustSwitchNumber+0xe2>
    2c84:	2b 81       	ldd	r18, Y+3	; 0x03
    2c86:	3c 81       	ldd	r19, Y+4	; 0x04
    2c88:	23 30       	cpi	r18, 0x03	; 3
    2c8a:	31 05       	cpc	r19, r1
    2c8c:	0c f0       	brlt	.+2      	; 0x2c90 <Keypad_4x4_adjustSwitchNumber+0x5e>
    2c8e:	45 c0       	rjmp	.+138    	; 0x2d1a <Keypad_4x4_adjustSwitchNumber+0xe8>
    2c90:	8b 81       	ldd	r24, Y+3	; 0x03
    2c92:	9c 81       	ldd	r25, Y+4	; 0x04
    2c94:	81 30       	cpi	r24, 0x01	; 1
    2c96:	91 05       	cpc	r25, r1
    2c98:	09 f4       	brne	.+2      	; 0x2c9c <Keypad_4x4_adjustSwitchNumber+0x6a>
    2c9a:	39 c0       	rjmp	.+114    	; 0x2d0e <Keypad_4x4_adjustSwitchNumber+0xdc>
    2c9c:	67 c0       	rjmp	.+206    	; 0x2d6c <Keypad_4x4_adjustSwitchNumber+0x13a>
    2c9e:	2b 81       	ldd	r18, Y+3	; 0x03
    2ca0:	3c 81       	ldd	r19, Y+4	; 0x04
    2ca2:	26 30       	cpi	r18, 0x06	; 6
    2ca4:	31 05       	cpc	r19, r1
    2ca6:	09 f4       	brne	.+2      	; 0x2caa <Keypad_4x4_adjustSwitchNumber+0x78>
    2ca8:	41 c0       	rjmp	.+130    	; 0x2d2c <Keypad_4x4_adjustSwitchNumber+0xfa>
    2caa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cac:	9c 81       	ldd	r25, Y+4	; 0x04
    2cae:	87 30       	cpi	r24, 0x07	; 7
    2cb0:	91 05       	cpc	r25, r1
    2cb2:	0c f0       	brlt	.+2      	; 0x2cb6 <Keypad_4x4_adjustSwitchNumber+0x84>
    2cb4:	3e c0       	rjmp	.+124    	; 0x2d32 <Keypad_4x4_adjustSwitchNumber+0x100>
    2cb6:	37 c0       	rjmp	.+110    	; 0x2d26 <Keypad_4x4_adjustSwitchNumber+0xf4>
    2cb8:	2b 81       	ldd	r18, Y+3	; 0x03
    2cba:	3c 81       	ldd	r19, Y+4	; 0x04
    2cbc:	2c 30       	cpi	r18, 0x0C	; 12
    2cbe:	31 05       	cpc	r19, r1
    2cc0:	09 f4       	brne	.+2      	; 0x2cc4 <Keypad_4x4_adjustSwitchNumber+0x92>
    2cc2:	46 c0       	rjmp	.+140    	; 0x2d50 <Keypad_4x4_adjustSwitchNumber+0x11e>
    2cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc8:	8d 30       	cpi	r24, 0x0D	; 13
    2cca:	91 05       	cpc	r25, r1
    2ccc:	5c f4       	brge	.+22     	; 0x2ce4 <Keypad_4x4_adjustSwitchNumber+0xb2>
    2cce:	2b 81       	ldd	r18, Y+3	; 0x03
    2cd0:	3c 81       	ldd	r19, Y+4	; 0x04
    2cd2:	2a 30       	cpi	r18, 0x0A	; 10
    2cd4:	31 05       	cpc	r19, r1
    2cd6:	b1 f1       	breq	.+108    	; 0x2d44 <Keypad_4x4_adjustSwitchNumber+0x112>
    2cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cda:	9c 81       	ldd	r25, Y+4	; 0x04
    2cdc:	8b 30       	cpi	r24, 0x0B	; 11
    2cde:	91 05       	cpc	r25, r1
    2ce0:	a4 f5       	brge	.+104    	; 0x2d4a <Keypad_4x4_adjustSwitchNumber+0x118>
    2ce2:	2d c0       	rjmp	.+90     	; 0x2d3e <Keypad_4x4_adjustSwitchNumber+0x10c>
    2ce4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ce6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ce8:	2e 30       	cpi	r18, 0x0E	; 14
    2cea:	31 05       	cpc	r19, r1
    2cec:	b9 f1       	breq	.+110    	; 0x2d5c <Keypad_4x4_adjustSwitchNumber+0x12a>
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf2:	8e 30       	cpi	r24, 0x0E	; 14
    2cf4:	91 05       	cpc	r25, r1
    2cf6:	7c f1       	brlt	.+94     	; 0x2d56 <Keypad_4x4_adjustSwitchNumber+0x124>
    2cf8:	2b 81       	ldd	r18, Y+3	; 0x03
    2cfa:	3c 81       	ldd	r19, Y+4	; 0x04
    2cfc:	2f 30       	cpi	r18, 0x0F	; 15
    2cfe:	31 05       	cpc	r19, r1
    2d00:	79 f1       	breq	.+94     	; 0x2d60 <Keypad_4x4_adjustSwitchNumber+0x12e>
    2d02:	8b 81       	ldd	r24, Y+3	; 0x03
    2d04:	9c 81       	ldd	r25, Y+4	; 0x04
    2d06:	80 31       	cpi	r24, 0x10	; 16
    2d08:	91 05       	cpc	r25, r1
    2d0a:	69 f1       	breq	.+90     	; 0x2d66 <Keypad_4x4_adjustSwitchNumber+0x134>
    2d0c:	2f c0       	rjmp	.+94     	; 0x2d6c <Keypad_4x4_adjustSwitchNumber+0x13a>
	{
	case 1:
		return 7;
    2d0e:	97 e0       	ldi	r25, 0x07	; 7
    2d10:	9a 83       	std	Y+2, r25	; 0x02
    2d12:	2d c0       	rjmp	.+90     	; 0x2d6e <Keypad_4x4_adjustSwitchNumber+0x13c>
		break;
	case 2:
		return 8;
    2d14:	28 e0       	ldi	r18, 0x08	; 8
    2d16:	2a 83       	std	Y+2, r18	; 0x02
    2d18:	2a c0       	rjmp	.+84     	; 0x2d6e <Keypad_4x4_adjustSwitchNumber+0x13c>
		break;
	case 3:
		return 9;
    2d1a:	39 e0       	ldi	r19, 0x09	; 9
    2d1c:	3a 83       	std	Y+2, r19	; 0x02
    2d1e:	27 c0       	rjmp	.+78     	; 0x2d6e <Keypad_4x4_adjustSwitchNumber+0x13c>
		break;
	case 4:
		return'/';
    2d20:	8f e2       	ldi	r24, 0x2F	; 47
    2d22:	8a 83       	std	Y+2, r24	; 0x02
    2d24:	24 c0       	rjmp	.+72     	; 0x2d6e <Keypad_4x4_adjustSwitchNumber+0x13c>
		break;
	case 5:
		return 4;
    2d26:	94 e0       	ldi	r25, 0x04	; 4
    2d28:	9a 83       	std	Y+2, r25	; 0x02
    2d2a:	21 c0       	rjmp	.+66     	; 0x2d6e <Keypad_4x4_adjustSwitchNumber+0x13c>
		break;
	case 6:
		return 5;
    2d2c:	25 e0       	ldi	r18, 0x05	; 5
    2d2e:	2a 83       	std	Y+2, r18	; 0x02
    2d30:	1e c0       	rjmp	.+60     	; 0x2d6e <Keypad_4x4_adjustSwitchNumber+0x13c>
		break;
	case 7:
		return 6;
    2d32:	36 e0       	ldi	r19, 0x06	; 6
    2d34:	3a 83       	std	Y+2, r19	; 0x02
    2d36:	1b c0       	rjmp	.+54     	; 0x2d6e <Keypad_4x4_adjustSwitchNumber+0x13c>
		break;
	case 8:
		return'*';
    2d38:	8a e2       	ldi	r24, 0x2A	; 42
    2d3a:	8a 83       	std	Y+2, r24	; 0x02
    2d3c:	18 c0       	rjmp	.+48     	; 0x2d6e <Keypad_4x4_adjustSwitchNumber+0x13c>
		break;
	case 9:
		return 1;
    2d3e:	91 e0       	ldi	r25, 0x01	; 1
    2d40:	9a 83       	std	Y+2, r25	; 0x02
    2d42:	15 c0       	rjmp	.+42     	; 0x2d6e <Keypad_4x4_adjustSwitchNumber+0x13c>
		break;
	case 10:
		return 2;
    2d44:	22 e0       	ldi	r18, 0x02	; 2
    2d46:	2a 83       	std	Y+2, r18	; 0x02
    2d48:	12 c0       	rjmp	.+36     	; 0x2d6e <Keypad_4x4_adjustSwitchNumber+0x13c>
		break;
	case 11:
		return 3;
    2d4a:	33 e0       	ldi	r19, 0x03	; 3
    2d4c:	3a 83       	std	Y+2, r19	; 0x02
    2d4e:	0f c0       	rjmp	.+30     	; 0x2d6e <Keypad_4x4_adjustSwitchNumber+0x13c>
		break;
	case 12:
		return'-';
    2d50:	8d e2       	ldi	r24, 0x2D	; 45
    2d52:	8a 83       	std	Y+2, r24	; 0x02
    2d54:	0c c0       	rjmp	.+24     	; 0x2d6e <Keypad_4x4_adjustSwitchNumber+0x13c>
		break;
	case 13:
		return 13;
    2d56:	9d e0       	ldi	r25, 0x0D	; 13
    2d58:	9a 83       	std	Y+2, r25	; 0x02
    2d5a:	09 c0       	rjmp	.+18     	; 0x2d6e <Keypad_4x4_adjustSwitchNumber+0x13c>
		break;
	case 14:
		return 0;
    2d5c:	1a 82       	std	Y+2, r1	; 0x02
    2d5e:	07 c0       	rjmp	.+14     	; 0x2d6e <Keypad_4x4_adjustSwitchNumber+0x13c>
		break;
	case 15:
		return'=';
    2d60:	2d e3       	ldi	r18, 0x3D	; 61
    2d62:	2a 83       	std	Y+2, r18	; 0x02
    2d64:	04 c0       	rjmp	.+8      	; 0x2d6e <Keypad_4x4_adjustSwitchNumber+0x13c>
		break;
	case 16:
		return '+';
    2d66:	3b e2       	ldi	r19, 0x2B	; 43
    2d68:	3a 83       	std	Y+2, r19	; 0x02
    2d6a:	01 c0       	rjmp	.+2      	; 0x2d6e <Keypad_4x4_adjustSwitchNumber+0x13c>
    2d6c:	02 c0       	rjmp	.+4      	; 0x2d72 <Keypad_4x4_adjustSwitchNumber+0x140>
		break;
	}   /* End switch */

}   /* End Keypad_4x4_adjustSwitchNumber() function */
    2d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d70:	8d 83       	std	Y+5, r24	; 0x05
    2d72:	8d 81       	ldd	r24, Y+5	; 0x05
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	0f 90       	pop	r0
    2d7c:	0f 90       	pop	r0
    2d7e:	cf 91       	pop	r28
    2d80:	df 91       	pop	r29
    2d82:	08 95       	ret

00002d84 <UART_init>:
/*
 * Description:
 *
 */
void UART_init(UART_ConfigType *Config_Ptr)
{
    2d84:	ef 92       	push	r14
    2d86:	ff 92       	push	r15
    2d88:	0f 93       	push	r16
    2d8a:	1f 93       	push	r17
    2d8c:	df 93       	push	r29
    2d8e:	cf 93       	push	r28
    2d90:	00 d0       	rcall	.+0      	; 0x2d92 <UART_init+0xe>
    2d92:	00 d0       	rcall	.+0      	; 0x2d94 <UART_init+0x10>
    2d94:	cd b7       	in	r28, 0x3d	; 61
    2d96:	de b7       	in	r29, 0x3e	; 62
    2d98:	9c 83       	std	Y+4, r25	; 0x04
    2d9a:	8b 83       	std	Y+3, r24	; 0x03
	/**-------------------------Local Variables---------------------**/
	/* UBRR_VALUE will be used to set the baud rate later */
	uint16 a_ubrr_value = 0;
    2d9c:	1a 82       	std	Y+2, r1	; 0x02
    2d9e:	19 82       	std	Y+1, r1	; 0x01
	/**-------------------------END Local Variables-----------------**/

	/* Setting the transmission speed */
	UCSRA = (UCSRA & 0xFD) | ((Config_Ptr->transmitSpeed)<<U2X);
    2da0:	ab e2       	ldi	r26, 0x2B	; 43
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	eb e2       	ldi	r30, 0x2B	; 43
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 81       	ld	r24, Z
    2daa:	28 2f       	mov	r18, r24
    2dac:	2d 7f       	andi	r18, 0xFD	; 253
    2dae:	eb 81       	ldd	r30, Y+3	; 0x03
    2db0:	fc 81       	ldd	r31, Y+4	; 0x04
    2db2:	80 81       	ld	r24, Z
    2db4:	88 2f       	mov	r24, r24
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	88 0f       	add	r24, r24
    2dba:	99 1f       	adc	r25, r25
    2dbc:	82 2b       	or	r24, r18
    2dbe:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the INTERRUPT for RX */
	UCSRB = (UCSRB & 0x7F) | ((Config_Ptr->receiverINT)<<RXCIE);
    2dc0:	aa e2       	ldi	r26, 0x2A	; 42
    2dc2:	b0 e0       	ldi	r27, 0x00	; 0
    2dc4:	ea e2       	ldi	r30, 0x2A	; 42
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	80 81       	ld	r24, Z
    2dca:	28 2f       	mov	r18, r24
    2dcc:	2f 77       	andi	r18, 0x7F	; 127
    2dce:	eb 81       	ldd	r30, Y+3	; 0x03
    2dd0:	fc 81       	ldd	r31, Y+4	; 0x04
    2dd2:	81 81       	ldd	r24, Z+1	; 0x01
    2dd4:	88 2f       	mov	r24, r24
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	96 95       	lsr	r25
    2dda:	98 2f       	mov	r25, r24
    2ddc:	88 27       	eor	r24, r24
    2dde:	97 95       	ror	r25
    2de0:	87 95       	ror	r24
    2de2:	82 2b       	or	r24, r18
    2de4:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the INTERRUPT for TX */
	UCSRB = (UCSRB & 0x7F) | ((Config_Ptr->transmitterINT)<<TXCIE);
    2de6:	aa e2       	ldi	r26, 0x2A	; 42
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	ea e2       	ldi	r30, 0x2A	; 42
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	28 2f       	mov	r18, r24
    2df2:	2f 77       	andi	r18, 0x7F	; 127
    2df4:	eb 81       	ldd	r30, Y+3	; 0x03
    2df6:	fc 81       	ldd	r31, Y+4	; 0x04
    2df8:	82 81       	ldd	r24, Z+2	; 0x02
    2dfa:	88 2f       	mov	r24, r24
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	00 24       	eor	r0, r0
    2e00:	96 95       	lsr	r25
    2e02:	87 95       	ror	r24
    2e04:	07 94       	ror	r0
    2e06:	96 95       	lsr	r25
    2e08:	87 95       	ror	r24
    2e0a:	07 94       	ror	r0
    2e0c:	98 2f       	mov	r25, r24
    2e0e:	80 2d       	mov	r24, r0
    2e10:	82 2b       	or	r24, r18
    2e12:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the data register empty INTERRUPT */
	UCSRB = (UCSRB & 0xDF) | ((Config_Ptr->emptyINT)<<UDRIE);
    2e14:	aa e2       	ldi	r26, 0x2A	; 42
    2e16:	b0 e0       	ldi	r27, 0x00	; 0
    2e18:	ea e2       	ldi	r30, 0x2A	; 42
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	80 81       	ld	r24, Z
    2e1e:	28 2f       	mov	r18, r24
    2e20:	2f 7d       	andi	r18, 0xDF	; 223
    2e22:	eb 81       	ldd	r30, Y+3	; 0x03
    2e24:	fc 81       	ldd	r31, Y+4	; 0x04
    2e26:	83 81       	ldd	r24, Z+3	; 0x03
    2e28:	88 2f       	mov	r24, r24
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	88 0f       	add	r24, r24
    2e2e:	99 1f       	adc	r25, r25
    2e30:	82 95       	swap	r24
    2e32:	92 95       	swap	r25
    2e34:	90 7f       	andi	r25, 0xF0	; 240
    2e36:	98 27       	eor	r25, r24
    2e38:	80 7f       	andi	r24, 0xF0	; 240
    2e3a:	98 27       	eor	r25, r24
    2e3c:	82 2b       	or	r24, r18
    2e3e:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Receiver Enable */
	UCSRB = (UCSRB & 0xEF) | ((Config_Ptr->receiverEN)<<RXEN);
    2e40:	aa e2       	ldi	r26, 0x2A	; 42
    2e42:	b0 e0       	ldi	r27, 0x00	; 0
    2e44:	ea e2       	ldi	r30, 0x2A	; 42
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	80 81       	ld	r24, Z
    2e4a:	28 2f       	mov	r18, r24
    2e4c:	2f 7e       	andi	r18, 0xEF	; 239
    2e4e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e50:	fc 81       	ldd	r31, Y+4	; 0x04
    2e52:	84 81       	ldd	r24, Z+4	; 0x04
    2e54:	88 2f       	mov	r24, r24
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	82 95       	swap	r24
    2e5a:	92 95       	swap	r25
    2e5c:	90 7f       	andi	r25, 0xF0	; 240
    2e5e:	98 27       	eor	r25, r24
    2e60:	80 7f       	andi	r24, 0xF0	; 240
    2e62:	98 27       	eor	r25, r24
    2e64:	82 2b       	or	r24, r18
    2e66:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Transmitter Enable */
	UCSRB = (UCSRB & 0xF7) | ((Config_Ptr->transmitterEN)<<TXEN);
    2e68:	aa e2       	ldi	r26, 0x2A	; 42
    2e6a:	b0 e0       	ldi	r27, 0x00	; 0
    2e6c:	ea e2       	ldi	r30, 0x2A	; 42
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	80 81       	ld	r24, Z
    2e72:	28 2f       	mov	r18, r24
    2e74:	27 7f       	andi	r18, 0xF7	; 247
    2e76:	eb 81       	ldd	r30, Y+3	; 0x03
    2e78:	fc 81       	ldd	r31, Y+4	; 0x04
    2e7a:	85 81       	ldd	r24, Z+5	; 0x05
    2e7c:	88 2f       	mov	r24, r24
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	88 0f       	add	r24, r24
    2e82:	99 1f       	adc	r25, r25
    2e84:	88 0f       	add	r24, r24
    2e86:	99 1f       	adc	r25, r25
    2e88:	88 0f       	add	r24, r24
    2e8a:	99 1f       	adc	r25, r25
    2e8c:	82 2b       	or	r24, r18
    2e8e:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the character size on two separate register  */
	/* Adding only the third-bit to UCSRB and the 2 least bits to UCSRC */
	UCSRB = (UCSRB & 0xFB) | (((Config_Ptr->charSize)>>2)<<UCSZ2);
    2e90:	aa e2       	ldi	r26, 0x2A	; 42
    2e92:	b0 e0       	ldi	r27, 0x00	; 0
    2e94:	ea e2       	ldi	r30, 0x2A	; 42
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	80 81       	ld	r24, Z
    2e9a:	28 2f       	mov	r18, r24
    2e9c:	2b 7f       	andi	r18, 0xFB	; 251
    2e9e:	eb 81       	ldd	r30, Y+3	; 0x03
    2ea0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ea2:	86 81       	ldd	r24, Z+6	; 0x06
    2ea4:	86 95       	lsr	r24
    2ea6:	86 95       	lsr	r24
    2ea8:	88 2f       	mov	r24, r24
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	88 0f       	add	r24, r24
    2eae:	99 1f       	adc	r25, r25
    2eb0:	88 0f       	add	r24, r24
    2eb2:	99 1f       	adc	r25, r25
    2eb4:	82 2b       	or	r24, r18
    2eb6:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | (((Config_Ptr->charSize)<<6)>>5);
    2eb8:	a0 e4       	ldi	r26, 0x40	; 64
    2eba:	b0 e0       	ldi	r27, 0x00	; 0
    2ebc:	e0 e4       	ldi	r30, 0x40	; 64
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	28 2f       	mov	r18, r24
    2ec4:	29 7f       	andi	r18, 0xF9	; 249
    2ec6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ec8:	fc 81       	ldd	r31, Y+4	; 0x04
    2eca:	86 81       	ldd	r24, Z+6	; 0x06
    2ecc:	88 2f       	mov	r24, r24
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	00 24       	eor	r0, r0
    2ed2:	96 95       	lsr	r25
    2ed4:	87 95       	ror	r24
    2ed6:	07 94       	ror	r0
    2ed8:	96 95       	lsr	r25
    2eda:	87 95       	ror	r24
    2edc:	07 94       	ror	r0
    2ede:	98 2f       	mov	r25, r24
    2ee0:	80 2d       	mov	r24, r0
    2ee2:	95 95       	asr	r25
    2ee4:	87 95       	ror	r24
    2ee6:	95 95       	asr	r25
    2ee8:	87 95       	ror	r24
    2eea:	95 95       	asr	r25
    2eec:	87 95       	ror	r24
    2eee:	95 95       	asr	r25
    2ef0:	87 95       	ror	r24
    2ef2:	95 95       	asr	r25
    2ef4:	87 95       	ror	r24
    2ef6:	82 2b       	or	r24, r18
    2ef8:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* USART Reg Select between UCSRC & UBRRH */
	UCSRC = (UCSRC & 0x7F) | ((Config_Ptr->regSelect)<<URSEL);
    2efa:	a0 e4       	ldi	r26, 0x40	; 64
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	e0 e4       	ldi	r30, 0x40	; 64
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	28 2f       	mov	r18, r24
    2f06:	2f 77       	andi	r18, 0x7F	; 127
    2f08:	eb 81       	ldd	r30, Y+3	; 0x03
    2f0a:	fc 81       	ldd	r31, Y+4	; 0x04
    2f0c:	87 81       	ldd	r24, Z+7	; 0x07
    2f0e:	88 2f       	mov	r24, r24
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	96 95       	lsr	r25
    2f14:	98 2f       	mov	r25, r24
    2f16:	88 27       	eor	r24, r24
    2f18:	97 95       	ror	r25
    2f1a:	87 95       	ror	r24
    2f1c:	82 2b       	or	r24, r18
    2f1e:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* USART Mode Select: 1- A-Synch , 2- Synch */
	UCSRC = (UCSRC & 0xBF) | ((Config_Ptr->modeSelect)<<UMSEL);
    2f20:	a0 e4       	ldi	r26, 0x40	; 64
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	e0 e4       	ldi	r30, 0x40	; 64
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
    2f2a:	28 2f       	mov	r18, r24
    2f2c:	2f 7b       	andi	r18, 0xBF	; 191
    2f2e:	eb 81       	ldd	r30, Y+3	; 0x03
    2f30:	fc 81       	ldd	r31, Y+4	; 0x04
    2f32:	80 85       	ldd	r24, Z+8	; 0x08
    2f34:	88 2f       	mov	r24, r24
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	00 24       	eor	r0, r0
    2f3a:	96 95       	lsr	r25
    2f3c:	87 95       	ror	r24
    2f3e:	07 94       	ror	r0
    2f40:	96 95       	lsr	r25
    2f42:	87 95       	ror	r24
    2f44:	07 94       	ror	r0
    2f46:	98 2f       	mov	r25, r24
    2f48:	80 2d       	mov	r24, r0
    2f4a:	82 2b       	or	r24, r18
    2f4c:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Selecting the parity mode : Disabled/Even/ODD */
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->paritySelect)<<4);
    2f4e:	a0 e4       	ldi	r26, 0x40	; 64
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e0 e4       	ldi	r30, 0x40	; 64
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	80 81       	ld	r24, Z
    2f58:	28 2f       	mov	r18, r24
    2f5a:	2f 7c       	andi	r18, 0xCF	; 207
    2f5c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f5e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f60:	81 85       	ldd	r24, Z+9	; 0x09
    2f62:	88 2f       	mov	r24, r24
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	82 95       	swap	r24
    2f68:	92 95       	swap	r25
    2f6a:	90 7f       	andi	r25, 0xF0	; 240
    2f6c:	98 27       	eor	r25, r24
    2f6e:	80 7f       	andi	r24, 0xF0	; 240
    2f70:	98 27       	eor	r25, r24
    2f72:	82 2b       	or	r24, r18
    2f74:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Selecting the stop bit mode: 1-bit and 2-bit */
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stopBitSelect)<<USBS);
    2f76:	a0 e4       	ldi	r26, 0x40	; 64
    2f78:	b0 e0       	ldi	r27, 0x00	; 0
    2f7a:	e0 e4       	ldi	r30, 0x40	; 64
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	80 81       	ld	r24, Z
    2f80:	28 2f       	mov	r18, r24
    2f82:	27 7f       	andi	r18, 0xF7	; 247
    2f84:	eb 81       	ldd	r30, Y+3	; 0x03
    2f86:	fc 81       	ldd	r31, Y+4	; 0x04
    2f88:	82 85       	ldd	r24, Z+10	; 0x0a
    2f8a:	88 2f       	mov	r24, r24
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	88 0f       	add	r24, r24
    2f90:	99 1f       	adc	r25, r25
    2f92:	88 0f       	add	r24, r24
    2f94:	99 1f       	adc	r25, r25
    2f96:	88 0f       	add	r24, r24
    2f98:	99 1f       	adc	r25, r25
    2f9a:	82 2b       	or	r24, r18
    2f9c:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Selecting the clock Polarity: Rising and Falling */
	UCSRC = (UCSRC & 0xFE) | (Config_Ptr->clockPolatiry);
    2f9e:	a0 e4       	ldi	r26, 0x40	; 64
    2fa0:	b0 e0       	ldi	r27, 0x00	; 0
    2fa2:	e0 e4       	ldi	r30, 0x40	; 64
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	80 81       	ld	r24, Z
    2fa8:	98 2f       	mov	r25, r24
    2faa:	9e 7f       	andi	r25, 0xFE	; 254
    2fac:	eb 81       	ldd	r30, Y+3	; 0x03
    2fae:	fc 81       	ldd	r31, Y+4	; 0x04
    2fb0:	83 85       	ldd	r24, Z+11	; 0x0b
    2fb2:	89 2b       	or	r24, r25
    2fb4:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/
	
	/* Setting the baud rate */
	/* At first you should calculate the UBRR value */
	a_ubrr_value = (uint16)((F_CPU*(Config_Ptr->transmitSpeed+1)/((Config_Ptr->baud_rate)*(16)))-1);
    2fb6:	eb 81       	ldd	r30, Y+3	; 0x03
    2fb8:	fc 81       	ldd	r31, Y+4	; 0x04
    2fba:	80 81       	ld	r24, Z
    2fbc:	88 2f       	mov	r24, r24
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	01 96       	adiw	r24, 0x01	; 1
    2fc2:	aa 27       	eor	r26, r26
    2fc4:	97 fd       	sbrc	r25, 7
    2fc6:	a0 95       	com	r26
    2fc8:	ba 2f       	mov	r27, r26
    2fca:	20 e0       	ldi	r18, 0x00	; 0
    2fcc:	32 e1       	ldi	r19, 0x12	; 18
    2fce:	4a e7       	ldi	r20, 0x7A	; 122
    2fd0:	50 e0       	ldi	r21, 0x00	; 0
    2fd2:	bc 01       	movw	r22, r24
    2fd4:	cd 01       	movw	r24, r26
    2fd6:	0e 94 b8 18 	call	0x3170	; 0x3170 <__mulsi3>
    2fda:	7b 01       	movw	r14, r22
    2fdc:	8c 01       	movw	r16, r24
    2fde:	eb 81       	ldd	r30, Y+3	; 0x03
    2fe0:	fc 81       	ldd	r31, Y+4	; 0x04
    2fe2:	84 85       	ldd	r24, Z+12	; 0x0c
    2fe4:	95 85       	ldd	r25, Z+13	; 0x0d
    2fe6:	a6 85       	ldd	r26, Z+14	; 0x0e
    2fe8:	b7 85       	ldd	r27, Z+15	; 0x0f
    2fea:	88 0f       	add	r24, r24
    2fec:	99 1f       	adc	r25, r25
    2fee:	aa 1f       	adc	r26, r26
    2ff0:	bb 1f       	adc	r27, r27
    2ff2:	88 0f       	add	r24, r24
    2ff4:	99 1f       	adc	r25, r25
    2ff6:	aa 1f       	adc	r26, r26
    2ff8:	bb 1f       	adc	r27, r27
    2ffa:	88 0f       	add	r24, r24
    2ffc:	99 1f       	adc	r25, r25
    2ffe:	aa 1f       	adc	r26, r26
    3000:	bb 1f       	adc	r27, r27
    3002:	88 0f       	add	r24, r24
    3004:	99 1f       	adc	r25, r25
    3006:	aa 1f       	adc	r26, r26
    3008:	bb 1f       	adc	r27, r27
    300a:	9c 01       	movw	r18, r24
    300c:	ad 01       	movw	r20, r26
    300e:	c8 01       	movw	r24, r16
    3010:	b7 01       	movw	r22, r14
    3012:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__udivmodsi4>
    3016:	da 01       	movw	r26, r20
    3018:	c9 01       	movw	r24, r18
    301a:	01 97       	sbiw	r24, 0x01	; 1
    301c:	9a 83       	std	Y+2, r25	; 0x02
    301e:	89 83       	std	Y+1, r24	; 0x01
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = a_ubrr_value>>8;
    3020:	e0 e4       	ldi	r30, 0x40	; 64
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	9a 81       	ldd	r25, Y+2	; 0x02
    3028:	89 2f       	mov	r24, r25
    302a:	99 27       	eor	r25, r25
    302c:	80 83       	st	Z, r24
	UBRRL = a_ubrr_value;
    302e:	e9 e2       	ldi	r30, 0x29	; 41
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	80 83       	st	Z, r24

	/*----------------------------END--------------------------------*/
}
    3036:	0f 90       	pop	r0
    3038:	0f 90       	pop	r0
    303a:	0f 90       	pop	r0
    303c:	0f 90       	pop	r0
    303e:	cf 91       	pop	r28
    3040:	df 91       	pop	r29
    3042:	1f 91       	pop	r17
    3044:	0f 91       	pop	r16
    3046:	ff 90       	pop	r15
    3048:	ef 90       	pop	r14
    304a:	08 95       	ret

0000304c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    304c:	df 93       	push	r29
    304e:	cf 93       	push	r28
    3050:	0f 92       	push	r0
    3052:	cd b7       	in	r28, 0x3d	; 61
    3054:	de b7       	in	r29, 0x3e	; 62
    3056:	89 83       	std	Y+1, r24	; 0x01
	/* Need to wait till the buffer is ready to get a new data */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3058:	eb e2       	ldi	r30, 0x2B	; 43
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	80 81       	ld	r24, Z
    305e:	88 2f       	mov	r24, r24
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	80 72       	andi	r24, 0x20	; 32
    3064:	90 70       	andi	r25, 0x00	; 0
    3066:	00 97       	sbiw	r24, 0x00	; 0
    3068:	b9 f3       	breq	.-18     	; 0x3058 <UART_sendByte+0xc>

	/* When it's ready then send it  */
	UDR = data;
    306a:	ec e2       	ldi	r30, 0x2C	; 44
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	89 81       	ldd	r24, Y+1	; 0x01
    3070:	80 83       	st	Z, r24
}
    3072:	0f 90       	pop	r0
    3074:	cf 91       	pop	r28
    3076:	df 91       	pop	r29
    3078:	08 95       	ret

0000307a <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    307a:	df 93       	push	r29
    307c:	cf 93       	push	r28
    307e:	cd b7       	in	r28, 0x3d	; 61
    3080:	de b7       	in	r29, 0x3e	; 62
	/* Waiting till we get a new data */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3082:	eb e2       	ldi	r30, 0x2B	; 43
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	88 23       	and	r24, r24
    308a:	dc f7       	brge	.-10     	; 0x3082 <UART_receiveByte+0x8>

	/* Return it after getting it */
	return UDR;
    308c:	ec e2       	ldi	r30, 0x2C	; 44
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	80 81       	ld	r24, Z
}
    3092:	cf 91       	pop	r28
    3094:	df 91       	pop	r29
    3096:	08 95       	ret

00003098 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3098:	df 93       	push	r29
    309a:	cf 93       	push	r28
    309c:	00 d0       	rcall	.+0      	; 0x309e <UART_sendString+0x6>
    309e:	0f 92       	push	r0
    30a0:	cd b7       	in	r28, 0x3d	; 61
    30a2:	de b7       	in	r29, 0x3e	; 62
    30a4:	9b 83       	std	Y+3, r25	; 0x03
    30a6:	8a 83       	std	Y+2, r24	; 0x02
	/* Initialing a counter which moves the pointer to another location */
	uint8 a_stringCounter = 0;
    30a8:	19 82       	std	Y+1, r1	; 0x01
    30aa:	0e c0       	rjmp	.+28     	; 0x30c8 <UART_sendString+0x30>

	/* Sending byte by byte using UART_sendByte functio */
	while(Str[a_stringCounter] != '\0')
	{
		UART_sendByte(Str[a_stringCounter]);
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	28 2f       	mov	r18, r24
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	8a 81       	ldd	r24, Y+2	; 0x02
    30b4:	9b 81       	ldd	r25, Y+3	; 0x03
    30b6:	fc 01       	movw	r30, r24
    30b8:	e2 0f       	add	r30, r18
    30ba:	f3 1f       	adc	r31, r19
    30bc:	80 81       	ld	r24, Z
    30be:	0e 94 26 18 	call	0x304c	; 0x304c <UART_sendByte>
		a_stringCounter++;
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	8f 5f       	subi	r24, 0xFF	; 255
    30c6:	89 83       	std	Y+1, r24	; 0x01
{
	/* Initialing a counter which moves the pointer to another location */
	uint8 a_stringCounter = 0;

	/* Sending byte by byte using UART_sendByte functio */
	while(Str[a_stringCounter] != '\0')
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	28 2f       	mov	r18, r24
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	8a 81       	ldd	r24, Y+2	; 0x02
    30d0:	9b 81       	ldd	r25, Y+3	; 0x03
    30d2:	fc 01       	movw	r30, r24
    30d4:	e2 0f       	add	r30, r18
    30d6:	f3 1f       	adc	r31, r19
    30d8:	80 81       	ld	r24, Z
    30da:	88 23       	and	r24, r24
    30dc:	39 f7       	brne	.-50     	; 0x30ac <UART_sendString+0x14>
	{
		UART_sendByte(Str[a_stringCounter]);
		a_stringCounter++;
	}
}
    30de:	0f 90       	pop	r0
    30e0:	0f 90       	pop	r0
    30e2:	0f 90       	pop	r0
    30e4:	cf 91       	pop	r28
    30e6:	df 91       	pop	r29
    30e8:	08 95       	ret

000030ea <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    30ea:	0f 93       	push	r16
    30ec:	1f 93       	push	r17
    30ee:	df 93       	push	r29
    30f0:	cf 93       	push	r28
    30f2:	00 d0       	rcall	.+0      	; 0x30f4 <UART_receiveString+0xa>
    30f4:	0f 92       	push	r0
    30f6:	cd b7       	in	r28, 0x3d	; 61
    30f8:	de b7       	in	r29, 0x3e	; 62
    30fa:	9b 83       	std	Y+3, r25	; 0x03
    30fc:	8a 83       	std	Y+2, r24	; 0x02
	/* Initialing a counter which moves the pointer to another location */
	uint8 a_stringCounter = 0;
    30fe:	19 82       	std	Y+1, r1	; 0x01

	Str[a_stringCounter] = UART_receiveByte();
    3100:	89 81       	ldd	r24, Y+1	; 0x01
    3102:	28 2f       	mov	r18, r24
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	8a 81       	ldd	r24, Y+2	; 0x02
    3108:	9b 81       	ldd	r25, Y+3	; 0x03
    310a:	8c 01       	movw	r16, r24
    310c:	02 0f       	add	r16, r18
    310e:	13 1f       	adc	r17, r19
    3110:	0e 94 3d 18 	call	0x307a	; 0x307a <UART_receiveByte>
    3114:	f8 01       	movw	r30, r16
    3116:	80 83       	st	Z, r24
    3118:	0f c0       	rjmp	.+30     	; 0x3138 <UART_receiveString+0x4e>

	/* We will start check for a specific character which means to us a null char*/
	while(Str[a_stringCounter] != '=')
	{
		a_stringCounter++;
    311a:	89 81       	ldd	r24, Y+1	; 0x01
    311c:	8f 5f       	subi	r24, 0xFF	; 255
    311e:	89 83       	std	Y+1, r24	; 0x01
		Str[a_stringCounter] = UART_receiveByte();
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	28 2f       	mov	r18, r24
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	8a 81       	ldd	r24, Y+2	; 0x02
    3128:	9b 81       	ldd	r25, Y+3	; 0x03
    312a:	8c 01       	movw	r16, r24
    312c:	02 0f       	add	r16, r18
    312e:	13 1f       	adc	r17, r19
    3130:	0e 94 3d 18 	call	0x307a	; 0x307a <UART_receiveByte>
    3134:	f8 01       	movw	r30, r16
    3136:	80 83       	st	Z, r24
	uint8 a_stringCounter = 0;

	Str[a_stringCounter] = UART_receiveByte();

	/* We will start check for a specific character which means to us a null char*/
	while(Str[a_stringCounter] != '=')
    3138:	89 81       	ldd	r24, Y+1	; 0x01
    313a:	28 2f       	mov	r18, r24
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	8a 81       	ldd	r24, Y+2	; 0x02
    3140:	9b 81       	ldd	r25, Y+3	; 0x03
    3142:	fc 01       	movw	r30, r24
    3144:	e2 0f       	add	r30, r18
    3146:	f3 1f       	adc	r31, r19
    3148:	80 81       	ld	r24, Z
    314a:	8d 33       	cpi	r24, 0x3D	; 61
    314c:	31 f7       	brne	.-52     	; 0x311a <UART_receiveString+0x30>
		a_stringCounter++;
		Str[a_stringCounter] = UART_receiveByte();
	}

	/* Then redefining the string by replacing the stop char with NULL char */
	Str[a_stringCounter] = '\0';
    314e:	89 81       	ldd	r24, Y+1	; 0x01
    3150:	28 2f       	mov	r18, r24
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	8a 81       	ldd	r24, Y+2	; 0x02
    3156:	9b 81       	ldd	r25, Y+3	; 0x03
    3158:	fc 01       	movw	r30, r24
    315a:	e2 0f       	add	r30, r18
    315c:	f3 1f       	adc	r31, r19
    315e:	10 82       	st	Z, r1
}
    3160:	0f 90       	pop	r0
    3162:	0f 90       	pop	r0
    3164:	0f 90       	pop	r0
    3166:	cf 91       	pop	r28
    3168:	df 91       	pop	r29
    316a:	1f 91       	pop	r17
    316c:	0f 91       	pop	r16
    316e:	08 95       	ret

00003170 <__mulsi3>:
    3170:	62 9f       	mul	r22, r18
    3172:	d0 01       	movw	r26, r0
    3174:	73 9f       	mul	r23, r19
    3176:	f0 01       	movw	r30, r0
    3178:	82 9f       	mul	r24, r18
    317a:	e0 0d       	add	r30, r0
    317c:	f1 1d       	adc	r31, r1
    317e:	64 9f       	mul	r22, r20
    3180:	e0 0d       	add	r30, r0
    3182:	f1 1d       	adc	r31, r1
    3184:	92 9f       	mul	r25, r18
    3186:	f0 0d       	add	r31, r0
    3188:	83 9f       	mul	r24, r19
    318a:	f0 0d       	add	r31, r0
    318c:	74 9f       	mul	r23, r20
    318e:	f0 0d       	add	r31, r0
    3190:	65 9f       	mul	r22, r21
    3192:	f0 0d       	add	r31, r0
    3194:	99 27       	eor	r25, r25
    3196:	72 9f       	mul	r23, r18
    3198:	b0 0d       	add	r27, r0
    319a:	e1 1d       	adc	r30, r1
    319c:	f9 1f       	adc	r31, r25
    319e:	63 9f       	mul	r22, r19
    31a0:	b0 0d       	add	r27, r0
    31a2:	e1 1d       	adc	r30, r1
    31a4:	f9 1f       	adc	r31, r25
    31a6:	bd 01       	movw	r22, r26
    31a8:	cf 01       	movw	r24, r30
    31aa:	11 24       	eor	r1, r1
    31ac:	08 95       	ret

000031ae <__udivmodsi4>:
    31ae:	a1 e2       	ldi	r26, 0x21	; 33
    31b0:	1a 2e       	mov	r1, r26
    31b2:	aa 1b       	sub	r26, r26
    31b4:	bb 1b       	sub	r27, r27
    31b6:	fd 01       	movw	r30, r26
    31b8:	0d c0       	rjmp	.+26     	; 0x31d4 <__udivmodsi4_ep>

000031ba <__udivmodsi4_loop>:
    31ba:	aa 1f       	adc	r26, r26
    31bc:	bb 1f       	adc	r27, r27
    31be:	ee 1f       	adc	r30, r30
    31c0:	ff 1f       	adc	r31, r31
    31c2:	a2 17       	cp	r26, r18
    31c4:	b3 07       	cpc	r27, r19
    31c6:	e4 07       	cpc	r30, r20
    31c8:	f5 07       	cpc	r31, r21
    31ca:	20 f0       	brcs	.+8      	; 0x31d4 <__udivmodsi4_ep>
    31cc:	a2 1b       	sub	r26, r18
    31ce:	b3 0b       	sbc	r27, r19
    31d0:	e4 0b       	sbc	r30, r20
    31d2:	f5 0b       	sbc	r31, r21

000031d4 <__udivmodsi4_ep>:
    31d4:	66 1f       	adc	r22, r22
    31d6:	77 1f       	adc	r23, r23
    31d8:	88 1f       	adc	r24, r24
    31da:	99 1f       	adc	r25, r25
    31dc:	1a 94       	dec	r1
    31de:	69 f7       	brne	.-38     	; 0x31ba <__udivmodsi4_loop>
    31e0:	60 95       	com	r22
    31e2:	70 95       	com	r23
    31e4:	80 95       	com	r24
    31e6:	90 95       	com	r25
    31e8:	9b 01       	movw	r18, r22
    31ea:	ac 01       	movw	r20, r24
    31ec:	bd 01       	movw	r22, r26
    31ee:	cf 01       	movw	r24, r30
    31f0:	08 95       	ret

000031f2 <__prologue_saves__>:
    31f2:	2f 92       	push	r2
    31f4:	3f 92       	push	r3
    31f6:	4f 92       	push	r4
    31f8:	5f 92       	push	r5
    31fa:	6f 92       	push	r6
    31fc:	7f 92       	push	r7
    31fe:	8f 92       	push	r8
    3200:	9f 92       	push	r9
    3202:	af 92       	push	r10
    3204:	bf 92       	push	r11
    3206:	cf 92       	push	r12
    3208:	df 92       	push	r13
    320a:	ef 92       	push	r14
    320c:	ff 92       	push	r15
    320e:	0f 93       	push	r16
    3210:	1f 93       	push	r17
    3212:	cf 93       	push	r28
    3214:	df 93       	push	r29
    3216:	cd b7       	in	r28, 0x3d	; 61
    3218:	de b7       	in	r29, 0x3e	; 62
    321a:	ca 1b       	sub	r28, r26
    321c:	db 0b       	sbc	r29, r27
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	f8 94       	cli
    3222:	de bf       	out	0x3e, r29	; 62
    3224:	0f be       	out	0x3f, r0	; 63
    3226:	cd bf       	out	0x3d, r28	; 61
    3228:	09 94       	ijmp

0000322a <__epilogue_restores__>:
    322a:	2a 88       	ldd	r2, Y+18	; 0x12
    322c:	39 88       	ldd	r3, Y+17	; 0x11
    322e:	48 88       	ldd	r4, Y+16	; 0x10
    3230:	5f 84       	ldd	r5, Y+15	; 0x0f
    3232:	6e 84       	ldd	r6, Y+14	; 0x0e
    3234:	7d 84       	ldd	r7, Y+13	; 0x0d
    3236:	8c 84       	ldd	r8, Y+12	; 0x0c
    3238:	9b 84       	ldd	r9, Y+11	; 0x0b
    323a:	aa 84       	ldd	r10, Y+10	; 0x0a
    323c:	b9 84       	ldd	r11, Y+9	; 0x09
    323e:	c8 84       	ldd	r12, Y+8	; 0x08
    3240:	df 80       	ldd	r13, Y+7	; 0x07
    3242:	ee 80       	ldd	r14, Y+6	; 0x06
    3244:	fd 80       	ldd	r15, Y+5	; 0x05
    3246:	0c 81       	ldd	r16, Y+4	; 0x04
    3248:	1b 81       	ldd	r17, Y+3	; 0x03
    324a:	aa 81       	ldd	r26, Y+2	; 0x02
    324c:	b9 81       	ldd	r27, Y+1	; 0x01
    324e:	ce 0f       	add	r28, r30
    3250:	d1 1d       	adc	r29, r1
    3252:	0f b6       	in	r0, 0x3f	; 63
    3254:	f8 94       	cli
    3256:	de bf       	out	0x3e, r29	; 62
    3258:	0f be       	out	0x3f, r0	; 63
    325a:	cd bf       	out	0x3d, r28	; 61
    325c:	ed 01       	movw	r28, r26
    325e:	08 95       	ret

00003260 <itoa>:
    3260:	fb 01       	movw	r30, r22
    3262:	9f 01       	movw	r18, r30
    3264:	e8 94       	clt
    3266:	42 30       	cpi	r20, 0x02	; 2
    3268:	c4 f0       	brlt	.+48     	; 0x329a <itoa+0x3a>
    326a:	45 32       	cpi	r20, 0x25	; 37
    326c:	b4 f4       	brge	.+44     	; 0x329a <itoa+0x3a>
    326e:	4a 30       	cpi	r20, 0x0A	; 10
    3270:	29 f4       	brne	.+10     	; 0x327c <itoa+0x1c>
    3272:	97 fb       	bst	r25, 7
    3274:	1e f4       	brtc	.+6      	; 0x327c <itoa+0x1c>
    3276:	90 95       	com	r25
    3278:	81 95       	neg	r24
    327a:	9f 4f       	sbci	r25, 0xFF	; 255
    327c:	64 2f       	mov	r22, r20
    327e:	77 27       	eor	r23, r23
    3280:	0e 94 61 19 	call	0x32c2	; 0x32c2 <__udivmodhi4>
    3284:	80 5d       	subi	r24, 0xD0	; 208
    3286:	8a 33       	cpi	r24, 0x3A	; 58
    3288:	0c f0       	brlt	.+2      	; 0x328c <itoa+0x2c>
    328a:	89 5d       	subi	r24, 0xD9	; 217
    328c:	81 93       	st	Z+, r24
    328e:	cb 01       	movw	r24, r22
    3290:	00 97       	sbiw	r24, 0x00	; 0
    3292:	a1 f7       	brne	.-24     	; 0x327c <itoa+0x1c>
    3294:	16 f4       	brtc	.+4      	; 0x329a <itoa+0x3a>
    3296:	5d e2       	ldi	r21, 0x2D	; 45
    3298:	51 93       	st	Z+, r21
    329a:	10 82       	st	Z, r1
    329c:	c9 01       	movw	r24, r18
    329e:	0c 94 51 19 	jmp	0x32a2	; 0x32a2 <strrev>

000032a2 <strrev>:
    32a2:	dc 01       	movw	r26, r24
    32a4:	fc 01       	movw	r30, r24
    32a6:	67 2f       	mov	r22, r23
    32a8:	71 91       	ld	r23, Z+
    32aa:	77 23       	and	r23, r23
    32ac:	e1 f7       	brne	.-8      	; 0x32a6 <strrev+0x4>
    32ae:	32 97       	sbiw	r30, 0x02	; 2
    32b0:	04 c0       	rjmp	.+8      	; 0x32ba <strrev+0x18>
    32b2:	7c 91       	ld	r23, X
    32b4:	6d 93       	st	X+, r22
    32b6:	70 83       	st	Z, r23
    32b8:	62 91       	ld	r22, -Z
    32ba:	ae 17       	cp	r26, r30
    32bc:	bf 07       	cpc	r27, r31
    32be:	c8 f3       	brcs	.-14     	; 0x32b2 <strrev+0x10>
    32c0:	08 95       	ret

000032c2 <__udivmodhi4>:
    32c2:	aa 1b       	sub	r26, r26
    32c4:	bb 1b       	sub	r27, r27
    32c6:	51 e1       	ldi	r21, 0x11	; 17
    32c8:	07 c0       	rjmp	.+14     	; 0x32d8 <__udivmodhi4_ep>

000032ca <__udivmodhi4_loop>:
    32ca:	aa 1f       	adc	r26, r26
    32cc:	bb 1f       	adc	r27, r27
    32ce:	a6 17       	cp	r26, r22
    32d0:	b7 07       	cpc	r27, r23
    32d2:	10 f0       	brcs	.+4      	; 0x32d8 <__udivmodhi4_ep>
    32d4:	a6 1b       	sub	r26, r22
    32d6:	b7 0b       	sbc	r27, r23

000032d8 <__udivmodhi4_ep>:
    32d8:	88 1f       	adc	r24, r24
    32da:	99 1f       	adc	r25, r25
    32dc:	5a 95       	dec	r21
    32de:	a9 f7       	brne	.-22     	; 0x32ca <__udivmodhi4_loop>
    32e0:	80 95       	com	r24
    32e2:	90 95       	com	r25
    32e4:	bc 01       	movw	r22, r24
    32e6:	cd 01       	movw	r24, r26
    32e8:	08 95       	ret

000032ea <_exit>:
    32ea:	f8 94       	cli

000032ec <__stop_program>:
    32ec:	ff cf       	rjmp	.-2      	; 0x32ec <__stop_program>
