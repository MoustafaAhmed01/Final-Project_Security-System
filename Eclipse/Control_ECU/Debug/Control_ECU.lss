
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000288a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  0000288a  0000291e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800090  00800090  0000294e  2**0
                  ALLOC
  3 .stab         00002b50  00000000  00000000  00002950  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000275a  00000000  00000000  000054a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009af3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b78c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b8ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bb79  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c347  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__vector_4>
      14:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__vector_9>
      28:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__vector_10>
      2c:	0c 94 19 0c 	jmp	0x1832	; 0x1832 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0f 06 	call	0xc1e	; 0xc1e <main>
      8a:	0c 94 43 14 	jmp	0x2886	; 0x2886 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 28 14 	jmp	0x2850	; 0x2850 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 28 14 	jmp	0x2850	; 0x2850 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 38 14 	jmp	0x2870	; 0x2870 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Drivers_Init>:
/*
 * Description:
 * Initializing All drivers
 */
void Drivers_Init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a9 97       	sbiw	r28, 0x29	; 41
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	 * UART_STOP_BIT_SELECT : 1-bit
	 * UART_CLOCK_POLARITY : A-sync Rising
	 * baud_rate : 9600
	 *
	 */
	UART_ConfigType UART_Config = {DOUBLE_TR_SPEED,RECEIVE_INT_EN_OFF,TRANSMIT_INT_EN_OFF,EMPTY_INT_EN_OFF,RECEIVER_EN_ON,TRANSMITTER_EN_ON,EIGHT_BIT,UBRRH_REG,ASYNCHRONOUS,PARITY_DISABLE,ONE_BIT,A_Sync_RISING_EDGE,9600};
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	99 a3       	std	Y+33, r25	; 0x21
     b60:	88 a3       	std	Y+32, r24	; 0x20
     b62:	e0 e8       	ldi	r30, 0x80	; 128
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	fb a3       	std	Y+35, r31	; 0x23
     b68:	ea a3       	std	Y+34, r30	; 0x22
     b6a:	f0 e1       	ldi	r31, 0x10	; 16
     b6c:	fc a3       	std	Y+36, r31	; 0x24
     b6e:	ea a1       	ldd	r30, Y+34	; 0x22
     b70:	fb a1       	ldd	r31, Y+35	; 0x23
     b72:	00 80       	ld	r0, Z
     b74:	8a a1       	ldd	r24, Y+34	; 0x22
     b76:	9b a1       	ldd	r25, Y+35	; 0x23
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	9b a3       	std	Y+35, r25	; 0x23
     b7c:	8a a3       	std	Y+34, r24	; 0x22
     b7e:	e8 a1       	ldd	r30, Y+32	; 0x20
     b80:	f9 a1       	ldd	r31, Y+33	; 0x21
     b82:	00 82       	st	Z, r0
     b84:	88 a1       	ldd	r24, Y+32	; 0x20
     b86:	99 a1       	ldd	r25, Y+33	; 0x21
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	99 a3       	std	Y+33, r25	; 0x21
     b8c:	88 a3       	std	Y+32, r24	; 0x20
     b8e:	9c a1       	ldd	r25, Y+36	; 0x24
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	9c a3       	std	Y+36, r25	; 0x24
     b94:	ec a1       	ldd	r30, Y+36	; 0x24
     b96:	ee 23       	and	r30, r30
     b98:	51 f7       	brne	.-44     	; 0xb6e <Drivers_Init+0x28>
	UART_init(&UART_Config);
     b9a:	ce 01       	movw	r24, r28
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	0e 94 d5 11 	call	0x23aa	; 0x23aa <UART_init>

	/* Initializing Dc Motor */
	DCMotor_init();
     ba2:	0e 94 8e 08 	call	0x111c	; 0x111c <DCMotor_init>
	 *  Timer0_TCNT0_Value :--
	 *  Timer0_OCR0_Value :--
	 */

	Timer0_ConfigType PWM_Config;
	PWM_Config.Timer0_PreScaler = F0_TIMER64;
     ba6:	83 e0       	ldi	r24, 0x03	; 3
     ba8:	89 8b       	std	Y+17, r24	; 0x11
	Timer0_PWM_Init(&PWM_Config);
     baa:	ce 01       	movw	r24, r28
     bac:	41 96       	adiw	r24, 0x11	; 17
     bae:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <Timer0_PWM_Init>
		 *  OCR1A_Value : 23437
		 *  OCR1B_Value : ---
		 */

		/* Setting the callback function*/
		Timer1_setCallBackONE(App_timer1);
     bb2:	8b e5       	ldi	r24, 0x5B	; 91
     bb4:	97 e0       	ldi	r25, 0x07	; 7
     bb6:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <Timer1_setCallBackONE>

	/* Initializing the Buzzer */
	Buzzer_init();
     bba:	0e 94 30 10 	call	0x2060	; 0x2060 <Buzzer_init>
	 *  prescalerControl : No Prescaling
	 *  callRecControl :No
	 *  address : Address 1
	 *  bit_rate : 400 kbps
	 */
	TWI_ConfigType TWI_Config = {TWI_INT_DISABLED,ACK_OFF,TWI_ENABLED,F_I2C_1,CALL_RECOGNITION_OFF,1,2};
     bbe:	ce 01       	movw	r24, r28
     bc0:	49 96       	adiw	r24, 0x19	; 25
     bc2:	9e a3       	std	Y+38, r25	; 0x26
     bc4:	8d a3       	std	Y+37, r24	; 0x25
     bc6:	e9 e7       	ldi	r30, 0x79	; 121
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	f8 a7       	std	Y+40, r31	; 0x28
     bcc:	ef a3       	std	Y+39, r30	; 0x27
     bce:	f7 e0       	ldi	r31, 0x07	; 7
     bd0:	f9 a7       	std	Y+41, r31	; 0x29
     bd2:	ef a1       	ldd	r30, Y+39	; 0x27
     bd4:	f8 a5       	ldd	r31, Y+40	; 0x28
     bd6:	00 80       	ld	r0, Z
     bd8:	8f a1       	ldd	r24, Y+39	; 0x27
     bda:	98 a5       	ldd	r25, Y+40	; 0x28
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	98 a7       	std	Y+40, r25	; 0x28
     be0:	8f a3       	std	Y+39, r24	; 0x27
     be2:	ed a1       	ldd	r30, Y+37	; 0x25
     be4:	fe a1       	ldd	r31, Y+38	; 0x26
     be6:	00 82       	st	Z, r0
     be8:	8d a1       	ldd	r24, Y+37	; 0x25
     bea:	9e a1       	ldd	r25, Y+38	; 0x26
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	9e a3       	std	Y+38, r25	; 0x26
     bf0:	8d a3       	std	Y+37, r24	; 0x25
     bf2:	99 a5       	ldd	r25, Y+41	; 0x29
     bf4:	91 50       	subi	r25, 0x01	; 1
     bf6:	99 a7       	std	Y+41, r25	; 0x29
     bf8:	e9 a5       	ldd	r30, Y+41	; 0x29
     bfa:	ee 23       	and	r30, r30
     bfc:	51 f7       	brne	.-44     	; 0xbd2 <Drivers_Init+0x8c>

	/* Activating Interrupt system*/
	SREG |= (1<<7);
     bfe:	af e5       	ldi	r26, 0x5F	; 95
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	ef e5       	ldi	r30, 0x5F	; 95
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	80 68       	ori	r24, 0x80	; 128
     c0a:	8c 93       	st	X, r24

}
     c0c:	a9 96       	adiw	r28, 0x29	; 41
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	08 95       	ret

00000c1e <main>:
/*-------------------------------------------------------------------*/

int main(void)
{
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	6c 97       	sbiw	r28, 0x1c	; 28
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cd bf       	out	0x3d, r28	; 61
	/**-----------------------Local Variables----------------------**/
	System_Info SystemInfo;
	uint8 a_PassCheckResult = 0;
     c32:	18 8a       	std	Y+16, r1	; 0x10
	uint8 a_CharCounter=0;
     c34:	1f 86       	std	Y+15, r1	; 0x0f
	/**-----------------------Main Section-------------------------**/

	/* Initializing Everything */
	Drivers_Init();
     c36:	0e 94 a3 05 	call	0xb46	; 0xb46 <Drivers_Init>
		/*
		 * Description:
		 *  This Function will sync with HMI_ECU to know which stage are we
		 */

		OptionControl();
     c3a:	0e 94 4e 08 	call	0x109c	; 0x109c <OptionControl>

		if(g_SystemStep == NEW_PASS) /* First stage adding the password */
     c3e:	80 91 92 00 	lds	r24, 0x0092
     c42:	88 23       	and	r24, r24
     c44:	09 f0       	breq	.+2      	; 0xc48 <main+0x2a>
     c46:	ad c0       	rjmp	.+346    	; 0xda2 <main+0x184>
		{

			/* Receiving the 2 passwords from HMI_ECU */
			/* Sync between two MCU */
			UART_sendByte(CONTROL_READY);
     c48:	80 e1       	ldi	r24, 0x10	; 16
     c4a:	0e 94 39 13 	call	0x2672	; 0x2672 <UART_sendByte>
			/* Starting to receive the data */
			UART_receiveString(SystemInfo.MainPassword);
     c4e:	ce 01       	movw	r24, r28
     c50:	41 96       	adiw	r24, 0x11	; 17
     c52:	0e 94 88 13 	call	0x2710	; 0x2710 <UART_receiveString>
			/* Sync between two MCU */
			UART_sendByte(CONTROL_READY);
     c56:	80 e1       	ldi	r24, 0x10	; 16
     c58:	0e 94 39 13 	call	0x2672	; 0x2672 <UART_sendByte>
			/* Starting to receive the data */
			UART_receiveString(SystemInfo.ConfirmingPassword);
     c5c:	ce 01       	movw	r24, r28
     c5e:	41 96       	adiw	r24, 0x11	; 17
     c60:	06 96       	adiw	r24, 0x06	; 6
     c62:	0e 94 88 13 	call	0x2710	; 0x2710 <UART_receiveString>

			/* Checking on the two passwords */
			a_PassCheckResult = NewPasswordChecker(&SystemInfo);
     c66:	ce 01       	movw	r24, r28
     c68:	41 96       	adiw	r24, 0x11	; 17
     c6a:	0e 94 14 07 	call	0xe28	; 0xe28 <NewPasswordChecker>
     c6e:	88 8b       	std	Y+16, r24	; 0x10

			/* Return back the result to HMI_ECU to move to the next step */
			while(UART_receiveByte() != CONTROL_READY){}
     c70:	0e 94 50 13 	call	0x26a0	; 0x26a0 <UART_receiveByte>
     c74:	80 31       	cpi	r24, 0x10	; 16
     c76:	e1 f7       	brne	.-8      	; 0xc70 <main+0x52>
			UART_sendByte(a_PassCheckResult);
     c78:	88 89       	ldd	r24, Y+16	; 0x10
     c7a:	0e 94 39 13 	call	0x2672	; 0x2672 <UART_sendByte>


			/* If password was correct then save it */
			if(a_PassCheckResult == 'T')
     c7e:	88 89       	ldd	r24, Y+16	; 0x10
     c80:	84 35       	cpi	r24, 0x54	; 84
     c82:	d9 f6       	brne	.-74     	; 0xc3a <main+0x1c>
			{
				/* Then the two passwords are correct and then save the data */
				a_CharCounter = 0;
     c84:	1f 86       	std	Y+15, r1	; 0x0f
     c86:	88 c0       	rjmp	.+272    	; 0xd98 <main+0x17a>
				while(a_CharCounter < 5)
				{
					EEPROM_writeByte(0x0310 + a_CharCounter,SystemInfo.MainPassword[a_CharCounter] );
     c88:	8f 85       	ldd	r24, Y+15	; 0x0f
     c8a:	88 2f       	mov	r24, r24
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	80 5f       	subi	r24, 0xF0	; 240
     c90:	9c 4f       	sbci	r25, 0xFC	; 252
     c92:	ac 01       	movw	r20, r24
     c94:	8f 85       	ldd	r24, Y+15	; 0x0f
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	ce 01       	movw	r24, r28
     c9c:	41 96       	adiw	r24, 0x11	; 17
     c9e:	fc 01       	movw	r30, r24
     ca0:	e2 0f       	add	r30, r18
     ca2:	f3 1f       	adc	r31, r19
     ca4:	20 81       	ld	r18, Z
     ca6:	ca 01       	movw	r24, r20
     ca8:	62 2f       	mov	r22, r18
     caa:	0e 94 59 10 	call	0x20b2	; 0x20b2 <EEPROM_writeByte>
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	a0 e2       	ldi	r26, 0x20	; 32
     cb4:	b1 e4       	ldi	r27, 0x41	; 65
     cb6:	8b 87       	std	Y+11, r24	; 0x0b
     cb8:	9c 87       	std	Y+12, r25	; 0x0c
     cba:	ad 87       	std	Y+13, r26	; 0x0d
     cbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	4a ef       	ldi	r20, 0xFA	; 250
     ccc:	54 e4       	ldi	r21, 0x44	; 68
     cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	8f 83       	std	Y+7, r24	; 0x07
     cd8:	98 87       	std	Y+8, r25	; 0x08
     cda:	a9 87       	std	Y+9, r26	; 0x09
     cdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cde:	6f 81       	ldd	r22, Y+7	; 0x07
     ce0:	78 85       	ldd	r23, Y+8	; 0x08
     ce2:	89 85       	ldd	r24, Y+9	; 0x09
     ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e8       	ldi	r20, 0x80	; 128
     cec:	5f e3       	ldi	r21, 0x3F	; 63
     cee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cf2:	88 23       	and	r24, r24
     cf4:	2c f4       	brge	.+10     	; 0xd00 <main+0xe2>
		__ticks = 1;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	9e 83       	std	Y+6, r25	; 0x06
     cfc:	8d 83       	std	Y+5, r24	; 0x05
     cfe:	3f c0       	rjmp	.+126    	; 0xd7e <main+0x160>
	else if (__tmp > 65535)
     d00:	6f 81       	ldd	r22, Y+7	; 0x07
     d02:	78 85       	ldd	r23, Y+8	; 0x08
     d04:	89 85       	ldd	r24, Y+9	; 0x09
     d06:	9a 85       	ldd	r25, Y+10	; 0x0a
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	3f ef       	ldi	r19, 0xFF	; 255
     d0c:	4f e7       	ldi	r20, 0x7F	; 127
     d0e:	57 e4       	ldi	r21, 0x47	; 71
     d10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d14:	18 16       	cp	r1, r24
     d16:	4c f5       	brge	.+82     	; 0xd6a <main+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d18:	6b 85       	ldd	r22, Y+11	; 0x0b
     d1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e2       	ldi	r20, 0x20	; 32
     d26:	51 e4       	ldi	r21, 0x41	; 65
     d28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	bc 01       	movw	r22, r24
     d32:	cd 01       	movw	r24, r26
     d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	9e 83       	std	Y+6, r25	; 0x06
     d3e:	8d 83       	std	Y+5, r24	; 0x05
     d40:	0f c0       	rjmp	.+30     	; 0xd60 <main+0x142>
     d42:	88 ec       	ldi	r24, 0xC8	; 200
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	9c 83       	std	Y+4, r25	; 0x04
     d48:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	9c 81       	ldd	r25, Y+4	; 0x04
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <main+0x130>
     d52:	9c 83       	std	Y+4, r25	; 0x04
     d54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d56:	8d 81       	ldd	r24, Y+5	; 0x05
     d58:	9e 81       	ldd	r25, Y+6	; 0x06
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	9e 81       	ldd	r25, Y+6	; 0x06
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	69 f7       	brne	.-38     	; 0xd42 <main+0x124>
     d68:	14 c0       	rjmp	.+40     	; 0xd92 <main+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6a:	6f 81       	ldd	r22, Y+7	; 0x07
     d6c:	78 85       	ldd	r23, Y+8	; 0x08
     d6e:	89 85       	ldd	r24, Y+9	; 0x09
     d70:	9a 85       	ldd	r25, Y+10	; 0x0a
     d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	8d 83       	std	Y+5, r24	; 0x05
     d7e:	8d 81       	ldd	r24, Y+5	; 0x05
     d80:	9e 81       	ldd	r25, Y+6	; 0x06
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	01 97       	sbiw	r24, 0x01	; 1
     d8c:	f1 f7       	brne	.-4      	; 0xd8a <main+0x16c>
     d8e:	9a 83       	std	Y+2, r25	; 0x02
     d90:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(10);

					a_CharCounter++;
     d92:	8f 85       	ldd	r24, Y+15	; 0x0f
     d94:	8f 5f       	subi	r24, 0xFF	; 255
     d96:	8f 87       	std	Y+15, r24	; 0x0f
			/* If password was correct then save it */
			if(a_PassCheckResult == 'T')
			{
				/* Then the two passwords are correct and then save the data */
				a_CharCounter = 0;
				while(a_CharCounter < 5)
     d98:	8f 85       	ldd	r24, Y+15	; 0x0f
     d9a:	85 30       	cpi	r24, 0x05	; 5
     d9c:	08 f4       	brcc	.+2      	; 0xda0 <main+0x182>
     d9e:	74 cf       	rjmp	.-280    	; 0xc88 <main+0x6a>
     da0:	4c cf       	rjmp	.-360    	; 0xc3a <main+0x1c>
				} /* Password saved */

			}

		}
		else if(g_SystemStep == CONFIRMATION_STAGE) /* Password check with EEPROM */
     da2:	80 91 92 00 	lds	r24, 0x0092
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	a1 f4       	brne	.+40     	; 0xdd2 <main+0x1b4>
		{
			/* Attemping to receive the password */
			UART_sendByte(CONTROL_READY);
     daa:	80 e1       	ldi	r24, 0x10	; 16
     dac:	0e 94 39 13 	call	0x2672	; 0x2672 <UART_sendByte>
			UART_receiveString(SystemInfo.MainPassword);
     db0:	ce 01       	movw	r24, r28
     db2:	41 96       	adiw	r24, 0x11	; 17
     db4:	0e 94 88 13 	call	0x2710	; 0x2710 <UART_receiveString>

			/* Check on it */
			a_PassCheckResult = ConfirmPass(&SystemInfo);
     db8:	ce 01       	movw	r24, r28
     dba:	41 96       	adiw	r24, 0x11	; 17
     dbc:	0e 94 a0 07 	call	0xf40	; 0xf40 <ConfirmPass>
     dc0:	88 8b       	std	Y+16, r24	; 0x10

			/* Return back the result */
			while(UART_receiveByte() != CONTROL_READY){}
     dc2:	0e 94 50 13 	call	0x26a0	; 0x26a0 <UART_receiveByte>
     dc6:	80 31       	cpi	r24, 0x10	; 16
     dc8:	e1 f7       	brne	.-8      	; 0xdc2 <main+0x1a4>
			UART_sendByte(a_PassCheckResult);
     dca:	88 89       	ldd	r24, Y+16	; 0x10
     dcc:	0e 94 39 13 	call	0x2672	; 0x2672 <UART_sendByte>
     dd0:	34 cf       	rjmp	.-408    	; 0xc3a <main+0x1c>
		}
		else if(g_SystemStep == IN_DOOR)
     dd2:	80 91 92 00 	lds	r24, 0x0092
     dd6:	84 30       	cpi	r24, 0x04	; 4
     dd8:	d1 f4       	brne	.+52     	; 0xe0e <main+0x1f0>
		{
			/* Open the door*/
			DcMotor_Rotate(ClockWise, 100);
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	64 e6       	ldi	r22, 0x64	; 100
     dde:	0e 94 a4 08 	call	0x1148	; 0x1148 <DcMotor_Rotate>

			/* Delay 15 seconds using Timer1 */
			App_timerDelay(15);
     de2:	8f e0       	ldi	r24, 0x0F	; 15
     de4:	0e 94 67 07 	call	0xece	; 0xece <App_timerDelay>

			/* HOLD for 3 seconds */
			DcMotor_Rotate(ClockWise, 0);
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	0e 94 a4 08 	call	0x1148	; 0x1148 <DcMotor_Rotate>

			/* Delay 3 seconds using Timer1 */
			App_timerDelay(3);
     df0:	83 e0       	ldi	r24, 0x03	; 3
     df2:	0e 94 67 07 	call	0xece	; 0xece <App_timerDelay>

			/* Close the door*/
			DcMotor_Rotate(Anti_ClockWise, 100);
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	64 e6       	ldi	r22, 0x64	; 100
     dfa:	0e 94 a4 08 	call	0x1148	; 0x1148 <DcMotor_Rotate>

			/* Delay 15 seconds using Timer1 */
			App_timerDelay(15);
     dfe:	8f e0       	ldi	r24, 0x0F	; 15
     e00:	0e 94 67 07 	call	0xece	; 0xece <App_timerDelay>

			/* Stop the motor */
			DcMotor_Rotate(Anti_ClockWise, 0);
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	0e 94 a4 08 	call	0x1148	; 0x1148 <DcMotor_Rotate>
     e0c:	16 cf       	rjmp	.-468    	; 0xc3a <main+0x1c>
		}
		else if(g_SystemStep == SHUTDOWN_SYSTEM)
     e0e:	80 91 92 00 	lds	r24, 0x0092
     e12:	83 30       	cpi	r24, 0x03	; 3
     e14:	09 f0       	breq	.+2      	; 0xe18 <main+0x1fa>
     e16:	11 cf       	rjmp	.-478    	; 0xc3a <main+0x1c>
		{
			/* Activate buzzer for 1 minute and take no input */
			Buzzer_on();
     e18:	0e 94 41 10 	call	0x2082	; 0x2082 <Buzzer_on>

			/* Delay for 60 seconds using timer1 */
			App_timerDelay(60);
     e1c:	8c e3       	ldi	r24, 0x3C	; 60
     e1e:	0e 94 67 07 	call	0xece	; 0xece <App_timerDelay>

			/* Turn off the buzzer again */
			Buzzer_off();
     e22:	0e 94 4d 10 	call	0x209a	; 0x209a <Buzzer_off>
     e26:	09 cf       	rjmp	.-494    	; 0xc3a <main+0x1c>

00000e28 <NewPasswordChecker>:
 * Description:
 * Used to check on the two passwords received by UART
 * Return: True; which means the 2 passwords are matched, Flase; otherwise
 */
uint8 NewPasswordChecker(System_Info *a_EnteredPasswords)
{
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <NewPasswordChecker+0x6>
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <NewPasswordChecker+0x8>
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	9b 83       	std	Y+3, r25	; 0x03
     e36:	8a 83       	std	Y+2, r24	; 0x02
	/**-----------------------Local Variables----------------------**/
	uint8 CharCounter = 0;
     e38:	19 82       	std	Y+1, r1	; 0x01
     e3a:	1c c0       	rjmp	.+56     	; 0xe74 <NewPasswordChecker+0x4c>

	while(a_EnteredPasswords->MainPassword[CharCounter] != '\0' || a_EnteredPasswords->ConfirmingPassword[CharCounter] != '\0') /* Getting check */
	{
		if(a_EnteredPasswords->MainPassword[CharCounter] == a_EnteredPasswords->ConfirmingPassword[CharCounter])
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	9b 81       	ldd	r25, Y+3	; 0x03
     e46:	fc 01       	movw	r30, r24
     e48:	e2 0f       	add	r30, r18
     e4a:	f3 1f       	adc	r31, r19
     e4c:	40 81       	ld	r20, Z
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	9b 81       	ldd	r25, Y+3	; 0x03
     e58:	82 0f       	add	r24, r18
     e5a:	93 1f       	adc	r25, r19
     e5c:	fc 01       	movw	r30, r24
     e5e:	36 96       	adiw	r30, 0x06	; 6
     e60:	80 81       	ld	r24, Z
     e62:	48 17       	cp	r20, r24
     e64:	21 f4       	brne	.+8      	; 0xe6e <NewPasswordChecker+0x46>
		{
			CharCounter++;
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	8f 5f       	subi	r24, 0xFF	; 255
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	03 c0       	rjmp	.+6      	; 0xe74 <NewPasswordChecker+0x4c>
		}
		else
		{
			/* Return a false reference as the two passwords doesn't match */
			return 'F';
     e6e:	86 e4       	ldi	r24, 0x46	; 70
     e70:	8c 83       	std	Y+4, r24	; 0x04
     e72:	19 c0       	rjmp	.+50     	; 0xea6 <NewPasswordChecker+0x7e>
uint8 NewPasswordChecker(System_Info *a_EnteredPasswords)
{
	/**-----------------------Local Variables----------------------**/
	uint8 CharCounter = 0;

	while(a_EnteredPasswords->MainPassword[CharCounter] != '\0' || a_EnteredPasswords->ConfirmingPassword[CharCounter] != '\0') /* Getting check */
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	9b 81       	ldd	r25, Y+3	; 0x03
     e7e:	fc 01       	movw	r30, r24
     e80:	e2 0f       	add	r30, r18
     e82:	f3 1f       	adc	r31, r19
     e84:	80 81       	ld	r24, Z
     e86:	88 23       	and	r24, r24
     e88:	c9 f6       	brne	.-78     	; 0xe3c <NewPasswordChecker+0x14>
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	9b 81       	ldd	r25, Y+3	; 0x03
     e94:	82 0f       	add	r24, r18
     e96:	93 1f       	adc	r25, r19
     e98:	fc 01       	movw	r30, r24
     e9a:	36 96       	adiw	r30, 0x06	; 6
     e9c:	80 81       	ld	r24, Z
     e9e:	88 23       	and	r24, r24
     ea0:	69 f6       	brne	.-102    	; 0xe3c <NewPasswordChecker+0x14>
			return 'F';
		}
	}

	/* Return a true reference that the two passwords are matched */
	return 'T';
     ea2:	84 e5       	ldi	r24, 0x54	; 84
     ea4:	8c 83       	std	Y+4, r24	; 0x04
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04

}
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <App_timer1>:
/*
 * Description:
 * This will be the function which will be called back by the Timer
 */
void App_timer1()
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
	g_TimerCounter++;   /* increment the global counter flag with every interrupt */
     ebe:	80 91 91 00 	lds	r24, 0x0091
     ec2:	8f 5f       	subi	r24, 0xFF	; 255
     ec4:	80 93 91 00 	sts	0x0091, r24
}   /* End App_timer1()function */
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <App_timerDelay>:
/*
 * Description:
 * Used to Control the time delay which depends on Timer1 ISR
 */
void App_timerDelay(uint8 delay)
{
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	0f 92       	push	r0
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	89 83       	std	Y+1, r24	; 0x01
	if(3 == delay)
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	83 30       	cpi	r24, 0x03	; 3
     ede:	69 f4       	brne	.+26     	; 0xefa <App_timerDelay+0x2c>
	{

		Timer1_Init(&TIMER1_Config);   /* initialize the timer module with the desired configuration */
     ee0:	88 e6       	ldi	r24, 0x68	; 104
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <Timer1_Init>
		while(g_TimerCounter != 1);         /* wait until the global counter became 2 to make 2 seconds delay */
     ee8:	80 91 91 00 	lds	r24, 0x0091
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	e1 f7       	brne	.-8      	; 0xee8 <App_timerDelay+0x1a>
		g_TimerCounter = 0;                 /* Reset the global counter */
     ef0:	10 92 91 00 	sts	0x0091, r1
		Timer1_deInit();	/* Stop the timer */
     ef4:	0e 94 65 0f 	call	0x1eca	; 0x1eca <Timer1_deInit>
     ef8:	1f c0       	rjmp	.+62     	; 0xf38 <App_timerDelay+0x6a>
	}   /* End if(2==delay) */
	else if(15 == delay)
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	8f 30       	cpi	r24, 0x0F	; 15
     efe:	69 f4       	brne	.+26     	; 0xf1a <App_timerDelay+0x4c>
	{

		Timer1_Init(&TIMER1_Config);
     f00:	88 e6       	ldi	r24, 0x68	; 104
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <Timer1_Init>
		while(g_TimerCounter != 5);   /* wait until the global counter became 15 to make 15 seconds delay */
     f08:	80 91 91 00 	lds	r24, 0x0091
     f0c:	85 30       	cpi	r24, 0x05	; 5
     f0e:	e1 f7       	brne	.-8      	; 0xf08 <App_timerDelay+0x3a>
		g_TimerCounter = 0;
     f10:	10 92 91 00 	sts	0x0091, r1
		Timer1_deInit();
     f14:	0e 94 65 0f 	call	0x1eca	; 0x1eca <Timer1_deInit>
     f18:	0f c0       	rjmp	.+30     	; 0xf38 <App_timerDelay+0x6a>
	}   /* End else if(15==delay) */
	else if(60 == delay)
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	8c 33       	cpi	r24, 0x3C	; 60
     f1e:	61 f4       	brne	.+24     	; 0xf38 <App_timerDelay+0x6a>
	{
		Timer1_Init(&TIMER1_Config);
     f20:	88 e6       	ldi	r24, 0x68	; 104
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <Timer1_Init>
		while(g_TimerCounter != 20);   /* wait until the global counter became 20 to make 1 minute delay */
     f28:	80 91 91 00 	lds	r24, 0x0091
     f2c:	84 31       	cpi	r24, 0x14	; 20
     f2e:	e1 f7       	brne	.-8      	; 0xf28 <App_timerDelay+0x5a>
		g_TimerCounter = 0;
     f30:	10 92 91 00 	sts	0x0091, r1
		Timer1_deInit();
     f34:	0e 94 65 0f 	call	0x1eca	; 0x1eca <Timer1_deInit>
	}   /* End else if(60==delay) */
}
     f38:	0f 90       	pop	r0
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <ConfirmPass>:
 * Description:
 * Used to Confirm a single password received through UART with the saved one
 * inside EEPROM
 */
uint8 ConfirmPass(System_Info *a_PassCheck) /* Confirming the entered password with EEPROM */
{
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	63 97       	sbiw	r28, 0x13	; 19
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	9a 8b       	std	Y+18, r25	; 0x12
     f56:	89 8b       	std	Y+17, r24	; 0x11
	uint8 a_CharCounter = 0;
     f58:	1f 86       	std	Y+15, r1	; 0x0f
     f5a:	90 c0       	rjmp	.+288    	; 0x107c <ConfirmPass+0x13c>
	uint8 value;

	while(a_CharCounter < 5) /* Checking on the 5 numbers */
	{
		EEPROM_readByte(0x0310 + a_CharCounter, &value);/* Reading byte by byte from EEPROM ( SAVED PASS ) */
     f5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	80 5f       	subi	r24, 0xF0	; 240
     f64:	9c 4f       	sbci	r25, 0xFC	; 252
     f66:	9e 01       	movw	r18, r28
     f68:	20 5f       	subi	r18, 0xF0	; 240
     f6a:	3f 4f       	sbci	r19, 0xFF	; 255
     f6c:	b9 01       	movw	r22, r18
     f6e:	0e 94 9a 10 	call	0x2134	; 0x2134 <EEPROM_readByte>
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	a0 e2       	ldi	r26, 0x20	; 32
     f78:	b1 e4       	ldi	r27, 0x41	; 65
     f7a:	8b 87       	std	Y+11, r24	; 0x0b
     f7c:	9c 87       	std	Y+12, r25	; 0x0c
     f7e:	ad 87       	std	Y+13, r26	; 0x0d
     f80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f82:	6b 85       	ldd	r22, Y+11	; 0x0b
     f84:	7c 85       	ldd	r23, Y+12	; 0x0c
     f86:	8d 85       	ldd	r24, Y+13	; 0x0d
     f88:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	4a ef       	ldi	r20, 0xFA	; 250
     f90:	54 e4       	ldi	r21, 0x44	; 68
     f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	8f 83       	std	Y+7, r24	; 0x07
     f9c:	98 87       	std	Y+8, r25	; 0x08
     f9e:	a9 87       	std	Y+9, r26	; 0x09
     fa0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fa2:	6f 81       	ldd	r22, Y+7	; 0x07
     fa4:	78 85       	ldd	r23, Y+8	; 0x08
     fa6:	89 85       	ldd	r24, Y+9	; 0x09
     fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e8       	ldi	r20, 0x80	; 128
     fb0:	5f e3       	ldi	r21, 0x3F	; 63
     fb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fb6:	88 23       	and	r24, r24
     fb8:	2c f4       	brge	.+10     	; 0xfc4 <ConfirmPass+0x84>
		__ticks = 1;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	9e 83       	std	Y+6, r25	; 0x06
     fc0:	8d 83       	std	Y+5, r24	; 0x05
     fc2:	3f c0       	rjmp	.+126    	; 0x1042 <ConfirmPass+0x102>
	else if (__tmp > 65535)
     fc4:	6f 81       	ldd	r22, Y+7	; 0x07
     fc6:	78 85       	ldd	r23, Y+8	; 0x08
     fc8:	89 85       	ldd	r24, Y+9	; 0x09
     fca:	9a 85       	ldd	r25, Y+10	; 0x0a
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	3f ef       	ldi	r19, 0xFF	; 255
     fd0:	4f e7       	ldi	r20, 0x7F	; 127
     fd2:	57 e4       	ldi	r21, 0x47	; 71
     fd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fd8:	18 16       	cp	r1, r24
     fda:	4c f5       	brge	.+82     	; 0x102e <ConfirmPass+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fdc:	6b 85       	ldd	r22, Y+11	; 0x0b
     fde:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e2       	ldi	r20, 0x20	; 32
     fea:	51 e4       	ldi	r21, 0x41	; 65
     fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	bc 01       	movw	r22, r24
     ff6:	cd 01       	movw	r24, r26
     ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	9e 83       	std	Y+6, r25	; 0x06
    1002:	8d 83       	std	Y+5, r24	; 0x05
    1004:	0f c0       	rjmp	.+30     	; 0x1024 <ConfirmPass+0xe4>
    1006:	88 ec       	ldi	r24, 0xC8	; 200
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	9c 83       	std	Y+4, r25	; 0x04
    100c:	8b 83       	std	Y+3, r24	; 0x03
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	9c 81       	ldd	r25, Y+4	; 0x04
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	f1 f7       	brne	.-4      	; 0x1012 <ConfirmPass+0xd2>
    1016:	9c 83       	std	Y+4, r25	; 0x04
    1018:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    101a:	8d 81       	ldd	r24, Y+5	; 0x05
    101c:	9e 81       	ldd	r25, Y+6	; 0x06
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	9e 83       	std	Y+6, r25	; 0x06
    1022:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	9e 81       	ldd	r25, Y+6	; 0x06
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	69 f7       	brne	.-38     	; 0x1006 <ConfirmPass+0xc6>
    102c:	14 c0       	rjmp	.+40     	; 0x1056 <ConfirmPass+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    102e:	6f 81       	ldd	r22, Y+7	; 0x07
    1030:	78 85       	ldd	r23, Y+8	; 0x08
    1032:	89 85       	ldd	r24, Y+9	; 0x09
    1034:	9a 85       	ldd	r25, Y+10	; 0x0a
    1036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	9e 83       	std	Y+6, r25	; 0x06
    1040:	8d 83       	std	Y+5, r24	; 0x05
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	9e 81       	ldd	r25, Y+6	; 0x06
    1046:	9a 83       	std	Y+2, r25	; 0x02
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	9a 81       	ldd	r25, Y+2	; 0x02
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	f1 f7       	brne	.-4      	; 0x104e <ConfirmPass+0x10e>
    1052:	9a 83       	std	Y+2, r25	; 0x02
    1054:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);

		if(value == a_PassCheck->MainPassword[a_CharCounter])
    1056:	8f 85       	ldd	r24, Y+15	; 0x0f
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	89 89       	ldd	r24, Y+17	; 0x11
    105e:	9a 89       	ldd	r25, Y+18	; 0x12
    1060:	fc 01       	movw	r30, r24
    1062:	e2 0f       	add	r30, r18
    1064:	f3 1f       	adc	r31, r19
    1066:	90 81       	ld	r25, Z
    1068:	88 89       	ldd	r24, Y+16	; 0x10
    106a:	98 17       	cp	r25, r24
    106c:	21 f4       	brne	.+8      	; 0x1076 <ConfirmPass+0x136>
		{
			a_CharCounter++;
    106e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1070:	8f 5f       	subi	r24, 0xFF	; 255
    1072:	8f 87       	std	Y+15, r24	; 0x0f
    1074:	03 c0       	rjmp	.+6      	; 0x107c <ConfirmPass+0x13c>
		}
		else
		{
			return 'F'; /* Incorrect Password */
    1076:	86 e4       	ldi	r24, 0x46	; 70
    1078:	8b 8b       	std	Y+19, r24	; 0x13
    107a:	06 c0       	rjmp	.+12     	; 0x1088 <ConfirmPass+0x148>
uint8 ConfirmPass(System_Info *a_PassCheck) /* Confirming the entered password with EEPROM */
{
	uint8 a_CharCounter = 0;
	uint8 value;

	while(a_CharCounter < 5) /* Checking on the 5 numbers */
    107c:	8f 85       	ldd	r24, Y+15	; 0x0f
    107e:	85 30       	cpi	r24, 0x05	; 5
    1080:	08 f4       	brcc	.+2      	; 0x1084 <ConfirmPass+0x144>
    1082:	6c cf       	rjmp	.-296    	; 0xf5c <ConfirmPass+0x1c>
		else
		{
			return 'F'; /* Incorrect Password */
		}
	}
	return 'T'; /* Correct Password */
    1084:	84 e5       	ldi	r24, 0x54	; 84
    1086:	8b 8b       	std	Y+19, r24	; 0x13
    1088:	8b 89       	ldd	r24, Y+19	; 0x13
}
    108a:	63 96       	adiw	r28, 0x13	; 19
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <OptionControl>:
 * Receives from HMI_ECU a byte at first and after executing each stage
 * to identify which stage should the Control execute right now
 * This byte is just a Symbol as 'S' from Shutdown_System , etc
 */
void OptionControl() /* To sync with control_ecu which stage it should be */
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <OptionControl+0x6>
    10a2:	0f 92       	push	r0
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
	uint8 LiveStage;

	UART_sendByte(CONTROL_READY);
    10a8:	80 e1       	ldi	r24, 0x10	; 16
    10aa:	0e 94 39 13 	call	0x2672	; 0x2672 <UART_sendByte>
	LiveStage = UART_receiveByte(); /* Receiving only a byte which indicates which state we are */
    10ae:	0e 94 50 13 	call	0x26a0	; 0x26a0 <UART_receiveByte>
    10b2:	89 83       	std	Y+1, r24	; 0x01



	switch(LiveStage)
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	3b 83       	std	Y+3, r19	; 0x03
    10bc:	2a 83       	std	Y+2, r18	; 0x02
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	9b 81       	ldd	r25, Y+3	; 0x03
    10c2:	89 34       	cpi	r24, 0x49	; 73
    10c4:	91 05       	cpc	r25, r1
    10c6:	09 f1       	breq	.+66     	; 0x110a <OptionControl+0x6e>
    10c8:	2a 81       	ldd	r18, Y+2	; 0x02
    10ca:	3b 81       	ldd	r19, Y+3	; 0x03
    10cc:	2a 34       	cpi	r18, 0x4A	; 74
    10ce:	31 05       	cpc	r19, r1
    10d0:	34 f4       	brge	.+12     	; 0x10de <OptionControl+0x42>
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	9b 81       	ldd	r25, Y+3	; 0x03
    10d6:	83 34       	cpi	r24, 0x43	; 67
    10d8:	91 05       	cpc	r25, r1
    10da:	79 f0       	breq	.+30     	; 0x10fa <OptionControl+0x5e>
    10dc:	19 c0       	rjmp	.+50     	; 0x1110 <OptionControl+0x74>
    10de:	2a 81       	ldd	r18, Y+2	; 0x02
    10e0:	3b 81       	ldd	r19, Y+3	; 0x03
    10e2:	2e 34       	cpi	r18, 0x4E	; 78
    10e4:	31 05       	cpc	r19, r1
    10e6:	31 f0       	breq	.+12     	; 0x10f4 <OptionControl+0x58>
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	9b 81       	ldd	r25, Y+3	; 0x03
    10ec:	83 35       	cpi	r24, 0x53	; 83
    10ee:	91 05       	cpc	r25, r1
    10f0:	41 f0       	breq	.+16     	; 0x1102 <OptionControl+0x66>
    10f2:	0e c0       	rjmp	.+28     	; 0x1110 <OptionControl+0x74>
	{
	case('N'):
							g_SystemStep = NEW_PASS;
    10f4:	10 92 92 00 	sts	0x0092, r1
    10f8:	0b c0       	rjmp	.+22     	; 0x1110 <OptionControl+0x74>
	break;

	case('C'):
							g_SystemStep = CONFIRMATION_STAGE;
    10fa:	82 e0       	ldi	r24, 0x02	; 2
    10fc:	80 93 92 00 	sts	0x0092, r24
    1100:	07 c0       	rjmp	.+14     	; 0x1110 <OptionControl+0x74>
	break;

	case('S'):
							g_SystemStep = SHUTDOWN_SYSTEM;
    1102:	83 e0       	ldi	r24, 0x03	; 3
    1104:	80 93 92 00 	sts	0x0092, r24
    1108:	03 c0       	rjmp	.+6      	; 0x1110 <OptionControl+0x74>
	break;

	case('I'):
					g_SystemStep = IN_DOOR;
    110a:	84 e0       	ldi	r24, 0x04	; 4
    110c:	80 93 92 00 	sts	0x0092, r24
	break;

	}

}
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <DCMotor_init>:
#include "TIMER.h"

/**-------------------------Function Definition Section-------------**/

void DCMotor_init()
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Motor is connected to L293D Driver
	 */
	GPIO_setupPinDirection(DC_MOTOR_IN1_OUTPUT_PORT_ID, L293D_IN1_ID, PIN_OUTPUT);
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	61 e0       	ldi	r22, 0x01	; 1
    1128:	41 e0       	ldi	r20, 0x01	; 1
    112a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_IN2_OUTPUT_PORT_ID, L293D_IN2_ID, PIN_OUTPUT);
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	62 e0       	ldi	r22, 0x02	; 2
    1132:	41 e0       	ldi	r20, 0x01	; 1
    1134:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_EN_PORT_ID, 		L293D_EN1_ID, PIN_OUTPUT);
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	63 e0       	ldi	r22, 0x03	; 3
    113c:	41 e0       	ldi	r20, 0x01	; 1
    113e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>

} /* End DCMotor_init function */
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <DcMotor_Rotate>:

/*----------------------------------------------------------------------------*/

void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	00 d0       	rcall	.+0      	; 0x114e <DcMotor_Rotate+0x6>
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	6a 83       	std	Y+2, r22	; 0x02
	/* Selecting the Direction of the MOTOR */
	if(state == ClockWise)
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	88 23       	and	r24, r24
    115a:	59 f4       	brne	.+22     	; 0x1172 <DcMotor_Rotate+0x2a>
	{
		GPIO_writePin(DC_MOTOR_IN1_OUTPUT_PORT_ID, L293D_IN1_ID, LOGIC_HIGH);
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	41 e0       	ldi	r20, 0x01	; 1
    1162:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_OUTPUT_PORT_ID, L293D_IN2_ID, LOGIC_LOW);
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	62 e0       	ldi	r22, 0x02	; 2
    116a:	40 e0       	ldi	r20, 0x00	; 0
    116c:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
    1170:	0d c0       	rjmp	.+26     	; 0x118c <DcMotor_Rotate+0x44>
	}
	else if(state == Anti_ClockWise)
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	51 f4       	brne	.+20     	; 0x118c <DcMotor_Rotate+0x44>
	{
		GPIO_writePin(DC_MOTOR_IN2_OUTPUT_PORT_ID, L293D_IN2_ID, LOGIC_HIGH);
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	62 e0       	ldi	r22, 0x02	; 2
    117c:	41 e0       	ldi	r20, 0x01	; 1
    117e:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN1_OUTPUT_PORT_ID, L293D_IN1_ID, LOGIC_LOW);
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	61 e0       	ldi	r22, 0x01	; 1
    1186:	40 e0       	ldi	r20, 0x00	; 0
    1188:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
	}

	/* Sending the compare value to Timer everytime to change the motor speed */
	Timer0_PWM_Activate(&speed);
    118c:	ce 01       	movw	r24, r28
    118e:	02 96       	adiw	r24, 0x02	; 2
    1190:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <Timer0_PWM_Activate>
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <DCMotor_stop>:

/*----------------------------------------------------------------------------*/

void DCMotor_stop()
{
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(DC_MOTOR_EN_PORT_ID, L293D_EN1_ID , LOGIC_LOW); /* Sending speed 0 to DCMotor_Speed() */
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	63 e0       	ldi	r22, 0x03	; 3
    11aa:	40 e0       	ldi	r20, 0x00	; 0
    11ac:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
}   /* End DCMotor_stop()function */
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <GPIO_setupPinDirection+0x6>
    11bc:	00 d0       	rcall	.+0      	; 0x11be <GPIO_setupPinDirection+0x8>
    11be:	0f 92       	push	r0
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	6a 83       	std	Y+2, r22	; 0x02
    11c8:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	84 30       	cpi	r24, 0x04	; 4
    11ce:	08 f0       	brcs	.+2      	; 0x11d2 <GPIO_setupPinDirection+0x1c>
    11d0:	d5 c0       	rjmp	.+426    	; 0x137c <GPIO_setupPinDirection+0x1c6>
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	88 30       	cpi	r24, 0x08	; 8
    11d6:	08 f0       	brcs	.+2      	; 0x11da <GPIO_setupPinDirection+0x24>
    11d8:	d1 c0       	rjmp	.+418    	; 0x137c <GPIO_setupPinDirection+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	3d 83       	std	Y+5, r19	; 0x05
    11e2:	2c 83       	std	Y+4, r18	; 0x04
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	9d 81       	ldd	r25, Y+5	; 0x05
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	91 05       	cpc	r25, r1
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <GPIO_setupPinDirection+0x3a>
    11ee:	43 c0       	rjmp	.+134    	; 0x1276 <GPIO_setupPinDirection+0xc0>
    11f0:	2c 81       	ldd	r18, Y+4	; 0x04
    11f2:	3d 81       	ldd	r19, Y+5	; 0x05
    11f4:	22 30       	cpi	r18, 0x02	; 2
    11f6:	31 05       	cpc	r19, r1
    11f8:	2c f4       	brge	.+10     	; 0x1204 <GPIO_setupPinDirection+0x4e>
    11fa:	8c 81       	ldd	r24, Y+4	; 0x04
    11fc:	9d 81       	ldd	r25, Y+5	; 0x05
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	71 f0       	breq	.+28     	; 0x121e <GPIO_setupPinDirection+0x68>
    1202:	bc c0       	rjmp	.+376    	; 0x137c <GPIO_setupPinDirection+0x1c6>
    1204:	2c 81       	ldd	r18, Y+4	; 0x04
    1206:	3d 81       	ldd	r19, Y+5	; 0x05
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	09 f4       	brne	.+2      	; 0x1210 <GPIO_setupPinDirection+0x5a>
    120e:	5f c0       	rjmp	.+190    	; 0x12ce <GPIO_setupPinDirection+0x118>
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	9d 81       	ldd	r25, Y+5	; 0x05
    1214:	83 30       	cpi	r24, 0x03	; 3
    1216:	91 05       	cpc	r25, r1
    1218:	09 f4       	brne	.+2      	; 0x121c <GPIO_setupPinDirection+0x66>
    121a:	85 c0       	rjmp	.+266    	; 0x1326 <GPIO_setupPinDirection+0x170>
    121c:	af c0       	rjmp	.+350    	; 0x137c <GPIO_setupPinDirection+0x1c6>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(direction == PIN_INPUT)
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	88 23       	and	r24, r24
    1222:	a9 f4       	brne	.+42     	; 0x124e <GPIO_setupPinDirection+0x98>
			{
				CLEAR_BIT(DDRA,pin_num);
    1224:	aa e3       	ldi	r26, 0x3A	; 58
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	ea e3       	ldi	r30, 0x3A	; 58
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <GPIO_setupPinDirection+0x8c>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <GPIO_setupPinDirection+0x88>
    1246:	80 95       	com	r24
    1248:	84 23       	and	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	97 c0       	rjmp	.+302    	; 0x137c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRA,pin_num);
    124e:	aa e3       	ldi	r26, 0x3A	; 58
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	ea e3       	ldi	r30, 0x3A	; 58
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <GPIO_setupPinDirection+0xb6>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <GPIO_setupPinDirection+0xb2>
    1270:	84 2b       	or	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	83 c0       	rjmp	.+262    	; 0x137c <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(direction == PIN_INPUT)
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	88 23       	and	r24, r24
    127a:	a9 f4       	brne	.+42     	; 0x12a6 <GPIO_setupPinDirection+0xf0>
			{
				CLEAR_BIT(DDRB,pin_num);
    127c:	a7 e3       	ldi	r26, 0x37	; 55
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e7 e3       	ldi	r30, 0x37	; 55
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <GPIO_setupPinDirection+0xe4>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <GPIO_setupPinDirection+0xe0>
    129e:	80 95       	com	r24
    12a0:	84 23       	and	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	6b c0       	rjmp	.+214    	; 0x137c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRB,pin_num);
    12a6:	a7 e3       	ldi	r26, 0x37	; 55
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e7 e3       	ldi	r30, 0x37	; 55
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <GPIO_setupPinDirection+0x10e>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <GPIO_setupPinDirection+0x10a>
    12c8:	84 2b       	or	r24, r20
    12ca:	8c 93       	st	X, r24
    12cc:	57 c0       	rjmp	.+174    	; 0x137c <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(direction == PIN_INPUT)
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	88 23       	and	r24, r24
    12d2:	a9 f4       	brne	.+42     	; 0x12fe <GPIO_setupPinDirection+0x148>
			{
				CLEAR_BIT(DDRC,pin_num);
    12d4:	a4 e3       	ldi	r26, 0x34	; 52
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e4 e3       	ldi	r30, 0x34	; 52
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <GPIO_setupPinDirection+0x13c>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <GPIO_setupPinDirection+0x138>
    12f6:	80 95       	com	r24
    12f8:	84 23       	and	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	3f c0       	rjmp	.+126    	; 0x137c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRC,pin_num);
    12fe:	a4 e3       	ldi	r26, 0x34	; 52
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e4 e3       	ldi	r30, 0x34	; 52
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <GPIO_setupPinDirection+0x166>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <GPIO_setupPinDirection+0x162>
    1320:	84 2b       	or	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	2b c0       	rjmp	.+86     	; 0x137c <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(direction == PIN_INPUT)
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	88 23       	and	r24, r24
    132a:	a9 f4       	brne	.+42     	; 0x1356 <GPIO_setupPinDirection+0x1a0>
			{
				CLEAR_BIT(DDRD,pin_num);
    132c:	a1 e3       	ldi	r26, 0x31	; 49
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e1 e3       	ldi	r30, 0x31	; 49
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <GPIO_setupPinDirection+0x194>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <GPIO_setupPinDirection+0x190>
    134e:	80 95       	com	r24
    1350:	84 23       	and	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	13 c0       	rjmp	.+38     	; 0x137c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRD,pin_num);
    1356:	a1 e3       	ldi	r26, 0x31	; 49
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e1 e3       	ldi	r30, 0x31	; 49
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <GPIO_setupPinDirection+0x1be>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <GPIO_setupPinDirection+0x1ba>
    1378:	84 2b       	or	r24, r20
    137a:	8c 93       	st	X, r24
			}
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <GPIO_writePin+0x6>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <GPIO_writePin+0x8>
    1394:	0f 92       	push	r0
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	6a 83       	std	Y+2, r22	; 0x02
    139e:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	84 30       	cpi	r24, 0x04	; 4
    13a4:	08 f0       	brcs	.+2      	; 0x13a8 <GPIO_writePin+0x1c>
    13a6:	d5 c0       	rjmp	.+426    	; 0x1552 <GPIO_writePin+0x1c6>
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	88 30       	cpi	r24, 0x08	; 8
    13ac:	08 f0       	brcs	.+2      	; 0x13b0 <GPIO_writePin+0x24>
    13ae:	d1 c0       	rjmp	.+418    	; 0x1552 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	3d 83       	std	Y+5, r19	; 0x05
    13b8:	2c 83       	std	Y+4, r18	; 0x04
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	91 05       	cpc	r25, r1
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <GPIO_writePin+0x3a>
    13c4:	43 c0       	rjmp	.+134    	; 0x144c <GPIO_writePin+0xc0>
    13c6:	2c 81       	ldd	r18, Y+4	; 0x04
    13c8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ca:	22 30       	cpi	r18, 0x02	; 2
    13cc:	31 05       	cpc	r19, r1
    13ce:	2c f4       	brge	.+10     	; 0x13da <GPIO_writePin+0x4e>
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	9d 81       	ldd	r25, Y+5	; 0x05
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	71 f0       	breq	.+28     	; 0x13f4 <GPIO_writePin+0x68>
    13d8:	bc c0       	rjmp	.+376    	; 0x1552 <GPIO_writePin+0x1c6>
    13da:	2c 81       	ldd	r18, Y+4	; 0x04
    13dc:	3d 81       	ldd	r19, Y+5	; 0x05
    13de:	22 30       	cpi	r18, 0x02	; 2
    13e0:	31 05       	cpc	r19, r1
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <GPIO_writePin+0x5a>
    13e4:	5f c0       	rjmp	.+190    	; 0x14a4 <GPIO_writePin+0x118>
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	91 05       	cpc	r25, r1
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <GPIO_writePin+0x66>
    13f0:	85 c0       	rjmp	.+266    	; 0x14fc <GPIO_writePin+0x170>
    13f2:	af c0       	rjmp	.+350    	; 0x1552 <GPIO_writePin+0x1c6>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(value == LOGIC_LOW)
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	88 23       	and	r24, r24
    13f8:	a9 f4       	brne	.+42     	; 0x1424 <GPIO_writePin+0x98>
			{
				CLEAR_BIT(PORTA,pin_num);
    13fa:	ab e3       	ldi	r26, 0x3B	; 59
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	eb e3       	ldi	r30, 0x3B	; 59
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 2e       	mov	r0, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <GPIO_writePin+0x8c>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	0a 94       	dec	r0
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <GPIO_writePin+0x88>
    141c:	80 95       	com	r24
    141e:	84 23       	and	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	97 c0       	rjmp	.+302    	; 0x1552 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTA,pin_num);
    1424:	ab e3       	ldi	r26, 0x3B	; 59
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	eb e3       	ldi	r30, 0x3B	; 59
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <GPIO_writePin+0xb6>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <GPIO_writePin+0xb2>
    1446:	84 2b       	or	r24, r20
    1448:	8c 93       	st	X, r24
    144a:	83 c0       	rjmp	.+262    	; 0x1552 <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(value == LOGIC_LOW)
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	88 23       	and	r24, r24
    1450:	a9 f4       	brne	.+42     	; 0x147c <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB,pin_num);
    1452:	a8 e3       	ldi	r26, 0x38	; 56
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e8 e3       	ldi	r30, 0x38	; 56
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <GPIO_writePin+0xe4>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <GPIO_writePin+0xe0>
    1474:	80 95       	com	r24
    1476:	84 23       	and	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	6b c0       	rjmp	.+214    	; 0x1552 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB,pin_num);
    147c:	a8 e3       	ldi	r26, 0x38	; 56
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e8 e3       	ldi	r30, 0x38	; 56
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <GPIO_writePin+0x10e>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <GPIO_writePin+0x10a>
    149e:	84 2b       	or	r24, r20
    14a0:	8c 93       	st	X, r24
    14a2:	57 c0       	rjmp	.+174    	; 0x1552 <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(value == LOGIC_LOW)
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	88 23       	and	r24, r24
    14a8:	a9 f4       	brne	.+42     	; 0x14d4 <GPIO_writePin+0x148>
			{
				CLEAR_BIT(PORTC,pin_num);
    14aa:	a5 e3       	ldi	r26, 0x35	; 53
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e5 e3       	ldi	r30, 0x35	; 53
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <GPIO_writePin+0x13c>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <GPIO_writePin+0x138>
    14cc:	80 95       	com	r24
    14ce:	84 23       	and	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	3f c0       	rjmp	.+126    	; 0x1552 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTC,pin_num);
    14d4:	a5 e3       	ldi	r26, 0x35	; 53
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e5 e3       	ldi	r30, 0x35	; 53
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	48 2f       	mov	r20, r24
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 2e       	mov	r0, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <GPIO_writePin+0x166>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <GPIO_writePin+0x162>
    14f6:	84 2b       	or	r24, r20
    14f8:	8c 93       	st	X, r24
    14fa:	2b c0       	rjmp	.+86     	; 0x1552 <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(value == LOGIC_LOW)
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	88 23       	and	r24, r24
    1500:	a9 f4       	brne	.+42     	; 0x152c <GPIO_writePin+0x1a0>
			{
				CLEAR_BIT(PORTD,pin_num);
    1502:	a2 e3       	ldi	r26, 0x32	; 50
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e2 e3       	ldi	r30, 0x32	; 50
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <GPIO_writePin+0x194>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <GPIO_writePin+0x190>
    1524:	80 95       	com	r24
    1526:	84 23       	and	r24, r20
    1528:	8c 93       	st	X, r24
    152a:	13 c0       	rjmp	.+38     	; 0x1552 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTD,pin_num);
    152c:	a2 e3       	ldi	r26, 0x32	; 50
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e2 e3       	ldi	r30, 0x32	; 50
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <GPIO_writePin+0x1be>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <GPIO_writePin+0x1ba>
    154e:	84 2b       	or	r24, r20
    1550:	8c 93       	st	X, r24
			}
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	00 d0       	rcall	.+0      	; 0x1568 <GPIO_readPin+0x6>
    1568:	00 d0       	rcall	.+0      	; 0x156a <GPIO_readPin+0x8>
    156a:	0f 92       	push	r0
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	8a 83       	std	Y+2, r24	; 0x02
    1572:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_pinValue = LOGIC_LOW;
    1574:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	84 30       	cpi	r24, 0x04	; 4
    157a:	08 f0       	brcs	.+2      	; 0x157e <GPIO_readPin+0x1c>
    157c:	84 c0       	rjmp	.+264    	; 0x1686 <GPIO_readPin+0x124>
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	88 30       	cpi	r24, 0x08	; 8
    1582:	08 f0       	brcs	.+2      	; 0x1586 <GPIO_readPin+0x24>
    1584:	80 c0       	rjmp	.+256    	; 0x1686 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	3d 83       	std	Y+5, r19	; 0x05
    158e:	2c 83       	std	Y+4, r18	; 0x04
    1590:	4c 81       	ldd	r20, Y+4	; 0x04
    1592:	5d 81       	ldd	r21, Y+5	; 0x05
    1594:	41 30       	cpi	r20, 0x01	; 1
    1596:	51 05       	cpc	r21, r1
    1598:	79 f1       	breq	.+94     	; 0x15f8 <GPIO_readPin+0x96>
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	9d 81       	ldd	r25, Y+5	; 0x05
    159e:	82 30       	cpi	r24, 0x02	; 2
    15a0:	91 05       	cpc	r25, r1
    15a2:	34 f4       	brge	.+12     	; 0x15b0 <GPIO_readPin+0x4e>
    15a4:	2c 81       	ldd	r18, Y+4	; 0x04
    15a6:	3d 81       	ldd	r19, Y+5	; 0x05
    15a8:	21 15       	cp	r18, r1
    15aa:	31 05       	cpc	r19, r1
    15ac:	69 f0       	breq	.+26     	; 0x15c8 <GPIO_readPin+0x66>
    15ae:	6b c0       	rjmp	.+214    	; 0x1686 <GPIO_readPin+0x124>
    15b0:	4c 81       	ldd	r20, Y+4	; 0x04
    15b2:	5d 81       	ldd	r21, Y+5	; 0x05
    15b4:	42 30       	cpi	r20, 0x02	; 2
    15b6:	51 05       	cpc	r21, r1
    15b8:	b9 f1       	breq	.+110    	; 0x1628 <GPIO_readPin+0xc6>
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	9d 81       	ldd	r25, Y+5	; 0x05
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	91 05       	cpc	r25, r1
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <GPIO_readPin+0x64>
    15c4:	49 c0       	rjmp	.+146    	; 0x1658 <GPIO_readPin+0xf6>
    15c6:	5f c0       	rjmp	.+190    	; 0x1686 <GPIO_readPin+0x124>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    15c8:	e9 e3       	ldi	r30, 0x39	; 57
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	88 2f       	mov	r24, r24
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	a9 01       	movw	r20, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <GPIO_readPin+0x7e>
    15dc:	55 95       	asr	r21
    15de:	47 95       	ror	r20
    15e0:	8a 95       	dec	r24
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <GPIO_readPin+0x7a>
    15e4:	ca 01       	movw	r24, r20
    15e6:	81 70       	andi	r24, 0x01	; 1
    15e8:	90 70       	andi	r25, 0x00	; 0
    15ea:	88 23       	and	r24, r24
    15ec:	19 f0       	breq	.+6      	; 0x15f4 <GPIO_readPin+0x92>
			{
				a_pinValue = LOGIC_HIGH;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	49 c0       	rjmp	.+146    	; 0x1686 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
    15f4:	19 82       	std	Y+1, r1	; 0x01
    15f6:	47 c0       	rjmp	.+142    	; 0x1686 <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    15f8:	e6 e3       	ldi	r30, 0x36	; 54
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a9 01       	movw	r20, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <GPIO_readPin+0xae>
    160c:	55 95       	asr	r21
    160e:	47 95       	ror	r20
    1610:	8a 95       	dec	r24
    1612:	e2 f7       	brpl	.-8      	; 0x160c <GPIO_readPin+0xaa>
    1614:	ca 01       	movw	r24, r20
    1616:	81 70       	andi	r24, 0x01	; 1
    1618:	90 70       	andi	r25, 0x00	; 0
    161a:	88 23       	and	r24, r24
    161c:	19 f0       	breq	.+6      	; 0x1624 <GPIO_readPin+0xc2>
			{
				a_pinValue = LOGIC_HIGH;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	31 c0       	rjmp	.+98     	; 0x1686 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
    1624:	19 82       	std	Y+1, r1	; 0x01
    1626:	2f c0       	rjmp	.+94     	; 0x1686 <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1628:	e3 e3       	ldi	r30, 0x33	; 51
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	88 2f       	mov	r24, r24
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	a9 01       	movw	r20, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <GPIO_readPin+0xde>
    163c:	55 95       	asr	r21
    163e:	47 95       	ror	r20
    1640:	8a 95       	dec	r24
    1642:	e2 f7       	brpl	.-8      	; 0x163c <GPIO_readPin+0xda>
    1644:	ca 01       	movw	r24, r20
    1646:	81 70       	andi	r24, 0x01	; 1
    1648:	90 70       	andi	r25, 0x00	; 0
    164a:	88 23       	and	r24, r24
    164c:	19 f0       	breq	.+6      	; 0x1654 <GPIO_readPin+0xf2>
			{
				a_pinValue = LOGIC_HIGH;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	19 c0       	rjmp	.+50     	; 0x1686 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
    1654:	19 82       	std	Y+1, r1	; 0x01
    1656:	17 c0       	rjmp	.+46     	; 0x1686 <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1658:	e0 e3       	ldi	r30, 0x30	; 48
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	a9 01       	movw	r20, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <GPIO_readPin+0x10e>
    166c:	55 95       	asr	r21
    166e:	47 95       	ror	r20
    1670:	8a 95       	dec	r24
    1672:	e2 f7       	brpl	.-8      	; 0x166c <GPIO_readPin+0x10a>
    1674:	ca 01       	movw	r24, r20
    1676:	81 70       	andi	r24, 0x01	; 1
    1678:	90 70       	andi	r25, 0x00	; 0
    167a:	88 23       	and	r24, r24
    167c:	19 f0       	breq	.+6      	; 0x1684 <GPIO_readPin+0x122>
			{
				a_pinValue = LOGIC_HIGH;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	01 c0       	rjmp	.+2      	; 0x1686 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
    1684:	19 82       	std	Y+1, r1	; 0x01
			break;
/*----------------------------------------------------------------------------*/
		}
	}

	return a_pinValue;
    1686:	89 81       	ldd	r24, Y+1	; 0x01
}
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	00 d0       	rcall	.+0      	; 0x169e <GPIO_setupPortDirection+0x6>
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <GPIO_setupPortDirection+0x8>
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS) /* Corner Case : If input was wrong */
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	84 30       	cpi	r24, 0x04	; 4
    16ac:	90 f5       	brcc	.+100    	; 0x1712 <GPIO_setupPortDirection+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	3c 83       	std	Y+4, r19	; 0x04
    16b6:	2b 83       	std	Y+3, r18	; 0x03
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	81 30       	cpi	r24, 0x01	; 1
    16be:	91 05       	cpc	r25, r1
    16c0:	d1 f0       	breq	.+52     	; 0x16f6 <GPIO_setupPortDirection+0x5e>
    16c2:	2b 81       	ldd	r18, Y+3	; 0x03
    16c4:	3c 81       	ldd	r19, Y+4	; 0x04
    16c6:	22 30       	cpi	r18, 0x02	; 2
    16c8:	31 05       	cpc	r19, r1
    16ca:	2c f4       	brge	.+10     	; 0x16d6 <GPIO_setupPortDirection+0x3e>
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	61 f0       	breq	.+24     	; 0x16ec <GPIO_setupPortDirection+0x54>
    16d4:	1e c0       	rjmp	.+60     	; 0x1712 <GPIO_setupPortDirection+0x7a>
    16d6:	2b 81       	ldd	r18, Y+3	; 0x03
    16d8:	3c 81       	ldd	r19, Y+4	; 0x04
    16da:	22 30       	cpi	r18, 0x02	; 2
    16dc:	31 05       	cpc	r19, r1
    16de:	81 f0       	breq	.+32     	; 0x1700 <GPIO_setupPortDirection+0x68>
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	83 30       	cpi	r24, 0x03	; 3
    16e6:	91 05       	cpc	r25, r1
    16e8:	81 f0       	breq	.+32     	; 0x170a <GPIO_setupPortDirection+0x72>
    16ea:	13 c0       	rjmp	.+38     	; 0x1712 <GPIO_setupPortDirection+0x7a>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			DDRA = direction;
    16ec:	ea e3       	ldi	r30, 0x3A	; 58
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	80 83       	st	Z, r24
    16f4:	0e c0       	rjmp	.+28     	; 0x1712 <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			DDRB = direction;
    16f6:	e7 e3       	ldi	r30, 0x37	; 55
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	80 83       	st	Z, r24
    16fe:	09 c0       	rjmp	.+18     	; 0x1712 <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			DDRC = direction;
    1700:	e4 e3       	ldi	r30, 0x34	; 52
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	80 83       	st	Z, r24
    1708:	04 c0       	rjmp	.+8      	; 0x1712 <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			DDRD = direction;
    170a:	e1 e3       	ldi	r30, 0x31	; 49
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	80 83       	st	Z, r24
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	00 d0       	rcall	.+0      	; 0x1726 <GPIO_writePort+0x6>
    1726:	00 d0       	rcall	.+0      	; 0x1728 <GPIO_writePort+0x8>
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS) /* Corner Case : If input was wrong */
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	85 30       	cpi	r24, 0x05	; 5
    1734:	90 f5       	brcc	.+100    	; 0x179a <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	3c 83       	std	Y+4, r19	; 0x04
    173e:	2b 83       	std	Y+3, r18	; 0x03
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	81 30       	cpi	r24, 0x01	; 1
    1746:	91 05       	cpc	r25, r1
    1748:	d1 f0       	breq	.+52     	; 0x177e <GPIO_writePort+0x5e>
    174a:	2b 81       	ldd	r18, Y+3	; 0x03
    174c:	3c 81       	ldd	r19, Y+4	; 0x04
    174e:	22 30       	cpi	r18, 0x02	; 2
    1750:	31 05       	cpc	r19, r1
    1752:	2c f4       	brge	.+10     	; 0x175e <GPIO_writePort+0x3e>
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	9c 81       	ldd	r25, Y+4	; 0x04
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	61 f0       	breq	.+24     	; 0x1774 <GPIO_writePort+0x54>
    175c:	1e c0       	rjmp	.+60     	; 0x179a <GPIO_writePort+0x7a>
    175e:	2b 81       	ldd	r18, Y+3	; 0x03
    1760:	3c 81       	ldd	r19, Y+4	; 0x04
    1762:	22 30       	cpi	r18, 0x02	; 2
    1764:	31 05       	cpc	r19, r1
    1766:	81 f0       	breq	.+32     	; 0x1788 <GPIO_writePort+0x68>
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	9c 81       	ldd	r25, Y+4	; 0x04
    176c:	83 30       	cpi	r24, 0x03	; 3
    176e:	91 05       	cpc	r25, r1
    1770:	81 f0       	breq	.+32     	; 0x1792 <GPIO_writePort+0x72>
    1772:	13 c0       	rjmp	.+38     	; 0x179a <GPIO_writePort+0x7a>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			PORTA = value;
    1774:	eb e3       	ldi	r30, 0x3B	; 59
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	80 83       	st	Z, r24
    177c:	0e c0       	rjmp	.+28     	; 0x179a <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			PORTB = value;
    177e:	e8 e3       	ldi	r30, 0x38	; 56
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	80 83       	st	Z, r24
    1786:	09 c0       	rjmp	.+18     	; 0x179a <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			PORTC = value;
    1788:	e5 e3       	ldi	r30, 0x35	; 53
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	80 83       	st	Z, r24
    1790:	04 c0       	rjmp	.+8      	; 0x179a <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			PORTD = value;
    1792:	e2 e3       	ldi	r30, 0x32	; 50
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	80 83       	st	Z, r24
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	cf 91       	pop	r28
    17a4:	df 91       	pop	r29
    17a6:	08 95       	ret

000017a8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <GPIO_readPort+0x6>
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <GPIO_readPort+0x8>
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_portValue = LOGIC_LOW;
    17b6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	84 30       	cpi	r24, 0x04	; 4
    17bc:	90 f5       	brcc	.+100    	; 0x1822 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	3c 83       	std	Y+4, r19	; 0x04
    17c6:	2b 83       	std	Y+3, r18	; 0x03
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	91 05       	cpc	r25, r1
    17d0:	d1 f0       	breq	.+52     	; 0x1806 <GPIO_readPort+0x5e>
    17d2:	2b 81       	ldd	r18, Y+3	; 0x03
    17d4:	3c 81       	ldd	r19, Y+4	; 0x04
    17d6:	22 30       	cpi	r18, 0x02	; 2
    17d8:	31 05       	cpc	r19, r1
    17da:	2c f4       	brge	.+10     	; 0x17e6 <GPIO_readPort+0x3e>
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	61 f0       	breq	.+24     	; 0x17fc <GPIO_readPort+0x54>
    17e4:	1e c0       	rjmp	.+60     	; 0x1822 <GPIO_readPort+0x7a>
    17e6:	2b 81       	ldd	r18, Y+3	; 0x03
    17e8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ea:	22 30       	cpi	r18, 0x02	; 2
    17ec:	31 05       	cpc	r19, r1
    17ee:	81 f0       	breq	.+32     	; 0x1810 <GPIO_readPort+0x68>
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	83 30       	cpi	r24, 0x03	; 3
    17f6:	91 05       	cpc	r25, r1
    17f8:	81 f0       	breq	.+32     	; 0x181a <GPIO_readPort+0x72>
    17fa:	13 c0       	rjmp	.+38     	; 0x1822 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			a_portValue = PINA;
    17fc:	e9 e3       	ldi	r30, 0x39	; 57
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	0e c0       	rjmp	.+28     	; 0x1822 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			a_portValue = PINB;
    1806:	e6 e3       	ldi	r30, 0x36	; 54
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	09 c0       	rjmp	.+18     	; 0x1822 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			a_portValue = PINC;
    1810:	e3 e3       	ldi	r30, 0x33	; 51
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	89 83       	std	Y+1, r24	; 0x01
    1818:	04 c0       	rjmp	.+8      	; 0x1822 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			a_portValue = PIND;
    181a:	e0 e3       	ldi	r30, 0x30	; 48
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return a_portValue;
    1822:	89 81       	ldd	r24, Y+1	; 0x01
}
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <__vector_11>:

/**-------------------------Interrupts Section----------------------**/
/**                               TIMER 0                          **/
/* Interrupt for normal mode */
ISR(TIMER0_OVF_vect)
{
    1832:	1f 92       	push	r1
    1834:	0f 92       	push	r0
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	0f 92       	push	r0
    183a:	11 24       	eor	r1, r1
    183c:	2f 93       	push	r18
    183e:	3f 93       	push	r19
    1840:	4f 93       	push	r20
    1842:	5f 93       	push	r21
    1844:	6f 93       	push	r22
    1846:	7f 93       	push	r23
    1848:	8f 93       	push	r24
    184a:	9f 93       	push	r25
    184c:	af 93       	push	r26
    184e:	bf 93       	push	r27
    1850:	ef 93       	push	r30
    1852:	ff 93       	push	r31
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrZERO != NULL_PTR)
    185c:	80 91 93 00 	lds	r24, 0x0093
    1860:	90 91 94 00 	lds	r25, 0x0094
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	29 f0       	breq	.+10     	; 0x1872 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrZERO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1868:	e0 91 93 00 	lds	r30, 0x0093
    186c:	f0 91 94 00 	lds	r31, 0x0094
    1870:	09 95       	icall
	}
}
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	ff 91       	pop	r31
    1878:	ef 91       	pop	r30
    187a:	bf 91       	pop	r27
    187c:	af 91       	pop	r26
    187e:	9f 91       	pop	r25
    1880:	8f 91       	pop	r24
    1882:	7f 91       	pop	r23
    1884:	6f 91       	pop	r22
    1886:	5f 91       	pop	r21
    1888:	4f 91       	pop	r20
    188a:	3f 91       	pop	r19
    188c:	2f 91       	pop	r18
    188e:	0f 90       	pop	r0
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	0f 90       	pop	r0
    1894:	1f 90       	pop	r1
    1896:	18 95       	reti

00001898 <__vector_10>:
/*-------------------------------------------------------------------*/
/* Interrupt for Compare Mode */
ISR(TIMER0_COMP_vect)
{
    1898:	1f 92       	push	r1
    189a:	0f 92       	push	r0
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	0f 92       	push	r0
    18a0:	11 24       	eor	r1, r1
    18a2:	2f 93       	push	r18
    18a4:	3f 93       	push	r19
    18a6:	4f 93       	push	r20
    18a8:	5f 93       	push	r21
    18aa:	6f 93       	push	r22
    18ac:	7f 93       	push	r23
    18ae:	8f 93       	push	r24
    18b0:	9f 93       	push	r25
    18b2:	af 93       	push	r26
    18b4:	bf 93       	push	r27
    18b6:	ef 93       	push	r30
    18b8:	ff 93       	push	r31
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrZERO != NULL_PTR)
    18c2:	80 91 93 00 	lds	r24, 0x0093
    18c6:	90 91 94 00 	lds	r25, 0x0094
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	29 f0       	breq	.+10     	; 0x18d8 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrZERO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    18ce:	e0 91 93 00 	lds	r30, 0x0093
    18d2:	f0 91 94 00 	lds	r31, 0x0094
    18d6:	09 95       	icall
	}
}
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	ff 91       	pop	r31
    18de:	ef 91       	pop	r30
    18e0:	bf 91       	pop	r27
    18e2:	af 91       	pop	r26
    18e4:	9f 91       	pop	r25
    18e6:	8f 91       	pop	r24
    18e8:	7f 91       	pop	r23
    18ea:	6f 91       	pop	r22
    18ec:	5f 91       	pop	r21
    18ee:	4f 91       	pop	r20
    18f0:	3f 91       	pop	r19
    18f2:	2f 91       	pop	r18
    18f4:	0f 90       	pop	r0
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	0f 90       	pop	r0
    18fa:	1f 90       	pop	r1
    18fc:	18 95       	reti

000018fe <__vector_9>:
/*------------------------------------------------------------------*/
/**                               TIMER 1                          **/

/* Interrupt for normal mode */
ISR(TIMER1_OVF_vect)
{
    18fe:	1f 92       	push	r1
    1900:	0f 92       	push	r0
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	0f 92       	push	r0
    1906:	11 24       	eor	r1, r1
    1908:	2f 93       	push	r18
    190a:	3f 93       	push	r19
    190c:	4f 93       	push	r20
    190e:	5f 93       	push	r21
    1910:	6f 93       	push	r22
    1912:	7f 93       	push	r23
    1914:	8f 93       	push	r24
    1916:	9f 93       	push	r25
    1918:	af 93       	push	r26
    191a:	bf 93       	push	r27
    191c:	ef 93       	push	r30
    191e:	ff 93       	push	r31
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrONE != NULL_PTR)
    1928:	80 91 95 00 	lds	r24, 0x0095
    192c:	90 91 96 00 	lds	r25, 0x0096
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	29 f0       	breq	.+10     	; 0x193e <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrONE)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1934:	e0 91 95 00 	lds	r30, 0x0095
    1938:	f0 91 96 00 	lds	r31, 0x0096
    193c:	09 95       	icall
	}
}
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	ff 91       	pop	r31
    1944:	ef 91       	pop	r30
    1946:	bf 91       	pop	r27
    1948:	af 91       	pop	r26
    194a:	9f 91       	pop	r25
    194c:	8f 91       	pop	r24
    194e:	7f 91       	pop	r23
    1950:	6f 91       	pop	r22
    1952:	5f 91       	pop	r21
    1954:	4f 91       	pop	r20
    1956:	3f 91       	pop	r19
    1958:	2f 91       	pop	r18
    195a:	0f 90       	pop	r0
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	0f 90       	pop	r0
    1960:	1f 90       	pop	r1
    1962:	18 95       	reti

00001964 <__vector_7>:
/*-------------------------------------------------------------------*/
/* Interrupt for Compare Mode */
ISR(TIMER1_COMPA_vect)
{
    1964:	1f 92       	push	r1
    1966:	0f 92       	push	r0
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	0f 92       	push	r0
    196c:	11 24       	eor	r1, r1
    196e:	2f 93       	push	r18
    1970:	3f 93       	push	r19
    1972:	4f 93       	push	r20
    1974:	5f 93       	push	r21
    1976:	6f 93       	push	r22
    1978:	7f 93       	push	r23
    197a:	8f 93       	push	r24
    197c:	9f 93       	push	r25
    197e:	af 93       	push	r26
    1980:	bf 93       	push	r27
    1982:	ef 93       	push	r30
    1984:	ff 93       	push	r31
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrONE != NULL_PTR)
    198e:	80 91 95 00 	lds	r24, 0x0095
    1992:	90 91 96 00 	lds	r25, 0x0096
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	29 f0       	breq	.+10     	; 0x19a4 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrONE)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    199a:	e0 91 95 00 	lds	r30, 0x0095
    199e:	f0 91 96 00 	lds	r31, 0x0096
    19a2:	09 95       	icall
	}
}
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	ff 91       	pop	r31
    19aa:	ef 91       	pop	r30
    19ac:	bf 91       	pop	r27
    19ae:	af 91       	pop	r26
    19b0:	9f 91       	pop	r25
    19b2:	8f 91       	pop	r24
    19b4:	7f 91       	pop	r23
    19b6:	6f 91       	pop	r22
    19b8:	5f 91       	pop	r21
    19ba:	4f 91       	pop	r20
    19bc:	3f 91       	pop	r19
    19be:	2f 91       	pop	r18
    19c0:	0f 90       	pop	r0
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	0f 90       	pop	r0
    19c6:	1f 90       	pop	r1
    19c8:	18 95       	reti

000019ca <__vector_5>:
/*-------------------------------------------------------------------*/
/**                               TIMER 2                          **/

/* Interrupt for normal mode */
ISR(TIMER2_OVF_vect)
{
    19ca:	1f 92       	push	r1
    19cc:	0f 92       	push	r0
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	0f 92       	push	r0
    19d2:	11 24       	eor	r1, r1
    19d4:	2f 93       	push	r18
    19d6:	3f 93       	push	r19
    19d8:	4f 93       	push	r20
    19da:	5f 93       	push	r21
    19dc:	6f 93       	push	r22
    19de:	7f 93       	push	r23
    19e0:	8f 93       	push	r24
    19e2:	9f 93       	push	r25
    19e4:	af 93       	push	r26
    19e6:	bf 93       	push	r27
    19e8:	ef 93       	push	r30
    19ea:	ff 93       	push	r31
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTWO != NULL_PTR)
    19f4:	80 91 97 00 	lds	r24, 0x0097
    19f8:	90 91 98 00 	lds	r25, 0x0098
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	29 f0       	breq	.+10     	; 0x1a0a <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrTWO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1a00:	e0 91 97 00 	lds	r30, 0x0097
    1a04:	f0 91 98 00 	lds	r31, 0x0098
    1a08:	09 95       	icall
	}
}
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	ff 91       	pop	r31
    1a10:	ef 91       	pop	r30
    1a12:	bf 91       	pop	r27
    1a14:	af 91       	pop	r26
    1a16:	9f 91       	pop	r25
    1a18:	8f 91       	pop	r24
    1a1a:	7f 91       	pop	r23
    1a1c:	6f 91       	pop	r22
    1a1e:	5f 91       	pop	r21
    1a20:	4f 91       	pop	r20
    1a22:	3f 91       	pop	r19
    1a24:	2f 91       	pop	r18
    1a26:	0f 90       	pop	r0
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	0f 90       	pop	r0
    1a2c:	1f 90       	pop	r1
    1a2e:	18 95       	reti

00001a30 <__vector_4>:
/*-------------------------------------------------------------------*/
/* Interrupt for Compare Mode */
ISR(TIMER2_COMP_vect)
{
    1a30:	1f 92       	push	r1
    1a32:	0f 92       	push	r0
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	0f 92       	push	r0
    1a38:	11 24       	eor	r1, r1
    1a3a:	2f 93       	push	r18
    1a3c:	3f 93       	push	r19
    1a3e:	4f 93       	push	r20
    1a40:	5f 93       	push	r21
    1a42:	6f 93       	push	r22
    1a44:	7f 93       	push	r23
    1a46:	8f 93       	push	r24
    1a48:	9f 93       	push	r25
    1a4a:	af 93       	push	r26
    1a4c:	bf 93       	push	r27
    1a4e:	ef 93       	push	r30
    1a50:	ff 93       	push	r31
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTWO != NULL_PTR)
    1a5a:	80 91 97 00 	lds	r24, 0x0097
    1a5e:	90 91 98 00 	lds	r25, 0x0098
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	29 f0       	breq	.+10     	; 0x1a70 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrTWO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1a66:	e0 91 97 00 	lds	r30, 0x0097
    1a6a:	f0 91 98 00 	lds	r31, 0x0098
    1a6e:	09 95       	icall
	}
}
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	ff 91       	pop	r31
    1a76:	ef 91       	pop	r30
    1a78:	bf 91       	pop	r27
    1a7a:	af 91       	pop	r26
    1a7c:	9f 91       	pop	r25
    1a7e:	8f 91       	pop	r24
    1a80:	7f 91       	pop	r23
    1a82:	6f 91       	pop	r22
    1a84:	5f 91       	pop	r21
    1a86:	4f 91       	pop	r20
    1a88:	3f 91       	pop	r19
    1a8a:	2f 91       	pop	r18
    1a8c:	0f 90       	pop	r0
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	0f 90       	pop	r0
    1a92:	1f 90       	pop	r1
    1a94:	18 95       	reti

00001a96 <Timer0_Init>:
/**------------------------Timer ZERO-----------------------**/
/*
 * Initializing Timer0
 */
void Timer0_Init(const Timer0_ConfigType *Config_Ptr)
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <Timer0_Init+0x6>
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	9a 83       	std	Y+2, r25	; 0x02
    1aa2:	89 83       	std	Y+1, r24	; 0x01
	/* Selecting Force Output Compare */
	TCCR0 = (TCCR0 & 0x7F) | ((Config_Ptr->Timer0_ForceCompare)<<FOC0);
    1aa4:	a3 e5       	ldi	r26, 0x53	; 83
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e3 e5       	ldi	r30, 0x53	; 83
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	28 2f       	mov	r18, r24
    1ab0:	2f 77       	andi	r18, 0x7F	; 127
    1ab2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab6:	81 81       	ldd	r24, Z+1	; 0x01
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	96 95       	lsr	r25
    1abe:	98 2f       	mov	r25, r24
    1ac0:	88 27       	eor	r24, r24
    1ac2:	97 95       	ror	r25
    1ac4:	87 95       	ror	r24
    1ac6:	82 2b       	or	r24, r18
    1ac8:	8c 93       	st	X, r24

	/* Selecting the WaveForm Generation */
	TCCR0 = (TCCR0 & 0xBF) | (((Config_Ptr->Timer0_WaveForm)<<7)>>1);
    1aca:	a3 e5       	ldi	r26, 0x53	; 83
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e3 e5       	ldi	r30, 0x53	; 83
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	2f 7b       	andi	r18, 0xBF	; 191
    1ad8:	e9 81       	ldd	r30, Y+1	; 0x01
    1ada:	fa 81       	ldd	r31, Y+2	; 0x02
    1adc:	82 81       	ldd	r24, Z+2	; 0x02
    1ade:	88 2f       	mov	r24, r24
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	96 95       	lsr	r25
    1ae4:	98 2f       	mov	r25, r24
    1ae6:	88 27       	eor	r24, r24
    1ae8:	97 95       	ror	r25
    1aea:	87 95       	ror	r24
    1aec:	95 95       	asr	r25
    1aee:	87 95       	ror	r24
    1af0:	82 2b       	or	r24, r18
    1af2:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xF7) | (((Config_Ptr->Timer0_WaveForm)>>1)<<WGM01);
    1af4:	a3 e5       	ldi	r26, 0x53	; 83
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e3 e5       	ldi	r30, 0x53	; 83
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	28 2f       	mov	r18, r24
    1b00:	27 7f       	andi	r18, 0xF7	; 247
    1b02:	e9 81       	ldd	r30, Y+1	; 0x01
    1b04:	fa 81       	ldd	r31, Y+2	; 0x02
    1b06:	82 81       	ldd	r24, Z+2	; 0x02
    1b08:	86 95       	lsr	r24
    1b0a:	88 2f       	mov	r24, r24
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	82 2b       	or	r24, r18
    1b1c:	8c 93       	st	X, r24

	/* Select Compare Match output mode */
	TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr->Timer0_CompareMode)<<4);
    1b1e:	a3 e5       	ldi	r26, 0x53	; 83
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e3 e5       	ldi	r30, 0x53	; 83
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	28 2f       	mov	r18, r24
    1b2a:	2f 7c       	andi	r18, 0xCF	; 207
    1b2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b30:	83 81       	ldd	r24, Z+3	; 0x03
    1b32:	88 2f       	mov	r24, r24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	82 95       	swap	r24
    1b38:	92 95       	swap	r25
    1b3a:	90 7f       	andi	r25, 0xF0	; 240
    1b3c:	98 27       	eor	r25, r24
    1b3e:	80 7f       	andi	r24, 0xF0	; 240
    1b40:	98 27       	eor	r25, r24
    1b42:	82 2b       	or	r24, r18
    1b44:	8c 93       	st	X, r24

	/* Select the Prescaler Value */
	TCCR0 = (TCCR0 & 0xF8) | ((Config_Ptr->Timer0_PreScaler));
    1b46:	a3 e5       	ldi	r26, 0x53	; 83
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e3 e5       	ldi	r30, 0x53	; 83
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	98 2f       	mov	r25, r24
    1b52:	98 7f       	andi	r25, 0xF8	; 248
    1b54:	e9 81       	ldd	r30, Y+1	; 0x01
    1b56:	fa 81       	ldd	r31, Y+2	; 0x02
    1b58:	80 81       	ld	r24, Z
    1b5a:	89 2b       	or	r24, r25
    1b5c:	8c 93       	st	X, r24

	/* Choosing the OVF value */
	TCNT0 = Config_Ptr->Timer0_TCNT0_Value;
    1b5e:	a2 e5       	ldi	r26, 0x52	; 82
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e9 81       	ldd	r30, Y+1	; 0x01
    1b64:	fa 81       	ldd	r31, Y+2	; 0x02
    1b66:	86 81       	ldd	r24, Z+6	; 0x06
    1b68:	8c 93       	st	X, r24

	/* Choosing OCR0 value */
	OCR0 = Config_Ptr->Timer0_OCR0_Value;
    1b6a:	ac e5       	ldi	r26, 0x5C	; 92
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b70:	fa 81       	ldd	r31, Y+2	; 0x02
    1b72:	87 81       	ldd	r24, Z+7	; 0x07
    1b74:	8c 93       	st	X, r24

	/* Enabling Interrupt for Compare */
	TIMSK = (TIMSK & 0xFD) | ((Config_Ptr->Timer0_COMP_INT)<<OCIE0);
    1b76:	a9 e5       	ldi	r26, 0x59	; 89
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e9 e5       	ldi	r30, 0x59	; 89
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	28 2f       	mov	r18, r24
    1b82:	2d 7f       	andi	r18, 0xFD	; 253
    1b84:	e9 81       	ldd	r30, Y+1	; 0x01
    1b86:	fa 81       	ldd	r31, Y+2	; 0x02
    1b88:	84 81       	ldd	r24, Z+4	; 0x04
    1b8a:	88 2f       	mov	r24, r24
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	82 2b       	or	r24, r18
    1b94:	8c 93       	st	X, r24

	/* Enabling Interrupts for OVF */
	TIMSK = (TIMSK & 0xFE) | ((Config_Ptr->Timer0_OVF_INT));
    1b96:	a9 e5       	ldi	r26, 0x59	; 89
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e9 e5       	ldi	r30, 0x59	; 89
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	98 2f       	mov	r25, r24
    1ba2:	9e 7f       	andi	r25, 0xFE	; 254
    1ba4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba8:	85 81       	ldd	r24, Z+5	; 0x05
    1baa:	89 2b       	or	r24, r25
    1bac:	8c 93       	st	X, r24
}
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <Timer0_deInit>:
/*
 * Description:
 * De-Initializing Everything
 */
void Timer0_deInit(void)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    1bc0:	e3 e5       	ldi	r30, 0x53	; 83
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	10 82       	st	Z, r1
	TIMSK = (TIMSK & 0xFC);
    1bc6:	a9 e5       	ldi	r26, 0x59	; 89
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e9 e5       	ldi	r30, 0x59	; 89
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	8c 7f       	andi	r24, 0xFC	; 252
    1bd2:	8c 93       	st	X, r24
}
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <Timer0_setCallBackZERO>:

/*-------------------------------------------------------------------*/
/* Description: Function to set the Call Back function address. */
void Timer0_setCallBackZERO(void(*a_ptr)(void))
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <Timer0_setCallBackZERO+0x6>
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	9a 83       	std	Y+2, r25	; 0x02
    1be6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrZERO = a_ptr;
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	9a 81       	ldd	r25, Y+2	; 0x02
    1bec:	90 93 94 00 	sts	0x0094, r25
    1bf0:	80 93 93 00 	sts	0x0093, r24
}
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <Timer0_PWM_Init>:

/*
 * Initializing Timer0_PWM
 */
void Timer0_PWM_Init(const Timer0_ConfigType *Config_Ptr)
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <Timer0_PWM_Init+0x6>
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Set Timer Initial Value to 0 */
    1c0c:	e2 e5       	ldi	r30, 0x52	; 82
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	10 82       	st	Z, r1

	/* Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC */
	GPIO_setupPinDirection(PWM0_PORT_ID, PWM0_PIN_ID, PIN_OUTPUT);
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	63 e0       	ldi	r22, 0x03	; 3
    1c16:	41 e0       	ldi	r20, 0x01	; 1
    1c18:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = Dependent on the user
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01);
    1c1c:	e3 e5       	ldi	r30, 0x53	; 83
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	88 e6       	ldi	r24, 0x68	; 104
    1c22:	80 83       	st	Z, r24
	TCCR0 |= Config_Ptr->Timer0_PreScaler;
    1c24:	a3 e5       	ldi	r26, 0x53	; 83
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e3 e5       	ldi	r30, 0x53	; 83
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	90 81       	ld	r25, Z
    1c2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c30:	fa 81       	ldd	r31, Y+2	; 0x02
    1c32:	80 81       	ld	r24, Z
    1c34:	89 2b       	or	r24, r25
    1c36:	8c 93       	st	X, r24
}
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <Timer0_PWM_Activate>:

/*
 * Setting Timer0_PWM
 */
void Timer0_PWM_Activate(uint8 *SetDuty_Ptr)
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <Timer0_PWM_Activate+0x6>
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	9a 83       	std	Y+2, r25	; 0x02
    1c4e:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Set Timer Initial Value to 0 */
    1c50:	e2 e5       	ldi	r30, 0x52	; 82
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	10 82       	st	Z, r1
	OCR0  = *SetDuty_Ptr; /* Set Compare Value */
    1c56:	ac e5       	ldi	r26, 0x5C	; 92
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c5e:	80 81       	ld	r24, Z
    1c60:	8c 93       	st	X, r24
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <Timer1_Init>:

/*
 * Initializing TIMER0
 */
void Timer1_Init(const Timer1_ConfigType *Config_Ptr)
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	00 d0       	rcall	.+0      	; 0x1c72 <Timer1_Init+0x6>
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
	/* Compare Output Mode for channel A */
	TCCR1A = (TCCR1A & 0x3F) | (Config_Ptr->CompareModeA<<6);
    1c7a:	af e4       	ldi	r26, 0x4F	; 79
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	ef e4       	ldi	r30, 0x4F	; 79
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	28 2f       	mov	r18, r24
    1c86:	2f 73       	andi	r18, 0x3F	; 63
    1c88:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8c:	80 81       	ld	r24, Z
    1c8e:	88 2f       	mov	r24, r24
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	00 24       	eor	r0, r0
    1c94:	96 95       	lsr	r25
    1c96:	87 95       	ror	r24
    1c98:	07 94       	ror	r0
    1c9a:	96 95       	lsr	r25
    1c9c:	87 95       	ror	r24
    1c9e:	07 94       	ror	r0
    1ca0:	98 2f       	mov	r25, r24
    1ca2:	80 2d       	mov	r24, r0
    1ca4:	82 2b       	or	r24, r18
    1ca6:	8c 93       	st	X, r24

	/* Compare Output Mode for channel B */
	TCCR1A = (TCCR1A & 0xCF) | (Config_Ptr->CompareModeB<<4);
    1ca8:	af e4       	ldi	r26, 0x4F	; 79
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	ef e4       	ldi	r30, 0x4F	; 79
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	2f 7c       	andi	r18, 0xCF	; 207
    1cb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cba:	81 81       	ldd	r24, Z+1	; 0x01
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	82 95       	swap	r24
    1cc2:	92 95       	swap	r25
    1cc4:	90 7f       	andi	r25, 0xF0	; 240
    1cc6:	98 27       	eor	r25, r24
    1cc8:	80 7f       	andi	r24, 0xF0	; 240
    1cca:	98 27       	eor	r25, r24
    1ccc:	82 2b       	or	r24, r18
    1cce:	8c 93       	st	X, r24

	/* Force Output Compare for Channel A */
	TCCR1A = (TCCR1A & 0xF7) | (Config_Ptr->ForceCompareA<<3);
    1cd0:	af e4       	ldi	r26, 0x4F	; 79
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	ef e4       	ldi	r30, 0x4F	; 79
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	28 2f       	mov	r18, r24
    1cdc:	27 7f       	andi	r18, 0xF7	; 247
    1cde:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce2:	82 81       	ldd	r24, Z+2	; 0x02
    1ce4:	88 2f       	mov	r24, r24
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	82 2b       	or	r24, r18
    1cf6:	8c 93       	st	X, r24

	/* Force Output Compare for Channel B */
	TCCR1A = (TCCR1A & 0xFB) | (Config_Ptr->ForceCompareB<<2);
    1cf8:	af e4       	ldi	r26, 0x4F	; 79
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	ef e4       	ldi	r30, 0x4F	; 79
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	28 2f       	mov	r18, r24
    1d04:	2b 7f       	andi	r18, 0xFB	; 251
    1d06:	e9 81       	ldd	r30, Y+1	; 0x01
    1d08:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0a:	83 81       	ldd	r24, Z+3	; 0x03
    1d0c:	88 2f       	mov	r24, r24
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	88 0f       	add	r24, r24
    1d16:	99 1f       	adc	r25, r25
    1d18:	82 2b       	or	r24, r18
    1d1a:	8c 93       	st	X, r24

	/* Setting the waveform */
	TCCR1A = (TCCR1A & 0xFC) | ((Config_Ptr->WaveForm<<6)>>6); /* Getting the first 2 bits only */
    1d1c:	af e4       	ldi	r26, 0x4F	; 79
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	ef e4       	ldi	r30, 0x4F	; 79
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	28 2f       	mov	r18, r24
    1d28:	2c 7f       	andi	r18, 0xFC	; 252
    1d2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d2e:	87 81       	ldd	r24, Z+7	; 0x07
    1d30:	88 2f       	mov	r24, r24
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	00 24       	eor	r0, r0
    1d36:	96 95       	lsr	r25
    1d38:	87 95       	ror	r24
    1d3a:	07 94       	ror	r0
    1d3c:	96 95       	lsr	r25
    1d3e:	87 95       	ror	r24
    1d40:	07 94       	ror	r0
    1d42:	98 2f       	mov	r25, r24
    1d44:	80 2d       	mov	r24, r0
    1d46:	08 2e       	mov	r0, r24
    1d48:	89 2f       	mov	r24, r25
    1d4a:	00 0c       	add	r0, r0
    1d4c:	88 1f       	adc	r24, r24
    1d4e:	99 0b       	sbc	r25, r25
    1d50:	00 0c       	add	r0, r0
    1d52:	88 1f       	adc	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	82 2b       	or	r24, r18
    1d58:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xE7) | ((Config_Ptr->WaveForm>>2)<<3); /* Getting bit 2 and 3 only*/
    1d5a:	ae e4       	ldi	r26, 0x4E	; 78
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	ee e4       	ldi	r30, 0x4E	; 78
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	28 2f       	mov	r18, r24
    1d66:	27 7e       	andi	r18, 0xE7	; 231
    1d68:	e9 81       	ldd	r30, Y+1	; 0x01
    1d6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d6c:	87 81       	ldd	r24, Z+7	; 0x07
    1d6e:	86 95       	lsr	r24
    1d70:	86 95       	lsr	r24
    1d72:	88 2f       	mov	r24, r24
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	82 2b       	or	r24, r18
    1d84:	8c 93       	st	X, r24

	/* Noise Canceler */
	TCCR1B = (TCCR1B & 0x7F) | ((Config_Ptr->NoiseControl)<<7);
    1d86:	ae e4       	ldi	r26, 0x4E	; 78
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	ee e4       	ldi	r30, 0x4E	; 78
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	28 2f       	mov	r18, r24
    1d92:	2f 77       	andi	r18, 0x7F	; 127
    1d94:	e9 81       	ldd	r30, Y+1	; 0x01
    1d96:	fa 81       	ldd	r31, Y+2	; 0x02
    1d98:	85 81       	ldd	r24, Z+5	; 0x05
    1d9a:	88 2f       	mov	r24, r24
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	96 95       	lsr	r25
    1da0:	98 2f       	mov	r25, r24
    1da2:	88 27       	eor	r24, r24
    1da4:	97 95       	ror	r25
    1da6:	87 95       	ror	r24
    1da8:	82 2b       	or	r24, r18
    1daa:	8c 93       	st	X, r24

	/* Edge Select */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->EdgeControl)<<ICES1);
    1dac:	ae e4       	ldi	r26, 0x4E	; 78
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	ee e4       	ldi	r30, 0x4E	; 78
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	28 2f       	mov	r18, r24
    1db8:	2f 7b       	andi	r18, 0xBF	; 191
    1dba:	e9 81       	ldd	r30, Y+1	; 0x01
    1dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dbe:	84 81       	ldd	r24, Z+4	; 0x04
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	00 24       	eor	r0, r0
    1dc6:	96 95       	lsr	r25
    1dc8:	87 95       	ror	r24
    1dca:	07 94       	ror	r0
    1dcc:	96 95       	lsr	r25
    1dce:	87 95       	ror	r24
    1dd0:	07 94       	ror	r0
    1dd2:	98 2f       	mov	r25, r24
    1dd4:	80 2d       	mov	r24, r0
    1dd6:	82 2b       	or	r24, r18
    1dd8:	8c 93       	st	X, r24

	/* Clock Selection */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->F_TIMER1_CLOCK);
    1dda:	ae e4       	ldi	r26, 0x4E	; 78
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	ee e4       	ldi	r30, 0x4E	; 78
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	98 2f       	mov	r25, r24
    1de6:	98 7f       	andi	r25, 0xF8	; 248
    1de8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dea:	fa 81       	ldd	r31, Y+2	; 0x02
    1dec:	86 81       	ldd	r24, Z+6	; 0x06
    1dee:	89 2b       	or	r24, r25
    1df0:	8c 93       	st	X, r24

	/* Enable compare A interrupt */
	TIMSK = (TIMSK & 0xEF) | ((Config_Ptr->interruptA)<<OCIE1A);
    1df2:	a9 e5       	ldi	r26, 0x59	; 89
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e9 e5       	ldi	r30, 0x59	; 89
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	2f 7e       	andi	r18, 0xEF	; 239
    1e00:	e9 81       	ldd	r30, Y+1	; 0x01
    1e02:	fa 81       	ldd	r31, Y+2	; 0x02
    1e04:	80 85       	ldd	r24, Z+8	; 0x08
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	82 95       	swap	r24
    1e0c:	92 95       	swap	r25
    1e0e:	90 7f       	andi	r25, 0xF0	; 240
    1e10:	98 27       	eor	r25, r24
    1e12:	80 7f       	andi	r24, 0xF0	; 240
    1e14:	98 27       	eor	r25, r24
    1e16:	82 2b       	or	r24, r18
    1e18:	8c 93       	st	X, r24

	/* Enable compare B interrupt */
	TIMSK = (TIMSK & 0xF7) | ((Config_Ptr->interruptB)<<OCIE1B);
    1e1a:	a9 e5       	ldi	r26, 0x59	; 89
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e9 e5       	ldi	r30, 0x59	; 89
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	28 2f       	mov	r18, r24
    1e26:	27 7f       	andi	r18, 0xF7	; 247
    1e28:	e9 81       	ldd	r30, Y+1	; 0x01
    1e2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e2c:	81 85       	ldd	r24, Z+9	; 0x09
    1e2e:	88 2f       	mov	r24, r24
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	88 0f       	add	r24, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	82 2b       	or	r24, r18
    1e40:	8c 93       	st	X, r24

	/* Enable OverFlow interrupt */
	TIMSK = (TIMSK & 0xFB) | ((Config_Ptr->interruptOvf)<<TOIE1);
    1e42:	a9 e5       	ldi	r26, 0x59	; 89
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e9 e5       	ldi	r30, 0x59	; 89
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	2b 7f       	andi	r18, 0xFB	; 251
    1e50:	e9 81       	ldd	r30, Y+1	; 0x01
    1e52:	fa 81       	ldd	r31, Y+2	; 0x02
    1e54:	82 85       	ldd	r24, Z+10	; 0x0a
    1e56:	88 2f       	mov	r24, r24
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	82 2b       	or	r24, r18
    1e64:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = Config_Ptr->TCNT1_Value;
    1e66:	ac e4       	ldi	r26, 0x4C	; 76
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e6e:	83 85       	ldd	r24, Z+11	; 0x0b
    1e70:	94 85       	ldd	r25, Z+12	; 0x0c
    1e72:	11 96       	adiw	r26, 0x01	; 1
    1e74:	9c 93       	st	X, r25
    1e76:	8e 93       	st	-X, r24

	/* Initializing the compare value register */
	OCR1A = Config_Ptr->OCR1A_Value;
    1e78:	aa e4       	ldi	r26, 0x4A	; 74
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e80:	85 85       	ldd	r24, Z+13	; 0x0d
    1e82:	96 85       	ldd	r25, Z+14	; 0x0e
    1e84:	11 96       	adiw	r26, 0x01	; 1
    1e86:	9c 93       	st	X, r25
    1e88:	8e 93       	st	-X, r24
	OCR1B = Config_Ptr->OCR1B_Value;
    1e8a:	a8 e4       	ldi	r26, 0x48	; 72
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e90:	fa 81       	ldd	r31, Y+2	; 0x02
    1e92:	87 85       	ldd	r24, Z+15	; 0x0f
    1e94:	90 89       	ldd	r25, Z+16	; 0x10
    1e96:	11 96       	adiw	r26, 0x01	; 1
    1e98:	9c 93       	st	X, r25
    1e9a:	8e 93       	st	-X, r24
}
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <Timer1_setCallBackONE>:
/*-------------------------------------------------------------------*/

/* Description: Function to set the Call Back function address. */
void Timer1_setCallBackONE(void(*a_ptr)(void))
{
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <Timer1_setCallBackONE+0x6>
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	9a 83       	std	Y+2, r25	; 0x02
    1eb2:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrONE = a_ptr;
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb8:	90 93 96 00 	sts	0x0096, r25
    1ebc:	80 93 95 00 	sts	0x0095, r24
}
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <Timer1_deInit>:
/*
 * Description:
 * De-Initializing Everything
 */
void Timer1_deInit()
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1ed2:	ef e4       	ldi	r30, 0x4F	; 79
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	10 82       	st	Z, r1
	TCCR1B = 0;
    1ed8:	ee e4       	ldi	r30, 0x4E	; 78
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	10 82       	st	Z, r1
	TIMSK = TIMSK & 0xC3;
    1ede:	a9 e5       	ldi	r26, 0x59	; 89
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e9 e5       	ldi	r30, 0x59	; 89
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	83 7c       	andi	r24, 0xC3	; 195
    1eea:	8c 93       	st	X, r24
}
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <Timer2_Init>:
/**------------------------Timer TWO-----------------------**/
/*
 * Initializing Timer2
 */
void Timer2_Init(const Timer2_ConfigType *Config_Ptr)
{
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <Timer2_Init+0x6>
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	9a 83       	std	Y+2, r25	; 0x02
    1efe:	89 83       	std	Y+1, r24	; 0x01
	/* Selecting Force Output Compare */
		TCCR2 = (TCCR2 & 0x7F) | ((Config_Ptr->Timer2_ForceCompare)<<FOC2);
    1f00:	a5 e4       	ldi	r26, 0x45	; 69
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e5 e4       	ldi	r30, 0x45	; 69
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	2f 77       	andi	r18, 0x7F	; 127
    1f0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f10:	fa 81       	ldd	r31, Y+2	; 0x02
    1f12:	81 81       	ldd	r24, Z+1	; 0x01
    1f14:	88 2f       	mov	r24, r24
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	96 95       	lsr	r25
    1f1a:	98 2f       	mov	r25, r24
    1f1c:	88 27       	eor	r24, r24
    1f1e:	97 95       	ror	r25
    1f20:	87 95       	ror	r24
    1f22:	82 2b       	or	r24, r18
    1f24:	8c 93       	st	X, r24

		/* Selecting the WaveForm Generation */
		TCCR2 = (TCCR2 & 0xBF) | (((Config_Ptr->Timer2_WaveForm)<<7)>>1);
    1f26:	a5 e4       	ldi	r26, 0x45	; 69
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e5 e4       	ldi	r30, 0x45	; 69
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	28 2f       	mov	r18, r24
    1f32:	2f 7b       	andi	r18, 0xBF	; 191
    1f34:	e9 81       	ldd	r30, Y+1	; 0x01
    1f36:	fa 81       	ldd	r31, Y+2	; 0x02
    1f38:	82 81       	ldd	r24, Z+2	; 0x02
    1f3a:	88 2f       	mov	r24, r24
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	96 95       	lsr	r25
    1f40:	98 2f       	mov	r25, r24
    1f42:	88 27       	eor	r24, r24
    1f44:	97 95       	ror	r25
    1f46:	87 95       	ror	r24
    1f48:	95 95       	asr	r25
    1f4a:	87 95       	ror	r24
    1f4c:	82 2b       	or	r24, r18
    1f4e:	8c 93       	st	X, r24
		TCCR2 = (TCCR2 & 0xF7) | (((Config_Ptr->Timer2_WaveForm)>>1)<<WGM21);
    1f50:	a5 e4       	ldi	r26, 0x45	; 69
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	e5 e4       	ldi	r30, 0x45	; 69
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	28 2f       	mov	r18, r24
    1f5c:	27 7f       	andi	r18, 0xF7	; 247
    1f5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f60:	fa 81       	ldd	r31, Y+2	; 0x02
    1f62:	82 81       	ldd	r24, Z+2	; 0x02
    1f64:	86 95       	lsr	r24
    1f66:	88 2f       	mov	r24, r24
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	82 2b       	or	r24, r18
    1f78:	8c 93       	st	X, r24

		/* Select Compare Match output mode */
		TCCR2 = (TCCR2 & 0xCF) | ((Config_Ptr->Timer2_CompareMode)<<4);
    1f7a:	a5 e4       	ldi	r26, 0x45	; 69
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e5 e4       	ldi	r30, 0x45	; 69
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	28 2f       	mov	r18, r24
    1f86:	2f 7c       	andi	r18, 0xCF	; 207
    1f88:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f8c:	83 81       	ldd	r24, Z+3	; 0x03
    1f8e:	88 2f       	mov	r24, r24
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	82 95       	swap	r24
    1f94:	92 95       	swap	r25
    1f96:	90 7f       	andi	r25, 0xF0	; 240
    1f98:	98 27       	eor	r25, r24
    1f9a:	80 7f       	andi	r24, 0xF0	; 240
    1f9c:	98 27       	eor	r25, r24
    1f9e:	82 2b       	or	r24, r18
    1fa0:	8c 93       	st	X, r24

		/* Select the Prescaler Value */
		TCCR2 = (TCCR2 & 0xF8) | ((Config_Ptr->Timer2_PreScaler));
    1fa2:	a5 e4       	ldi	r26, 0x45	; 69
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e5 e4       	ldi	r30, 0x45	; 69
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	98 2f       	mov	r25, r24
    1fae:	98 7f       	andi	r25, 0xF8	; 248
    1fb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb4:	80 81       	ld	r24, Z
    1fb6:	89 2b       	or	r24, r25
    1fb8:	8c 93       	st	X, r24

		/* Choosing the OVF value */
		TCNT0 = Config_Ptr->Timer2_TCNT2_Value;
    1fba:	a2 e5       	ldi	r26, 0x52	; 82
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc2:	86 81       	ldd	r24, Z+6	; 0x06
    1fc4:	8c 93       	st	X, r24

		/* Choosing OCR2 value */
		OCR2 = Config_Ptr->Timer2_OCR2_Value;
    1fc6:	a3 e4       	ldi	r26, 0x43	; 67
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e9 81       	ldd	r30, Y+1	; 0x01
    1fcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fce:	87 81       	ldd	r24, Z+7	; 0x07
    1fd0:	8c 93       	st	X, r24

		/* Enabling Interrupt for Compare */
		TIMSK = (TIMSK & 0x7F) | ((Config_Ptr->Timer2_COMP_INT)<<OCIE2);
    1fd2:	a9 e5       	ldi	r26, 0x59	; 89
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e9 e5       	ldi	r30, 0x59	; 89
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	28 2f       	mov	r18, r24
    1fde:	2f 77       	andi	r18, 0x7F	; 127
    1fe0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe4:	84 81       	ldd	r24, Z+4	; 0x04
    1fe6:	88 2f       	mov	r24, r24
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	96 95       	lsr	r25
    1fec:	98 2f       	mov	r25, r24
    1fee:	88 27       	eor	r24, r24
    1ff0:	97 95       	ror	r25
    1ff2:	87 95       	ror	r24
    1ff4:	82 2b       	or	r24, r18
    1ff6:	8c 93       	st	X, r24

		/* Enabling Interrupts for OVF */
		TIMSK = (TIMSK & 0xBF) | ((Config_Ptr->Timer2_OVF_INT));
    1ff8:	a9 e5       	ldi	r26, 0x59	; 89
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e9 e5       	ldi	r30, 0x59	; 89
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	98 2f       	mov	r25, r24
    2004:	9f 7b       	andi	r25, 0xBF	; 191
    2006:	e9 81       	ldd	r30, Y+1	; 0x01
    2008:	fa 81       	ldd	r31, Y+2	; 0x02
    200a:	85 81       	ldd	r24, Z+5	; 0x05
    200c:	89 2b       	or	r24, r25
    200e:	8c 93       	st	X, r24
}
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <Timer2_deInit>:
/*
 * Description:
 * De-Initializing Everything
 */
void Timer2_deInit(void)
{
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0;
    2022:	e5 e4       	ldi	r30, 0x45	; 69
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	10 82       	st	Z, r1
	TIMSK = (TIMSK & 0x3F);
    2028:	a9 e5       	ldi	r26, 0x59	; 89
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e9 e5       	ldi	r30, 0x59	; 89
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	8f 73       	andi	r24, 0x3F	; 63
    2034:	8c 93       	st	X, r24
}
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <Timer2_setCallBackTWO>:

/*-------------------------------------------------------------------*/
/* Description: Function to set the Call Back function address. */
void Timer2_setCallBackTWO(void(*a_ptr)(void))
{
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	00 d0       	rcall	.+0      	; 0x2042 <Timer2_setCallBackTWO+0x6>
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	9a 83       	std	Y+2, r25	; 0x02
    2048:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrTWO = a_ptr;
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	9a 81       	ldd	r25, Y+2	; 0x02
    204e:	90 93 98 00 	sts	0x0098, r25
    2052:	80 93 97 00 	sts	0x0097, r24
}
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <Buzzer_init>:
/*
 * Description:
 * Initializing Buzzer Pins
 */
void Buzzer_init()
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
	/* Setting up the Pin direction */
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	41 e0       	ldi	r20, 0x01	; 1
    206e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>

	/* Turning Buzzer OFF at first */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	60 e0       	ldi	r22, 0x00	; 0
    2076:	40 e0       	ldi	r20, 0x00	; 0
    2078:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
}
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <Buzzer_on>:
/*
 * Description:
 * Turning Buzzer ON
 */
void Buzzer_on(void)
{
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
	/* Setting Buzzer Pin to high */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	41 e0       	ldi	r20, 0x01	; 1
    2090:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
}
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <Buzzer_off>:
/*
 * Description:
 * Turning Buzzer OFF
 */
void Buzzer_off(void)
{
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
	/* Turning Buzzer OFF at first */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	60 e0       	ldi	r22, 0x00	; 0
    20a6:	40 e0       	ldi	r20, 0x00	; 0
    20a8:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
}
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	08 95       	ret

000020b2 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <EEPROM_writeByte+0x6>
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <EEPROM_writeByte+0x8>
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    20c4:	0e 94 6e 11 	call	0x22dc	; 0x22dc <TWI_start>
    if (TWI_getStatus() != TWI_START)
    20c8:	0e 94 c6 11 	call	0x238c	; 0x238c <TWI_getStatus>
    20cc:	88 30       	cpi	r24, 0x08	; 8
    20ce:	11 f0       	breq	.+4      	; 0x20d4 <EEPROM_writeByte+0x22>
        return ERROR;
    20d0:	1c 82       	std	Y+4, r1	; 0x04
    20d2:	28 c0       	rjmp	.+80     	; 0x2124 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	80 70       	andi	r24, 0x00	; 0
    20da:	97 70       	andi	r25, 0x07	; 7
    20dc:	88 0f       	add	r24, r24
    20de:	89 2f       	mov	r24, r25
    20e0:	88 1f       	adc	r24, r24
    20e2:	99 0b       	sbc	r25, r25
    20e4:	91 95       	neg	r25
    20e6:	80 6a       	ori	r24, 0xA0	; 160
    20e8:	0e 94 89 11 	call	0x2312	; 0x2312 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    20ec:	0e 94 c6 11 	call	0x238c	; 0x238c <TWI_getStatus>
    20f0:	88 31       	cpi	r24, 0x18	; 24
    20f2:	11 f0       	breq	.+4      	; 0x20f8 <EEPROM_writeByte+0x46>
        return ERROR;
    20f4:	1c 82       	std	Y+4, r1	; 0x04
    20f6:	16 c0       	rjmp	.+44     	; 0x2124 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	0e 94 89 11 	call	0x2312	; 0x2312 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    20fe:	0e 94 c6 11 	call	0x238c	; 0x238c <TWI_getStatus>
    2102:	88 32       	cpi	r24, 0x28	; 40
    2104:	11 f0       	breq	.+4      	; 0x210a <EEPROM_writeByte+0x58>
        return ERROR;
    2106:	1c 82       	std	Y+4, r1	; 0x04
    2108:	0d c0       	rjmp	.+26     	; 0x2124 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	0e 94 89 11 	call	0x2312	; 0x2312 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2110:	0e 94 c6 11 	call	0x238c	; 0x238c <TWI_getStatus>
    2114:	88 32       	cpi	r24, 0x28	; 40
    2116:	11 f0       	breq	.+4      	; 0x211c <EEPROM_writeByte+0x6a>
        return ERROR;
    2118:	1c 82       	std	Y+4, r1	; 0x04
    211a:	04 c0       	rjmp	.+8      	; 0x2124 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    211c:	0e 94 7e 11 	call	0x22fc	; 0x22fc <TWI_stop>

    return SUCCESS;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	8c 83       	std	Y+4, r24	; 0x04
    2124:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	00 d0       	rcall	.+0      	; 0x213a <EEPROM_readByte+0x6>
    213a:	00 d0       	rcall	.+0      	; 0x213c <EEPROM_readByte+0x8>
    213c:	0f 92       	push	r0
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	9a 83       	std	Y+2, r25	; 0x02
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	7c 83       	std	Y+4, r23	; 0x04
    2148:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    214a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <TWI_start>
    if (TWI_getStatus() != TWI_START)
    214e:	0e 94 c6 11 	call	0x238c	; 0x238c <TWI_getStatus>
    2152:	88 30       	cpi	r24, 0x08	; 8
    2154:	11 f0       	breq	.+4      	; 0x215a <EEPROM_readByte+0x26>
        return ERROR;
    2156:	1d 82       	std	Y+5, r1	; 0x05
    2158:	44 c0       	rjmp	.+136    	; 0x21e2 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	80 70       	andi	r24, 0x00	; 0
    2160:	97 70       	andi	r25, 0x07	; 7
    2162:	88 0f       	add	r24, r24
    2164:	89 2f       	mov	r24, r25
    2166:	88 1f       	adc	r24, r24
    2168:	99 0b       	sbc	r25, r25
    216a:	91 95       	neg	r25
    216c:	80 6a       	ori	r24, 0xA0	; 160
    216e:	0e 94 89 11 	call	0x2312	; 0x2312 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2172:	0e 94 c6 11 	call	0x238c	; 0x238c <TWI_getStatus>
    2176:	88 31       	cpi	r24, 0x18	; 24
    2178:	11 f0       	breq	.+4      	; 0x217e <EEPROM_readByte+0x4a>
        return ERROR;
    217a:	1d 82       	std	Y+5, r1	; 0x05
    217c:	32 c0       	rjmp	.+100    	; 0x21e2 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	0e 94 89 11 	call	0x2312	; 0x2312 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2184:	0e 94 c6 11 	call	0x238c	; 0x238c <TWI_getStatus>
    2188:	88 32       	cpi	r24, 0x28	; 40
    218a:	11 f0       	breq	.+4      	; 0x2190 <EEPROM_readByte+0x5c>
        return ERROR;
    218c:	1d 82       	std	Y+5, r1	; 0x05
    218e:	29 c0       	rjmp	.+82     	; 0x21e2 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    2190:	0e 94 6e 11 	call	0x22dc	; 0x22dc <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    2194:	0e 94 c6 11 	call	0x238c	; 0x238c <TWI_getStatus>
    2198:	80 31       	cpi	r24, 0x10	; 16
    219a:	11 f0       	breq	.+4      	; 0x21a0 <EEPROM_readByte+0x6c>
        return ERROR;
    219c:	1d 82       	std	Y+5, r1	; 0x05
    219e:	21 c0       	rjmp	.+66     	; 0x21e2 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	9a 81       	ldd	r25, Y+2	; 0x02
    21a4:	80 70       	andi	r24, 0x00	; 0
    21a6:	97 70       	andi	r25, 0x07	; 7
    21a8:	88 0f       	add	r24, r24
    21aa:	89 2f       	mov	r24, r25
    21ac:	88 1f       	adc	r24, r24
    21ae:	99 0b       	sbc	r25, r25
    21b0:	91 95       	neg	r25
    21b2:	81 6a       	ori	r24, 0xA1	; 161
    21b4:	0e 94 89 11 	call	0x2312	; 0x2312 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    21b8:	0e 94 c6 11 	call	0x238c	; 0x238c <TWI_getStatus>
    21bc:	80 34       	cpi	r24, 0x40	; 64
    21be:	11 f0       	breq	.+4      	; 0x21c4 <EEPROM_readByte+0x90>
        return ERROR;
    21c0:	1d 82       	std	Y+5, r1	; 0x05
    21c2:	0f c0       	rjmp	.+30     	; 0x21e2 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    21c4:	0e 94 b3 11 	call	0x2366	; 0x2366 <TWI_readByteWithNACK>
    21c8:	eb 81       	ldd	r30, Y+3	; 0x03
    21ca:	fc 81       	ldd	r31, Y+4	; 0x04
    21cc:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    21ce:	0e 94 c6 11 	call	0x238c	; 0x238c <TWI_getStatus>
    21d2:	88 35       	cpi	r24, 0x58	; 88
    21d4:	11 f0       	breq	.+4      	; 0x21da <EEPROM_readByte+0xa6>
        return ERROR;
    21d6:	1d 82       	std	Y+5, r1	; 0x05
    21d8:	04 c0       	rjmp	.+8      	; 0x21e2 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    21da:	0e 94 7e 11 	call	0x22fc	; 0x22fc <TWI_stop>

    return SUCCESS;
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	8d 83       	std	Y+5, r24	; 0x05
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <TWI_init>:
/*
 * Description:
 * Initializing I2C Registers
 */
void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <TWI_init+0x6>
    21fa:	0f 92       	push	r0
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	9a 83       	std	Y+2, r25	; 0x02
    2202:	89 83       	std	Y+1, r24	; 0x01
	/* Choosing the bit rate */
	TWBR = (TWBR & 0x00) | (Config_Ptr->bit_rate);
    2204:	e0 e2       	ldi	r30, 0x20	; 32
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	a0 e2       	ldi	r26, 0x20	; 32
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	e9 81       	ldd	r30, Y+1	; 0x01
    2210:	fa 81       	ldd	r31, Y+2	; 0x02
    2212:	86 81       	ldd	r24, Z+6	; 0x06
    2214:	8c 93       	st	X, r24

	/* Choosing Ack */
	TWCR = (TWCR & 0xBF) | ((Config_Ptr->ackControl)<<TWEA);
    2216:	a6 e5       	ldi	r26, 0x56	; 86
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e6 e5       	ldi	r30, 0x56	; 86
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	28 2f       	mov	r18, r24
    2222:	2f 7b       	andi	r18, 0xBF	; 191
    2224:	e9 81       	ldd	r30, Y+1	; 0x01
    2226:	fa 81       	ldd	r31, Y+2	; 0x02
    2228:	81 81       	ldd	r24, Z+1	; 0x01
    222a:	88 2f       	mov	r24, r24
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	00 24       	eor	r0, r0
    2230:	96 95       	lsr	r25
    2232:	87 95       	ror	r24
    2234:	07 94       	ror	r0
    2236:	96 95       	lsr	r25
    2238:	87 95       	ror	r24
    223a:	07 94       	ror	r0
    223c:	98 2f       	mov	r25, r24
    223e:	80 2d       	mov	r24, r0
    2240:	82 2b       	or	r24, r18
    2242:	8c 93       	st	X, r24

	/* Selecting the prescaler value */
	TWSR = (TWSR & 0xFC) | ((Config_Ptr->prescalerControl));
    2244:	a1 e2       	ldi	r26, 0x21	; 33
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e1 e2       	ldi	r30, 0x21	; 33
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	98 2f       	mov	r25, r24
    2250:	9c 7f       	andi	r25, 0xFC	; 252
    2252:	e9 81       	ldd	r30, Y+1	; 0x01
    2254:	fa 81       	ldd	r31, Y+2	; 0x02
    2256:	83 81       	ldd	r24, Z+3	; 0x03
    2258:	89 2b       	or	r24, r25
    225a:	8c 93       	st	X, r24

	/* Identifying my self */
	TWAR = (TWAR & 0x01) | ((Config_Ptr->address)<<1);
    225c:	a2 e2       	ldi	r26, 0x22	; 34
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e2 e2       	ldi	r30, 0x22	; 34
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	28 2f       	mov	r18, r24
    2268:	21 70       	andi	r18, 0x01	; 1
    226a:	e9 81       	ldd	r30, Y+1	; 0x01
    226c:	fa 81       	ldd	r31, Y+2	; 0x02
    226e:	85 81       	ldd	r24, Z+5	; 0x05
    2270:	88 2f       	mov	r24, r24
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	82 2b       	or	r24, r18
    227a:	8c 93       	st	X, r24

	/* Enabling General Call Recognition */
	TWAR = (TWAR & 0xFE) | ((Config_Ptr->callRecControl));
    227c:	a2 e2       	ldi	r26, 0x22	; 34
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	e2 e2       	ldi	r30, 0x22	; 34
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	98 2f       	mov	r25, r24
    2288:	9e 7f       	andi	r25, 0xFE	; 254
    228a:	e9 81       	ldd	r30, Y+1	; 0x01
    228c:	fa 81       	ldd	r31, Y+2	; 0x02
    228e:	84 81       	ldd	r24, Z+4	; 0x04
    2290:	89 2b       	or	r24, r25
    2292:	8c 93       	st	X, r24

	/* Interrupt Enable */
	TWCR = (TWCR & 0xFE) | ((Config_Ptr->interruptControl));
    2294:	a6 e5       	ldi	r26, 0x56	; 86
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e6 e5       	ldi	r30, 0x56	; 86
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	98 2f       	mov	r25, r24
    22a0:	9e 7f       	andi	r25, 0xFE	; 254
    22a2:	e9 81       	ldd	r30, Y+1	; 0x01
    22a4:	fa 81       	ldd	r31, Y+2	; 0x02
    22a6:	80 81       	ld	r24, Z
    22a8:	89 2b       	or	r24, r25
    22aa:	8c 93       	st	X, r24

	/* Enable TWI */
	TWCR = (TWCR & 0xFB) | ((Config_Ptr->twiControl)<<TWEN);
    22ac:	a6 e5       	ldi	r26, 0x56	; 86
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e6 e5       	ldi	r30, 0x56	; 86
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	28 2f       	mov	r18, r24
    22b8:	2b 7f       	andi	r18, 0xFB	; 251
    22ba:	e9 81       	ldd	r30, Y+1	; 0x01
    22bc:	fa 81       	ldd	r31, Y+2	; 0x02
    22be:	82 81       	ldd	r24, Z+2	; 0x02
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	82 2b       	or	r24, r18
    22ce:	8c 93       	st	X, r24

}
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	08 95       	ret

000022dc <TWI_start>:
/*
 * Description:
 * Getting ready to send and being a master
 */
void TWI_start(void)
{
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    22e4:	e6 e5       	ldi	r30, 0x56	; 86
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	84 ea       	ldi	r24, 0xA4	; 164
    22ea:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    22ec:	e6 e5       	ldi	r30, 0x56	; 86
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	88 23       	and	r24, r24
    22f4:	dc f7       	brge	.-10     	; 0x22ec <TWI_start+0x10>
}
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <TWI_stop>:
/*
 * Description:
 * Stopping the connection with slave
 */
void TWI_stop(void)
{
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2304:	e6 e5       	ldi	r30, 0x56	; 86
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	84 e9       	ldi	r24, 0x94	; 148
    230a:	80 83       	st	Z, r24
}
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	08 95       	ret

00002312 <TWI_writeByte>:
/*
 * Description:
 * Sending byte
 */
void TWI_writeByte(uint8 data)
{
    2312:	df 93       	push	r29
    2314:	cf 93       	push	r28
    2316:	0f 92       	push	r0
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    231e:	e3 e2       	ldi	r30, 0x23	; 35
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2326:	e6 e5       	ldi	r30, 0x56	; 86
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	84 e8       	ldi	r24, 0x84	; 132
    232c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    232e:	e6 e5       	ldi	r30, 0x56	; 86
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	88 23       	and	r24, r24
    2336:	dc f7       	brge	.-10     	; 0x232e <TWI_writeByte+0x1c>
}
    2338:	0f 90       	pop	r0
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <TWI_readByteWithACK>:
/*
 * Description:
 * Read the received value and then send ACK
 */
uint8 TWI_readByteWithACK(void)
{
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2348:	e6 e5       	ldi	r30, 0x56	; 86
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	84 ec       	ldi	r24, 0xC4	; 196
    234e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2350:	e6 e5       	ldi	r30, 0x56	; 86
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	88 23       	and	r24, r24
    2358:	dc f7       	brge	.-10     	; 0x2350 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    235a:	e3 e2       	ldi	r30, 0x23	; 35
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
}
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	08 95       	ret

00002366 <TWI_readByteWithNACK>:
/*
 * Description:
 * Read the received value and Don't send ACK
 */
uint8 TWI_readByteWithNACK(void)
{
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    236e:	e6 e5       	ldi	r30, 0x56	; 86
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	84 e8       	ldi	r24, 0x84	; 132
    2374:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2376:	e6 e5       	ldi	r30, 0x56	; 86
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	88 23       	and	r24, r24
    237e:	dc f7       	brge	.-10     	; 0x2376 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2380:	e3 e2       	ldi	r30, 0x23	; 35
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
}
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <TWI_getStatus>:
/*
 * Description:
 * Checking on the status of the register
 */
uint8 TWI_getStatus(void)
{
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	0f 92       	push	r0
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2396:	e1 e2       	ldi	r30, 0x21	; 33
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	88 7f       	andi	r24, 0xF8	; 248
    239e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    23a2:	0f 90       	pop	r0
    23a4:	cf 91       	pop	r28
    23a6:	df 91       	pop	r29
    23a8:	08 95       	ret

000023aa <UART_init>:
/*
 * Description:
 *
 */
void UART_init(UART_ConfigType *Config_Ptr)
{
    23aa:	ef 92       	push	r14
    23ac:	ff 92       	push	r15
    23ae:	0f 93       	push	r16
    23b0:	1f 93       	push	r17
    23b2:	df 93       	push	r29
    23b4:	cf 93       	push	r28
    23b6:	00 d0       	rcall	.+0      	; 0x23b8 <UART_init+0xe>
    23b8:	00 d0       	rcall	.+0      	; 0x23ba <UART_init+0x10>
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
    23be:	9c 83       	std	Y+4, r25	; 0x04
    23c0:	8b 83       	std	Y+3, r24	; 0x03
	/**-------------------------Local Variables---------------------**/
	/* UBRR_VALUE will be used to set the baud rate later */
	uint16 a_ubrr_value = 0;
    23c2:	1a 82       	std	Y+2, r1	; 0x02
    23c4:	19 82       	std	Y+1, r1	; 0x01
	/**-------------------------END Local Variables-----------------**/

	/* Setting the transmission speed */
	UCSRA = (UCSRA & 0xFD) | ((Config_Ptr->transmitSpeed)<<U2X);
    23c6:	ab e2       	ldi	r26, 0x2B	; 43
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	eb e2       	ldi	r30, 0x2B	; 43
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	28 2f       	mov	r18, r24
    23d2:	2d 7f       	andi	r18, 0xFD	; 253
    23d4:	eb 81       	ldd	r30, Y+3	; 0x03
    23d6:	fc 81       	ldd	r31, Y+4	; 0x04
    23d8:	80 81       	ld	r24, Z
    23da:	88 2f       	mov	r24, r24
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	82 2b       	or	r24, r18
    23e4:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the INTERRUPT for RX */
	UCSRB = (UCSRB & 0x7F) | ((Config_Ptr->receiverINT)<<RXCIE);
    23e6:	aa e2       	ldi	r26, 0x2A	; 42
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	ea e2       	ldi	r30, 0x2A	; 42
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	28 2f       	mov	r18, r24
    23f2:	2f 77       	andi	r18, 0x7F	; 127
    23f4:	eb 81       	ldd	r30, Y+3	; 0x03
    23f6:	fc 81       	ldd	r31, Y+4	; 0x04
    23f8:	81 81       	ldd	r24, Z+1	; 0x01
    23fa:	88 2f       	mov	r24, r24
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	96 95       	lsr	r25
    2400:	98 2f       	mov	r25, r24
    2402:	88 27       	eor	r24, r24
    2404:	97 95       	ror	r25
    2406:	87 95       	ror	r24
    2408:	82 2b       	or	r24, r18
    240a:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the INTERRUPT for TX */
	UCSRB = (UCSRB & 0x7F) | ((Config_Ptr->transmitterINT)<<TXCIE);
    240c:	aa e2       	ldi	r26, 0x2A	; 42
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	ea e2       	ldi	r30, 0x2A	; 42
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	28 2f       	mov	r18, r24
    2418:	2f 77       	andi	r18, 0x7F	; 127
    241a:	eb 81       	ldd	r30, Y+3	; 0x03
    241c:	fc 81       	ldd	r31, Y+4	; 0x04
    241e:	82 81       	ldd	r24, Z+2	; 0x02
    2420:	88 2f       	mov	r24, r24
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	00 24       	eor	r0, r0
    2426:	96 95       	lsr	r25
    2428:	87 95       	ror	r24
    242a:	07 94       	ror	r0
    242c:	96 95       	lsr	r25
    242e:	87 95       	ror	r24
    2430:	07 94       	ror	r0
    2432:	98 2f       	mov	r25, r24
    2434:	80 2d       	mov	r24, r0
    2436:	82 2b       	or	r24, r18
    2438:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the data register empty INTERRUPT */
	UCSRB = (UCSRB & 0xDF) | ((Config_Ptr->emptyINT)<<UDRIE);
    243a:	aa e2       	ldi	r26, 0x2A	; 42
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	ea e2       	ldi	r30, 0x2A	; 42
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	28 2f       	mov	r18, r24
    2446:	2f 7d       	andi	r18, 0xDF	; 223
    2448:	eb 81       	ldd	r30, Y+3	; 0x03
    244a:	fc 81       	ldd	r31, Y+4	; 0x04
    244c:	83 81       	ldd	r24, Z+3	; 0x03
    244e:	88 2f       	mov	r24, r24
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	82 95       	swap	r24
    2458:	92 95       	swap	r25
    245a:	90 7f       	andi	r25, 0xF0	; 240
    245c:	98 27       	eor	r25, r24
    245e:	80 7f       	andi	r24, 0xF0	; 240
    2460:	98 27       	eor	r25, r24
    2462:	82 2b       	or	r24, r18
    2464:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Receiver Enable */
	UCSRB = (UCSRB & 0xEF) | ((Config_Ptr->receiverEN)<<RXEN);
    2466:	aa e2       	ldi	r26, 0x2A	; 42
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	ea e2       	ldi	r30, 0x2A	; 42
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	28 2f       	mov	r18, r24
    2472:	2f 7e       	andi	r18, 0xEF	; 239
    2474:	eb 81       	ldd	r30, Y+3	; 0x03
    2476:	fc 81       	ldd	r31, Y+4	; 0x04
    2478:	84 81       	ldd	r24, Z+4	; 0x04
    247a:	88 2f       	mov	r24, r24
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	82 95       	swap	r24
    2480:	92 95       	swap	r25
    2482:	90 7f       	andi	r25, 0xF0	; 240
    2484:	98 27       	eor	r25, r24
    2486:	80 7f       	andi	r24, 0xF0	; 240
    2488:	98 27       	eor	r25, r24
    248a:	82 2b       	or	r24, r18
    248c:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Transmitter Enable */
	UCSRB = (UCSRB & 0xF7) | ((Config_Ptr->transmitterEN)<<TXEN);
    248e:	aa e2       	ldi	r26, 0x2A	; 42
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	ea e2       	ldi	r30, 0x2A	; 42
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	28 2f       	mov	r18, r24
    249a:	27 7f       	andi	r18, 0xF7	; 247
    249c:	eb 81       	ldd	r30, Y+3	; 0x03
    249e:	fc 81       	ldd	r31, Y+4	; 0x04
    24a0:	85 81       	ldd	r24, Z+5	; 0x05
    24a2:	88 2f       	mov	r24, r24
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	88 0f       	add	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	82 2b       	or	r24, r18
    24b4:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the character size on two separate register  */
	/* Adding only the third-bit to UCSRB and the 2 least bits to UCSRC */
	UCSRB = (UCSRB & 0xFB) | (((Config_Ptr->charSize)>>2)<<UCSZ2);
    24b6:	aa e2       	ldi	r26, 0x2A	; 42
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	ea e2       	ldi	r30, 0x2A	; 42
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	28 2f       	mov	r18, r24
    24c2:	2b 7f       	andi	r18, 0xFB	; 251
    24c4:	eb 81       	ldd	r30, Y+3	; 0x03
    24c6:	fc 81       	ldd	r31, Y+4	; 0x04
    24c8:	86 81       	ldd	r24, Z+6	; 0x06
    24ca:	86 95       	lsr	r24
    24cc:	86 95       	lsr	r24
    24ce:	88 2f       	mov	r24, r24
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	82 2b       	or	r24, r18
    24dc:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | (((Config_Ptr->charSize)<<6)>>5);
    24de:	a0 e4       	ldi	r26, 0x40	; 64
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	e0 e4       	ldi	r30, 0x40	; 64
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z
    24e8:	28 2f       	mov	r18, r24
    24ea:	29 7f       	andi	r18, 0xF9	; 249
    24ec:	eb 81       	ldd	r30, Y+3	; 0x03
    24ee:	fc 81       	ldd	r31, Y+4	; 0x04
    24f0:	86 81       	ldd	r24, Z+6	; 0x06
    24f2:	88 2f       	mov	r24, r24
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	00 24       	eor	r0, r0
    24f8:	96 95       	lsr	r25
    24fa:	87 95       	ror	r24
    24fc:	07 94       	ror	r0
    24fe:	96 95       	lsr	r25
    2500:	87 95       	ror	r24
    2502:	07 94       	ror	r0
    2504:	98 2f       	mov	r25, r24
    2506:	80 2d       	mov	r24, r0
    2508:	95 95       	asr	r25
    250a:	87 95       	ror	r24
    250c:	95 95       	asr	r25
    250e:	87 95       	ror	r24
    2510:	95 95       	asr	r25
    2512:	87 95       	ror	r24
    2514:	95 95       	asr	r25
    2516:	87 95       	ror	r24
    2518:	95 95       	asr	r25
    251a:	87 95       	ror	r24
    251c:	82 2b       	or	r24, r18
    251e:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* USART Reg Select between UCSRC & UBRRH */
	UCSRC = (UCSRC & 0x7F) | ((Config_Ptr->regSelect)<<URSEL);
    2520:	a0 e4       	ldi	r26, 0x40	; 64
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	e0 e4       	ldi	r30, 0x40	; 64
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	28 2f       	mov	r18, r24
    252c:	2f 77       	andi	r18, 0x7F	; 127
    252e:	eb 81       	ldd	r30, Y+3	; 0x03
    2530:	fc 81       	ldd	r31, Y+4	; 0x04
    2532:	87 81       	ldd	r24, Z+7	; 0x07
    2534:	88 2f       	mov	r24, r24
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	96 95       	lsr	r25
    253a:	98 2f       	mov	r25, r24
    253c:	88 27       	eor	r24, r24
    253e:	97 95       	ror	r25
    2540:	87 95       	ror	r24
    2542:	82 2b       	or	r24, r18
    2544:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* USART Mode Select: 1- A-Synch , 2- Synch */
	UCSRC = (UCSRC & 0xBF) | ((Config_Ptr->modeSelect)<<UMSEL);
    2546:	a0 e4       	ldi	r26, 0x40	; 64
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	e0 e4       	ldi	r30, 0x40	; 64
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	28 2f       	mov	r18, r24
    2552:	2f 7b       	andi	r18, 0xBF	; 191
    2554:	eb 81       	ldd	r30, Y+3	; 0x03
    2556:	fc 81       	ldd	r31, Y+4	; 0x04
    2558:	80 85       	ldd	r24, Z+8	; 0x08
    255a:	88 2f       	mov	r24, r24
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	00 24       	eor	r0, r0
    2560:	96 95       	lsr	r25
    2562:	87 95       	ror	r24
    2564:	07 94       	ror	r0
    2566:	96 95       	lsr	r25
    2568:	87 95       	ror	r24
    256a:	07 94       	ror	r0
    256c:	98 2f       	mov	r25, r24
    256e:	80 2d       	mov	r24, r0
    2570:	82 2b       	or	r24, r18
    2572:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Selecting the parity mode : Disabled/Even/ODD */
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->paritySelect)<<4);
    2574:	a0 e4       	ldi	r26, 0x40	; 64
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	e0 e4       	ldi	r30, 0x40	; 64
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	28 2f       	mov	r18, r24
    2580:	2f 7c       	andi	r18, 0xCF	; 207
    2582:	eb 81       	ldd	r30, Y+3	; 0x03
    2584:	fc 81       	ldd	r31, Y+4	; 0x04
    2586:	81 85       	ldd	r24, Z+9	; 0x09
    2588:	88 2f       	mov	r24, r24
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	82 95       	swap	r24
    258e:	92 95       	swap	r25
    2590:	90 7f       	andi	r25, 0xF0	; 240
    2592:	98 27       	eor	r25, r24
    2594:	80 7f       	andi	r24, 0xF0	; 240
    2596:	98 27       	eor	r25, r24
    2598:	82 2b       	or	r24, r18
    259a:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Selecting the stop bit mode: 1-bit and 2-bit */
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stopBitSelect)<<USBS);
    259c:	a0 e4       	ldi	r26, 0x40	; 64
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	e0 e4       	ldi	r30, 0x40	; 64
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	28 2f       	mov	r18, r24
    25a8:	27 7f       	andi	r18, 0xF7	; 247
    25aa:	eb 81       	ldd	r30, Y+3	; 0x03
    25ac:	fc 81       	ldd	r31, Y+4	; 0x04
    25ae:	82 85       	ldd	r24, Z+10	; 0x0a
    25b0:	88 2f       	mov	r24, r24
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	88 0f       	add	r24, r24
    25b6:	99 1f       	adc	r25, r25
    25b8:	88 0f       	add	r24, r24
    25ba:	99 1f       	adc	r25, r25
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	82 2b       	or	r24, r18
    25c2:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Selecting the clock Polarity: Rising and Falling */
	UCSRC = (UCSRC & 0xFE) | (Config_Ptr->clockPolatiry);
    25c4:	a0 e4       	ldi	r26, 0x40	; 64
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	e0 e4       	ldi	r30, 0x40	; 64
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	98 2f       	mov	r25, r24
    25d0:	9e 7f       	andi	r25, 0xFE	; 254
    25d2:	eb 81       	ldd	r30, Y+3	; 0x03
    25d4:	fc 81       	ldd	r31, Y+4	; 0x04
    25d6:	83 85       	ldd	r24, Z+11	; 0x0b
    25d8:	89 2b       	or	r24, r25
    25da:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/
	
	/* Setting the baud rate */
	/* At first you should calculate the UBRR value */
	a_ubrr_value = (uint16)((F_CPU*(Config_Ptr->transmitSpeed+1)/((Config_Ptr->baud_rate)*(16)))-1);
    25dc:	eb 81       	ldd	r30, Y+3	; 0x03
    25de:	fc 81       	ldd	r31, Y+4	; 0x04
    25e0:	80 81       	ld	r24, Z
    25e2:	88 2f       	mov	r24, r24
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	01 96       	adiw	r24, 0x01	; 1
    25e8:	aa 27       	eor	r26, r26
    25ea:	97 fd       	sbrc	r25, 7
    25ec:	a0 95       	com	r26
    25ee:	ba 2f       	mov	r27, r26
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	32 e1       	ldi	r19, 0x12	; 18
    25f4:	4a e7       	ldi	r20, 0x7A	; 122
    25f6:	50 e0       	ldi	r21, 0x00	; 0
    25f8:	bc 01       	movw	r22, r24
    25fa:	cd 01       	movw	r24, r26
    25fc:	0e 94 cb 13 	call	0x2796	; 0x2796 <__mulsi3>
    2600:	7b 01       	movw	r14, r22
    2602:	8c 01       	movw	r16, r24
    2604:	eb 81       	ldd	r30, Y+3	; 0x03
    2606:	fc 81       	ldd	r31, Y+4	; 0x04
    2608:	84 85       	ldd	r24, Z+12	; 0x0c
    260a:	95 85       	ldd	r25, Z+13	; 0x0d
    260c:	a6 85       	ldd	r26, Z+14	; 0x0e
    260e:	b7 85       	ldd	r27, Z+15	; 0x0f
    2610:	88 0f       	add	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	aa 1f       	adc	r26, r26
    2616:	bb 1f       	adc	r27, r27
    2618:	88 0f       	add	r24, r24
    261a:	99 1f       	adc	r25, r25
    261c:	aa 1f       	adc	r26, r26
    261e:	bb 1f       	adc	r27, r27
    2620:	88 0f       	add	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	aa 1f       	adc	r26, r26
    2626:	bb 1f       	adc	r27, r27
    2628:	88 0f       	add	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	aa 1f       	adc	r26, r26
    262e:	bb 1f       	adc	r27, r27
    2630:	9c 01       	movw	r18, r24
    2632:	ad 01       	movw	r20, r26
    2634:	c8 01       	movw	r24, r16
    2636:	b7 01       	movw	r22, r14
    2638:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__udivmodsi4>
    263c:	da 01       	movw	r26, r20
    263e:	c9 01       	movw	r24, r18
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	9a 83       	std	Y+2, r25	; 0x02
    2644:	89 83       	std	Y+1, r24	; 0x01
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = a_ubrr_value>>8;
    2646:	e0 e4       	ldi	r30, 0x40	; 64
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	9a 81       	ldd	r25, Y+2	; 0x02
    264e:	89 2f       	mov	r24, r25
    2650:	99 27       	eor	r25, r25
    2652:	80 83       	st	Z, r24
	UBRRL = a_ubrr_value;
    2654:	e9 e2       	ldi	r30, 0x29	; 41
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	80 83       	st	Z, r24

	/*----------------------------END--------------------------------*/
}
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	cf 91       	pop	r28
    2666:	df 91       	pop	r29
    2668:	1f 91       	pop	r17
    266a:	0f 91       	pop	r16
    266c:	ff 90       	pop	r15
    266e:	ef 90       	pop	r14
    2670:	08 95       	ret

00002672 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	0f 92       	push	r0
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	89 83       	std	Y+1, r24	; 0x01
	/* Need to wait till the buffer is ready to get a new data */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    267e:	eb e2       	ldi	r30, 0x2B	; 43
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	88 2f       	mov	r24, r24
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	80 72       	andi	r24, 0x20	; 32
    268a:	90 70       	andi	r25, 0x00	; 0
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	b9 f3       	breq	.-18     	; 0x267e <UART_sendByte+0xc>

	/* When it's ready then send it  */
	UDR = data;
    2690:	ec e2       	ldi	r30, 0x2C	; 44
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	80 83       	st	Z, r24
}
    2698:	0f 90       	pop	r0
    269a:	cf 91       	pop	r28
    269c:	df 91       	pop	r29
    269e:	08 95       	ret

000026a0 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    26a0:	df 93       	push	r29
    26a2:	cf 93       	push	r28
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
	/* Waiting till we get a new data */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    26a8:	eb e2       	ldi	r30, 0x2B	; 43
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	88 23       	and	r24, r24
    26b0:	dc f7       	brge	.-10     	; 0x26a8 <UART_receiveByte+0x8>

	/* Return it after getting it */
	return UDR;
    26b2:	ec e2       	ldi	r30, 0x2C	; 44
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
}
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <UART_sendString+0x6>
    26c4:	0f 92       	push	r0
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	9b 83       	std	Y+3, r25	; 0x03
    26cc:	8a 83       	std	Y+2, r24	; 0x02
	/* Initialing a counter which moves the pointer to another location */
	uint8 a_stringCounter = 0;
    26ce:	19 82       	std	Y+1, r1	; 0x01
    26d0:	0e c0       	rjmp	.+28     	; 0x26ee <UART_sendString+0x30>

	/* Sending byte by byte using UART_sendByte functio */
	while(Str[a_stringCounter] != '\0')
	{
		UART_sendByte(Str[a_stringCounter]);
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	28 2f       	mov	r18, r24
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	9b 81       	ldd	r25, Y+3	; 0x03
    26dc:	fc 01       	movw	r30, r24
    26de:	e2 0f       	add	r30, r18
    26e0:	f3 1f       	adc	r31, r19
    26e2:	80 81       	ld	r24, Z
    26e4:	0e 94 39 13 	call	0x2672	; 0x2672 <UART_sendByte>
		a_stringCounter++;
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	8f 5f       	subi	r24, 0xFF	; 255
    26ec:	89 83       	std	Y+1, r24	; 0x01
{
	/* Initialing a counter which moves the pointer to another location */
	uint8 a_stringCounter = 0;

	/* Sending byte by byte using UART_sendByte functio */
	while(Str[a_stringCounter] != '\0')
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	28 2f       	mov	r18, r24
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	9b 81       	ldd	r25, Y+3	; 0x03
    26f8:	fc 01       	movw	r30, r24
    26fa:	e2 0f       	add	r30, r18
    26fc:	f3 1f       	adc	r31, r19
    26fe:	80 81       	ld	r24, Z
    2700:	88 23       	and	r24, r24
    2702:	39 f7       	brne	.-50     	; 0x26d2 <UART_sendString+0x14>
	{
		UART_sendByte(Str[a_stringCounter]);
		a_stringCounter++;
	}
}
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2710:	0f 93       	push	r16
    2712:	1f 93       	push	r17
    2714:	df 93       	push	r29
    2716:	cf 93       	push	r28
    2718:	00 d0       	rcall	.+0      	; 0x271a <UART_receiveString+0xa>
    271a:	0f 92       	push	r0
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	9b 83       	std	Y+3, r25	; 0x03
    2722:	8a 83       	std	Y+2, r24	; 0x02
	/* Initialing a counter which moves the pointer to another location */
	uint8 a_stringCounter = 0;
    2724:	19 82       	std	Y+1, r1	; 0x01

	Str[a_stringCounter] = UART_receiveByte();
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	28 2f       	mov	r18, r24
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	9b 81       	ldd	r25, Y+3	; 0x03
    2730:	8c 01       	movw	r16, r24
    2732:	02 0f       	add	r16, r18
    2734:	13 1f       	adc	r17, r19
    2736:	0e 94 50 13 	call	0x26a0	; 0x26a0 <UART_receiveByte>
    273a:	f8 01       	movw	r30, r16
    273c:	80 83       	st	Z, r24
    273e:	0f c0       	rjmp	.+30     	; 0x275e <UART_receiveString+0x4e>

	/* We will start check for a specific character which means to us a null char*/
	while(Str[a_stringCounter] != '=')
	{
		a_stringCounter++;
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	8f 5f       	subi	r24, 0xFF	; 255
    2744:	89 83       	std	Y+1, r24	; 0x01
		Str[a_stringCounter] = UART_receiveByte();
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	28 2f       	mov	r18, r24
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	8a 81       	ldd	r24, Y+2	; 0x02
    274e:	9b 81       	ldd	r25, Y+3	; 0x03
    2750:	8c 01       	movw	r16, r24
    2752:	02 0f       	add	r16, r18
    2754:	13 1f       	adc	r17, r19
    2756:	0e 94 50 13 	call	0x26a0	; 0x26a0 <UART_receiveByte>
    275a:	f8 01       	movw	r30, r16
    275c:	80 83       	st	Z, r24
	uint8 a_stringCounter = 0;

	Str[a_stringCounter] = UART_receiveByte();

	/* We will start check for a specific character which means to us a null char*/
	while(Str[a_stringCounter] != '=')
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	28 2f       	mov	r18, r24
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	9b 81       	ldd	r25, Y+3	; 0x03
    2768:	fc 01       	movw	r30, r24
    276a:	e2 0f       	add	r30, r18
    276c:	f3 1f       	adc	r31, r19
    276e:	80 81       	ld	r24, Z
    2770:	8d 33       	cpi	r24, 0x3D	; 61
    2772:	31 f7       	brne	.-52     	; 0x2740 <UART_receiveString+0x30>
		a_stringCounter++;
		Str[a_stringCounter] = UART_receiveByte();
	}

	/* Then redefining the string by replacing the stop char with NULL char */
	Str[a_stringCounter] = '\0';
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	28 2f       	mov	r18, r24
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	9b 81       	ldd	r25, Y+3	; 0x03
    277e:	fc 01       	movw	r30, r24
    2780:	e2 0f       	add	r30, r18
    2782:	f3 1f       	adc	r31, r19
    2784:	10 82       	st	Z, r1
}
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	cf 91       	pop	r28
    278e:	df 91       	pop	r29
    2790:	1f 91       	pop	r17
    2792:	0f 91       	pop	r16
    2794:	08 95       	ret

00002796 <__mulsi3>:
    2796:	62 9f       	mul	r22, r18
    2798:	d0 01       	movw	r26, r0
    279a:	73 9f       	mul	r23, r19
    279c:	f0 01       	movw	r30, r0
    279e:	82 9f       	mul	r24, r18
    27a0:	e0 0d       	add	r30, r0
    27a2:	f1 1d       	adc	r31, r1
    27a4:	64 9f       	mul	r22, r20
    27a6:	e0 0d       	add	r30, r0
    27a8:	f1 1d       	adc	r31, r1
    27aa:	92 9f       	mul	r25, r18
    27ac:	f0 0d       	add	r31, r0
    27ae:	83 9f       	mul	r24, r19
    27b0:	f0 0d       	add	r31, r0
    27b2:	74 9f       	mul	r23, r20
    27b4:	f0 0d       	add	r31, r0
    27b6:	65 9f       	mul	r22, r21
    27b8:	f0 0d       	add	r31, r0
    27ba:	99 27       	eor	r25, r25
    27bc:	72 9f       	mul	r23, r18
    27be:	b0 0d       	add	r27, r0
    27c0:	e1 1d       	adc	r30, r1
    27c2:	f9 1f       	adc	r31, r25
    27c4:	63 9f       	mul	r22, r19
    27c6:	b0 0d       	add	r27, r0
    27c8:	e1 1d       	adc	r30, r1
    27ca:	f9 1f       	adc	r31, r25
    27cc:	bd 01       	movw	r22, r26
    27ce:	cf 01       	movw	r24, r30
    27d0:	11 24       	eor	r1, r1
    27d2:	08 95       	ret

000027d4 <__udivmodsi4>:
    27d4:	a1 e2       	ldi	r26, 0x21	; 33
    27d6:	1a 2e       	mov	r1, r26
    27d8:	aa 1b       	sub	r26, r26
    27da:	bb 1b       	sub	r27, r27
    27dc:	fd 01       	movw	r30, r26
    27de:	0d c0       	rjmp	.+26     	; 0x27fa <__udivmodsi4_ep>

000027e0 <__udivmodsi4_loop>:
    27e0:	aa 1f       	adc	r26, r26
    27e2:	bb 1f       	adc	r27, r27
    27e4:	ee 1f       	adc	r30, r30
    27e6:	ff 1f       	adc	r31, r31
    27e8:	a2 17       	cp	r26, r18
    27ea:	b3 07       	cpc	r27, r19
    27ec:	e4 07       	cpc	r30, r20
    27ee:	f5 07       	cpc	r31, r21
    27f0:	20 f0       	brcs	.+8      	; 0x27fa <__udivmodsi4_ep>
    27f2:	a2 1b       	sub	r26, r18
    27f4:	b3 0b       	sbc	r27, r19
    27f6:	e4 0b       	sbc	r30, r20
    27f8:	f5 0b       	sbc	r31, r21

000027fa <__udivmodsi4_ep>:
    27fa:	66 1f       	adc	r22, r22
    27fc:	77 1f       	adc	r23, r23
    27fe:	88 1f       	adc	r24, r24
    2800:	99 1f       	adc	r25, r25
    2802:	1a 94       	dec	r1
    2804:	69 f7       	brne	.-38     	; 0x27e0 <__udivmodsi4_loop>
    2806:	60 95       	com	r22
    2808:	70 95       	com	r23
    280a:	80 95       	com	r24
    280c:	90 95       	com	r25
    280e:	9b 01       	movw	r18, r22
    2810:	ac 01       	movw	r20, r24
    2812:	bd 01       	movw	r22, r26
    2814:	cf 01       	movw	r24, r30
    2816:	08 95       	ret

00002818 <__prologue_saves__>:
    2818:	2f 92       	push	r2
    281a:	3f 92       	push	r3
    281c:	4f 92       	push	r4
    281e:	5f 92       	push	r5
    2820:	6f 92       	push	r6
    2822:	7f 92       	push	r7
    2824:	8f 92       	push	r8
    2826:	9f 92       	push	r9
    2828:	af 92       	push	r10
    282a:	bf 92       	push	r11
    282c:	cf 92       	push	r12
    282e:	df 92       	push	r13
    2830:	ef 92       	push	r14
    2832:	ff 92       	push	r15
    2834:	0f 93       	push	r16
    2836:	1f 93       	push	r17
    2838:	cf 93       	push	r28
    283a:	df 93       	push	r29
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	ca 1b       	sub	r28, r26
    2842:	db 0b       	sbc	r29, r27
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	f8 94       	cli
    2848:	de bf       	out	0x3e, r29	; 62
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	cd bf       	out	0x3d, r28	; 61
    284e:	09 94       	ijmp

00002850 <__epilogue_restores__>:
    2850:	2a 88       	ldd	r2, Y+18	; 0x12
    2852:	39 88       	ldd	r3, Y+17	; 0x11
    2854:	48 88       	ldd	r4, Y+16	; 0x10
    2856:	5f 84       	ldd	r5, Y+15	; 0x0f
    2858:	6e 84       	ldd	r6, Y+14	; 0x0e
    285a:	7d 84       	ldd	r7, Y+13	; 0x0d
    285c:	8c 84       	ldd	r8, Y+12	; 0x0c
    285e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2860:	aa 84       	ldd	r10, Y+10	; 0x0a
    2862:	b9 84       	ldd	r11, Y+9	; 0x09
    2864:	c8 84       	ldd	r12, Y+8	; 0x08
    2866:	df 80       	ldd	r13, Y+7	; 0x07
    2868:	ee 80       	ldd	r14, Y+6	; 0x06
    286a:	fd 80       	ldd	r15, Y+5	; 0x05
    286c:	0c 81       	ldd	r16, Y+4	; 0x04
    286e:	1b 81       	ldd	r17, Y+3	; 0x03
    2870:	aa 81       	ldd	r26, Y+2	; 0x02
    2872:	b9 81       	ldd	r27, Y+1	; 0x01
    2874:	ce 0f       	add	r28, r30
    2876:	d1 1d       	adc	r29, r1
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	f8 94       	cli
    287c:	de bf       	out	0x3e, r29	; 62
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	cd bf       	out	0x3d, r28	; 61
    2882:	ed 01       	movw	r28, r26
    2884:	08 95       	ret

00002886 <_exit>:
    2886:	f8 94       	cli

00002888 <__stop_program>:
    2888:	ff cf       	rjmp	.-2      	; 0x2888 <__stop_program>
